// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Jo-Pippin

//@version=5
indicator("Drop and dragg Poc", overlay = true, max_bars_back = 500)

Alert_zone_spacing   = input.int (20,   'Poc Zones width',  minval=1, maxval=230, group = "Element On/Off")
zone_spacing_right   = input.int (20,   'Poc Zones extend right',  minval=1, maxval=130, group = "Element On/Off")
show_second_inp      = input.bool(true, 'Show 2nd candle selector',confirm=true, group = "Element On/Off")
show_third_inp       = input.bool(true, 'Show 3rd candle selector',confirm=true, group = "Element On/Off")
show_fourth_inp      = input.bool(true, 'Show 4rd candle selector',confirm=true, group = "Element On/Off")
show_a               = input.bool(true, 'Show AVWAP',confirm=true, group = "Element On/Off")
show_labels          = input.bool(true, 'Show Poc price labels', group = "Element On/Off")
show_vol_mark        = input.bool(true, 'Show vol Markers', group = "Element On/Off")
show_volume_gra      = input.bool(true, 'Show gradient volume candles',confirm=true, group = "Element On/Off")
show_yearly          = input.bool(true, 'Show Yearly Open Markers',confirm=true, group = "Element On/Off")
show_adr             = input.bool(true, 'Show ADR',confirm=true, group = "Element On/Off")

alert_line_col       = input.color(color.new(#eceff1, 100) ,'Poc zone outline color', group = "Color")
alert_zone_bg        = input.color(color.new(#070707, 70) ,'Poc zone BG color', group = "Color")
adr_c                = input.color(color.new(#0467fa, 0) ,'ADR color', group = "Color")

length               = input.int(400, "Volume Lookback Period", 2,  group = "Volume candle gradient")
bodyColorToggle      = input.bool(true, "Vol Canles Body Color On",  group = "Volume candle gradient")
borderColorToggle    = input.bool(true, "Vol Canles Border Color On",  group = "Volume candle gradient")
wickColorToggle      = input.bool(true, "Vol Canles Wick Color On",  group = "Volume candle gradient")

inp_line_style_TR    = input.string("Dotted", options = ["Dotted", "Solid", "Dashed"], title = "Poc Zone outline style", group = "Element On/Off")
Line_st_TR           = inp_line_style_TR  == "Solid" ? line.style_solid : inp_line_style_TR  == "Dotted" ? line.style_dotted : inp_line_style_TR  == "Dashed" ? line.style_dashed : na

inp_text_size        = input.string("Tiny", options = ["Tiny", "Small", "Auto"], title = "Label Text Size", group = "Element On/Off")
TextSize             = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : inp_text_size == "Auto" ? size.auto : na

Text_c               = input.color(color.new(#f5f6fa, 0) ,'Text Color', group = "Color")
m_c                  = input.color(color.new(#404867, 0) ,'Selected candle Marker Color', group = "Color")
customUpColorT       = input.color(color.new(#0683f1, 0), "Up Color of gradient vol candles",  group = "Color")
customDownColorT     = input.color(color.new(#f82104, 0), "Down Color of gradient vol candles", group = "Color")
i_open_c             = input.color(color.new(#0683f8, 0),  'Yearly Open Marker Color', group = "Color Settings")


Show_max             = input.bool(true, 'Show Max Vwap', group = "AVWAP")
Show_min             = input.bool(true, 'Show Min Vwap', group = "AVWAP")
Show_avr             = input.bool(true, 'Show Avr Vwap', group = "AVWAP")
Show_AVWAP_zone      = input.bool(true, 'Show AVWAP top/bot lines', group = "AVWAP")

Show_avwap_TB_price  = input.bool(false, 'Show AVWAP TOP BOT price labels', group = "AVWAP")
Show_avwap_price_mid = input.bool(true, 'Show AVWAP middle label price', group = "AVWAP")
inp_line_style       = input.string("Step", options = ["Step", "Line"], title = "Cross Line Style", group = "AVWAP")
Line_st              = inp_line_style == "Step" ? plot.style_stepline : inp_line_style == "Line" ? plot.style_line : na
lookback             = input.int(defval=0, title='Zone Lookback Period', group = "AVWAP")

max_min_col          = input.color(color.new(#101111, 84), 'Vwap max and min color',   group = "AVWAP Color Settings")
mid_col              = input.color(color.new(#0c0c0c, 30), 'Vwap (max + min)/2 color',   group = "AVWAP Color Settings")

date1                = input.time(0,title ='Input Candle Date',confirm=true,group='Elements')
date2                = input.time(0,title ='Input Candle Date2',confirm=true,group='Elements')
date3                = input.time(0,title ='Input Candle Date3',confirm=true,group='Elements')
date4                = input.time(0,title ='Input Candle Date4',confirm=true,group='Elements')
startCalculationDate = input.time(0,title ='Avwap Anchor Point', confirm=true,group='Elements')

t1                   = input.symbol(title="Ticker 01",  defval = "BINANCE:BTCUSDT")
t2                   = input.symbol(title="Ticker 02",  defval = "BINANCE:BTCUSDTPERP")
t3                   = input.symbol(title="Ticker 03",  defval = "BINANCE:BTCPERP")
t4                   = input.symbol(title="Ticker 04",  defval = "BITSTAMP:BTCUSD")
t5                   = input.symbol(title="Ticker 05",  defval = "BYBIT:BTCUSDT")
t6                   = input.symbol(title="Ticker 06",  defval = "BYBIT:BTCUSD")

[t1_volume_]         = request.security(t1, timeframe.period, expression=[volume])
[t2_volume_]         = request.security(t2, timeframe.period, expression=[volume])
[t3_volume_]         = request.security(t3, timeframe.period, expression=[volume])
[t4_volume_]         = request.security(t4, timeframe.period, expression=[volume])
[t5_volume_]         = request.security(t5, timeframe.period, expression=[volume])
[t6_volume_]         = request.security(t6, timeframe.period, expression=[volume])

aggr = t1_volume_ + t2_volume_ + t5_volume_

//Volume for last N periods
var int [] pastVol = array.new_int(length)
for i = 0 to length - 1
    array.set(pastVol, i, int(aggr[i]))

//Heatmap color assignments
upColor   = color.from_gradient(aggr, array.min(pastVol), array.max(pastVol), na, customUpColorT)
downColor = color.from_gradient(aggr, array.min(pastVol), array.max(pastVol), na, customDownColorT)

//Dynamic timeframe
currentTimeframe = timeframe.in_seconds(timeframe.period) / 60
dynTf = currentTimeframe <= 30 ? "1" : currentTimeframe > 30 and currentTimeframe <= 180 ? "5" :
 currentTimeframe > 180   and currentTimeframe <= 480 ? "15" : currentTimeframe > 480 and currentTimeframe <= 1440 ? "60" :
  currentTimeframe > 1440 and currentTimeframe <= 4320 ? "120" : currentTimeframe > 4320 ? "240" : na

ltfStats() =>
    vol = na(volume) == false ? volume : 0
    [close, vol]

// [ltfSrc, ltfVolume] = request.security_lower_tf(syminfo.tickerid, dynTf, ltfStats())
[ltfSrc, ltfVolume] = request.security_lower_tf("BINANCE:BTCUSDTPERP", dynTf, ltfStats())

tpoArrSize          = array.size(ltfSrc)
maxVolume           = array.max(ltfVolume,0)
indexOfMaxVolume    = array.indexof(ltfVolume, maxVolume)
maxVol              = array.size(ltfSrc) > 0 ? array.get(ltfSrc, indexOfMaxVolume) : na
bartime             = int(ta.change(time))
bars                = (math.floor((timenow - date1) / bartime))-1
bars2               = (math.floor((timenow - date2) / bartime))-1
bars3               = (math.floor((timenow - date3) / bartime))-1
bars4               = (math.floor((timenow - date4) / bartime))-1
poc_price_text      = show_labels == true ? "- $" + str.tostring(maxVol[bars+1]) : ''
poc_price_text2     = show_labels == true ? "- $" + str.tostring(maxVol[bars2+1]) : ''
poc_price_text3     = show_labels == true ? "- $" + str.tostring(maxVol[bars3+1]) : ''
poc_price_text4     = show_labels == true ? "- $" + str.tostring(maxVol[bars4+1]) : ''

vwap_t1() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t1_volume_)
        array.push(volArray, t1_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt1 = vwap_t1()

vwap_t2() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t2_volume_)
        array.push(volArray, t2_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt2 = vwap_t2()

vwap_t3() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t3_volume_)
        array.push(volArray, t3_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt3 = vwap_t3()

vwap_t4() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t4_volume_)
        array.push(volArray, t4_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt4 = vwap_t4()

vwap_t5() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t5_volume_)
        array.push(volArray, t5_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt5 = vwap_t5()

vwap_t6() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t6_volume_)
        array.push(volArray, t6_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt6 = vwap_t6()

max = math.max(vt1,vt2,vt3,vt4,vt5,vt6)
min = math.min(vt1,vt2,vt3,vt4,vt5,vt6)
avr = math.avg(max,min)

a = high <  max and high > min and close < min
b = low <  max and low > min and close > max

//Yearly Open Dots
[yo,yc1]      = request.security(syminfo.tickerid, '12M', expression=[open, close[1]], lookahead=barmerge.lookahead_on)
new_day1       = yc1[1]  != yc1
plotchar(new_day1 and show_yearly ? yo : na, title='Close', char='â«', location=location.absolute, color=i_open_c, offset=0, size=size.tiny)

//Plot high vol candles
plotcandle(show_volume_gra ? open:na, high, low, close, "Volume Heatmap Candlestick Colors", bodyColorToggle ? close >= open ? upColor : downColor : color.rgb(0, 0, 0, 100), wickColorToggle ? close >= open ? upColor : downColor : color.rgb(0, 0, 0, 100), bordercolor=borderColorToggle ? close >= open ? upColor : downColor : color.rgb(0, 0, 0, 100))

//AVWAP
plot(Show_max and show_a ? max :na, "max", linewidth=1, color=max_min_col, style=Line_st)
plot(Show_avr and show_a ? avr :na, "avr", linewidth=1, color=mid_col, style=Line_st)
plot(Show_min and show_a ? min :na, "min", linewidth=1, color=max_min_col, style=Line_st)

lab1 = Show_avwap_TB_price and show_a ?label.new(bar_index+zone_spacing_right,max,text=str.tostring(max,format.mintick),style=label.style_label_left,size=size.tiny,textcolor=Text_c, color=color.new(color.white,100)):na
label.delete(lab1[1])
lab2 = Show_avwap_TB_price and show_a ? label.new(bar_index+zone_spacing_right,min,text=str.tostring(min,format.mintick),style=label.style_label_left,size=size.tiny,textcolor=Text_c,color=color.new(color.white,100)):na
label.delete(lab2[1])
topline = Show_AVWAP_zone and show_a and Show_AVWAP_zone ? line.new(bar_index[lookback],(max), bar_index+zone_spacing_right,(max),style=line.style_solid,color=max_min_col):na
line.delete(topline[1])
midline = Show_AVWAP_zone and show_a ? line.new(bar_index[lookback],(max+min)/2, bar_index+zone_spacing_right,(max+min)/2,style=line.style_solid,color=mid_col):na
line.delete(midline[1])
botline = Show_AVWAP_zone and show_a and Show_AVWAP_zone ? line.new(bar_index[lookback],(min), bar_index+zone_spacing_right,(min),style=line.style_solid,color=max_min_col):na
line.delete(botline[1])
labmid = Show_avwap_price_mid and show_a ? label.new(bar_index+zone_spacing_right,(max+min)/2,text= "- $" +  str.tostring((max+min)/2,format.mintick),style=label.style_label_left,textcolor=Text_c,size=size.tiny,color=color.new(color.white,100)):na
label.delete(labmid[1])

//Poc 
poc_z_box  = box.new(bar_index[bars+1], maxVol[bars+1]+Alert_zone_spacing, bar_index+zone_spacing_right, maxVol[bars+1]-Alert_zone_spacing, border_color=alert_line_col, border_width=1, border_style=Line_st_TR,bgcolor=alert_zone_bg, text=poc_price_text, text_size=TextSize, text_color=Text_c, text_halign=text.align_right, text_valign=text.align_center)
box.delete(poc_z_box[1]) 

//Poc 2
poc_z_box2  = show_second_inp ? box.new(bar_index[bars2+1], maxVol[bars2+1]+Alert_zone_spacing, bar_index+zone_spacing_right, maxVol[bars2+1]-Alert_zone_spacing, border_color=alert_line_col, border_width=1, border_style=Line_st_TR,bgcolor=alert_zone_bg, text=poc_price_text2, text_size=TextSize, text_color=Text_c, text_halign=text.align_right, text_valign=text.align_center):na
box.delete(poc_z_box2[1]) 

//Poc 3
poc_z_box3  = show_third_inp ? box.new(bar_index[bars3+1], maxVol[bars3+1]+Alert_zone_spacing, bar_index+zone_spacing_right, maxVol[bars3+1]-Alert_zone_spacing, border_color=alert_line_col, border_width=1, border_style=Line_st_TR,bgcolor=alert_zone_bg, text=poc_price_text3, text_size=TextSize, text_color=Text_c, text_halign=text.align_right, text_valign=text.align_center):na
box.delete(poc_z_box3[1]) 

//Poc 4
poc_z_box4  = show_fourth_inp ? box.new(bar_index[bars4+1], maxVol[bars4+1]+Alert_zone_spacing, bar_index+zone_spacing_right, maxVol[bars4+1]-Alert_zone_spacing, border_color=alert_line_col, border_width=1, border_style=Line_st_TR,bgcolor=alert_zone_bg, text=poc_price_text4, text_size=TextSize, text_color=Text_c, text_halign=text.align_right, text_valign=text.align_center):na
box.delete(poc_z_box4[1])

//Vol Candle Marker 01
vol_candle_marker = show_vol_mark  ? label.new(bar_index[bars+1], low[bars+1], text='â²', color=color.new(color.black,100), style=label.style_label_up, textcolor=m_c, size=size.tiny):na
label.delete(vol_candle_marker[1])

//Vol Candle Marker 02
vol_candle_marker2 = show_vol_mark and show_second_inp  ? label.new(bar_index[bars2+1], low[bars2+1], text='â²', color=color.new(color.black,100), style=label.style_label_up, textcolor=m_c, size=size.tiny):na
label.delete(vol_candle_marker2[1])

//Vol Candle Marker 03
vol_candle_marker3 = show_vol_mark and show_third_inp  ? label.new(bar_index[bars3+1], low[bars3+1], text='â²', color=color.new(color.black,100), style=label.style_label_up, textcolor=m_c, size=size.tiny):na
label.delete(vol_candle_marker3[1])

//Vol Candle Marker 04
vol_candle_marker4 = show_vol_mark and show_third_inp  ? label.new(bar_index[bars4+1], low[bars4+1], text='â²', color=color.new(color.black,100), style=label.style_label_up, textcolor=m_c, size=size.tiny):na
label.delete(vol_candle_marker4[1])

//ADR
daily_adr_length = input.int(title='Days in ADR calculation', defval=5, minval=0)
daily_adr = input.int(title='Plot number of ADR Back', defval=50, minval=0)


new_bar(res) =>
    ta.change(time(res)) != 0
new_period(condition, src) =>
    result = 0.0
    result := condition ? src : result[1]
    result
adr(length) =>
    range_1 = high - low
    ta.sma(range_1[1], length)
adr_high(adr_length) =>
    adr_ = adr(adr_length)
    high - low < adr_ ? low + adr_ : close >= open ? low + adr_ : high
adr_low(adr_length) =>
    adr_ = adr(adr_length)
    high - low < adr_ ? high - adr_ : close >= open ? low : high - adr_

day_adr_high = request.security(syminfo.tickerid, 'D', adr_high(daily_adr_length), lookahead=barmerge.lookahead_on)
day_adr_low  = request.security(syminfo.tickerid, 'D', adr_low(daily_adr_length), lookahead=barmerge.lookahead_on)

one_day = 1000 * 60 * 60 * 24
new_day = daily_adr > 0 and timenow - time < one_day * daily_adr and new_bar('D')
day_adr_high_ = new_period(new_day, day_adr_high)
day_adr_low_ = new_period(new_day, day_adr_low)

var float todayshigh = na
var float todayslow = na

if new_day and new_day[1] == false
    todayshigh := open
    todayslow := open
    todayslow

todayshigh := high[1] < high and todayshigh < high ? high : todayshigh
todayslow := low[1] > low and todayslow > low ? low : todayslow

adrcalc = (todayshigh - todayslow) / (day_adr_high - day_adr_low) * 100
adrcalc_plot = adrcalc < 100 ? adrcalc : adrcalc > 100 ? 100 : na ? adrcalc : na

if new_day and new_day[1] == false
    todayshigh := open
    todayslow := open
    todayslow

lineColour = adrcalc > 99.99 ? adr_c : color.rgb(255, 255, 255, 100)  // Find Z Day
plotchar(adrcalc_plot and show_adr ? adrcalc_plot : na, char='.', location=location.bottom, color=lineColour, offset=0,  size=size.tiny)