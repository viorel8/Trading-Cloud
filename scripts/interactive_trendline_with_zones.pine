//@version=5
indicator("TL",shorttitle="TL", overlay=true)



inp_str   = input.string('A', title='Node 01 Text', group = "TL")
inp_str2  = input.string('B', title='Node 02 Text', group = "TL")
fontType1 = input.string('Full Width', title='Node 01 Text Font Type', options=['Pine Default', 'Sans', 'Sans Italic', 'Sans Bold', 'Sans Bold Italic', 'Sans-Serif', 'Sans-Serif Italic', 'Sans-Serif Bold', 'Sans-Serif Bold Italic', 'Fraktur', 'Fraktur Bold', 'Script', 'Script Bold', 'Double-Struck', 'Monospace', 'Regional Indicator', 'Full Width', 'Circled'], group = "TL")
fontType2 = fontType1

inp_text_size          = input.string("Tiny", options = ["Tiny", "Small","Normal"], title = "Label Text Size", group = "TL")
TextSize               = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : inp_text_size == "Normal" ? size.normal : na

line_slope             = input.string("Sloped", options = ["Vertical", "Horizontal","Sloped"], title = "Line angle", group = "TL")


inp_line_style         = input.string("Solid", options = ["Dotted", "Solid", "Dashed"], title = "Main Line Style", group = "TL")
Line_st                = inp_line_style == "Solid" ? line.style_solid : inp_line_style == "Dotted" ? line.style_dotted : inp_line_style == "Dashed" ? line.style_dashed : na
inp_line_stylez        = input.string("Solid", options = ["Dotted", "Solid", "Dashed"], title = "Zone Line Style", group = "TL")
Line_stz               = inp_line_stylez == "Solid" ? line.style_solid : inp_line_stylez == "Dotted" ? line.style_dotted : inp_line_stylez == "Dashed" ? line.style_dashed : na
zone_on_off            = input.bool(true,'Show Zone', group = "TL")
show_l_label           = input.bool(false,'Show Left Label', group = "TL")
show_r_label           = input.bool(false,'Show Right Label', group = "TL")

inp_line_stylee        = input.string("Right", options = ["None", "Right", "Left", "Both"], title = "Line extend", group = "TL")
Line_ste               = inp_line_stylee == "Right" ? extend.right : inp_line_stylee == "None" ? extend.none  : inp_line_stylee == "Left" ? extend.left  : inp_line_stylee == "Both" ? extend.both  : na
spacingz               = input.int (40,   'Zones width',  minval=0, maxval=530000, group = "TL")

AllColor               = input.color(color.new(#fffefe, 100), "Main Line Color", group = "Color")
AllColor3               = input.color(color.new(#fffefe, 90), "Zone Line Color", group = "Color")
AllColor2              = input.color(color.new(#fffefe, 0), "Yearly Marker", group = "Color")
text_c                 = input.color(color.rgb(250, 246, 246, 30), "Text Color", group = "Color")
label_b_color          = input.color(color.new(color.white,100), "Label Background Color", group = "Color")


Pine_std_LC = 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'
Pine_std_UC = 'A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z'
Pine_std_DG = '0,1,2,3,4,5,6,7,8,9'

Pine_font_std_LC = str.split(Pine_std_LC, ',')
Pine_font_std_UC = str.split(Pine_std_UC, ',')
Pine_font_std_DG = str.split(Pine_std_DG, ',')

fontType(font_select) =>
    var string cust_select_LC = ' '
    var string cust_select_UC = ' '
    var string cust_select_DG = ' '
    if font_select == 'Sans'
        cust_select_LC := '𝖺,𝖻,𝖼,𝖽,𝖾,𝖿,𝗀,𝗁,𝗂,𝗃,𝗄,𝗅,𝗆,𝗇,𝗈,𝗉,𝗊,𝗋,𝗌,𝗍,𝗎,𝗏,𝗐,𝗑,𝗒,𝗓'
        cust_select_UC := '𝖠,𝖡,𝖢,𝖣,𝖤,𝖥,𝖦,𝖧,𝖨,𝖩,𝖪,𝖫,𝖬,𝖭,𝖮,𝖯,𝖰,𝖱,𝖲,𝖳,𝖴,𝖵,𝖶,𝖷,𝖸,𝖹'
        cust_select_DG := '𝟢,𝟣,𝟤,𝟥,𝟦,𝟧,𝟨,𝟩,𝟪,𝟫'
        cust_select_DG
    else if font_select == 'Sans Italic'
        cust_select_LC := '𝘢,𝘣,𝘤,𝘥,𝘦,𝘧,𝘨,𝘩,𝘪,𝘫,𝘬,𝘭,𝘮,𝘯,𝘰,𝘱,𝘲,𝘳,𝘴,𝘵,𝘶,𝘷,𝘸,𝘹,𝘺,𝘻'
        cust_select_UC := '𝘈,𝘉,𝘊,𝘋,𝘌,𝘍,𝘎,𝘏,𝘐,𝘑,𝘒,𝘓,𝘔,𝘕,𝘖,𝘗,𝘘,𝘙,𝘚,𝘛,𝘜,𝘝,𝘞,𝘟,𝘠,𝘡'
        cust_select_DG := '𝟢,𝟣,𝟤,𝟥,𝟦,𝟧,𝟨,𝟩,𝟪,𝟫'
        cust_select_DG
    else if font_select == 'Sans Bold'
        cust_select_LC := '𝗮,𝗯,𝗰,𝗱,𝗲,𝗳,𝗴,𝗵,𝗶,𝗷,𝗸,𝗹,𝗺,𝗻,𝗼,𝗽,𝗾,𝗿,𝘀,𝘁,𝘂,𝘃,𝘄,𝘅,𝘆,𝘇'
        cust_select_UC := '𝗔,𝗕,𝗖,𝗗,𝗘,𝗙,𝗚,𝗛,𝗜,𝗝,𝗞,𝗟,𝗠,𝗡,𝗢,𝗣,𝗤,𝗥,𝗦,𝗧,𝗨,𝗩,𝗪,𝗫,𝗬,𝗭'
        cust_select_DG := '𝟬,𝟭,𝟮,𝟯,𝟰,𝟱,𝟲,𝟳,𝟴,𝟵'
        cust_select_DG
    else if font_select == 'Sans Bold Italic'
        cust_select_LC := '𝙖,𝙗,𝙘,𝙙,𝙚,𝙛,𝙜,𝙝,𝙞,𝙟,𝙠,𝙡,𝙢,𝙣,𝙤,𝙥,𝙦,𝙧,𝙨,𝙩,𝙪,𝙫,𝙬,𝙭,𝙮,𝙯'
        cust_select_UC := '𝘼,𝘽,𝘾,𝘿,𝙀,𝙁,𝙂,𝙃,𝙄,𝙅,𝙆,𝙇,𝙈,𝙉,𝙊,𝙋,𝙌,𝙍,𝙎,𝙏,𝙐,𝙑,𝙒,𝙓,𝙔,𝙕'
        cust_select_DG := '𝟬,𝟭,𝟮,𝟯,𝟰,𝟱,𝟲,𝟳,𝟴,𝟵'
        cust_select_DG
    else if font_select == 'Sans-Serif'
        cust_select_LC := '𝚊,𝚋,𝚌,𝚍,𝚎,𝚏,𝚐,𝚑,𝚒,𝚓,𝚔,𝚕,𝚖,𝚗,𝚘,𝚙,𝚚,𝚛,𝚜,𝚝,𝚞,𝚟,𝚠,𝚡,𝚢,𝚣'
        cust_select_UC := '𝙰,𝙱,𝙲,𝙳,𝙴,𝙵,𝙶,𝙷,𝙸,𝙹,𝙺,𝙻,𝙼,𝙽,𝙾,𝙿,𝚀,𝚁,𝚂,𝚃,𝚄,𝚅,𝚆,𝚇,𝚈,𝚉'
        cust_select_DG := '𝟶,𝟷,𝟸,𝟹,𝟺,𝟻,𝟼,𝟽,𝟾,𝟿'
        cust_select_DG
    else if font_select == 'Sans-Serif Italic'
        cust_select_LC := '𝘢,𝘣,𝘤,𝘥,𝘦,𝘧,𝘨,𝘩,𝘪,𝘫,𝘬,𝘭,𝘮,𝘯,𝘰,𝘱,𝘲,𝘳,𝘴,𝘵,𝘶,𝘷,𝘸,𝘹,𝘺,𝘻'
        cust_select_UC := '𝘈,𝘉,𝘊,𝘋,𝘌,𝘍,𝘎,𝘏,𝘐,𝘑,𝘒,𝘓,𝘔,𝘕,𝘖,𝘗,𝘘,𝘙,𝘚,𝘛,𝘜,𝘝,𝘞,𝘟,𝘠,𝘡'
        cust_select_DG := '𝟶,𝟷,𝟸,𝟹,𝟺,𝟻,𝟼,𝟽,𝟾,𝟿'
        cust_select_DG
    else if font_select == 'Sans-Serif Bold'
        cust_select_LC := '𝐚,𝐛,𝐜,𝐝,𝐞,𝐟,𝐠,𝐡,𝐢,𝐣,𝐤,𝐥,𝐦,𝐧,𝐨,𝐩,𝐪,𝐫,𝐬,𝐭,𝐮,𝐯,𝐰,𝐱,𝐲,𝐳'
        cust_select_UC := '𝐀,𝐁,𝐂,𝐃,𝐄,𝐅,𝐆,𝐇,𝐈,𝐉,𝐊,𝐋,𝐌,𝐍,𝐎,𝐏,𝐐,𝐑,𝐒,𝐓,𝐔,𝐕,𝐖,𝐗,𝐘,𝐙'
        cust_select_DG := '𝟎,𝟏,𝟐,𝟑,𝟒,𝟓,𝟔,𝟕,𝟖,𝟗'
        cust_select_DG
    else if font_select == 'Sans-Serif Bold Italic'
        cust_select_LC := '𝒂,𝒃,𝒄,𝒅,𝒆,𝒇,𝒈,𝒉,𝒊,𝒋,𝒌,𝒍,𝒎,𝒏,𝒐,𝒑,𝒒,𝒓,𝒔,𝒕,𝒖,𝒗,𝒘,𝒙,𝒚,𝒛'
        cust_select_UC := '𝑨,𝑩,𝑪,𝑫,𝑬,𝑭,𝑮,𝑯,𝑰,𝑱,𝑲,𝑳,𝑴,𝑵,𝑶,𝑷,𝑸,𝑹,𝑺,𝑻,𝑼,𝑽,𝑾,𝑿,𝒀,𝒁'
        cust_select_DG := '𝟎,𝟏,𝟐,𝟑,𝟒,𝟓,𝟔,𝟕,𝟖,𝟗'
        cust_select_DG
    else if font_select == 'Fraktur'
        cust_select_LC := '𝔞,𝔟,𝔠,𝔡,𝔢,𝔣,𝔤,𝔥,𝔦,𝔧,𝔨,𝔩,𝔪,𝔫,𝔬,𝔭,𝔮,𝔯,𝔰,𝔱,𝔲,𝔳,𝔴,𝔵,𝔶,𝔷'
        cust_select_UC := '𝔄,𝔅,ℭ,𝔇,𝔈,𝔉,𝔊,ℌ,ℑ,𝔍,𝔎,𝔏,𝔐,𝔑,𝔒,𝔓,𝔔,ℜ,𝔖,𝔗,𝔘,𝔙,𝔚,𝔛,𝔜,ℨ'
        cust_select_DG := '𝟢,𝟣,𝟤,𝟥,𝟦,𝟧,𝟨,𝟩,𝟪,𝟫'
        cust_select_DG
    else if font_select == 'Fraktur Bold'
        cust_select_LC := '𝖆,𝖇,𝖈,𝖉,𝖊,𝖋,𝖌,𝖍,𝖎,𝖏,𝖐,𝖑,𝖒,𝖓,𝖔,𝖕,𝖖,𝖗,𝖘,𝖙,𝖚,𝖛,𝖜,𝖝,𝖞,𝖟'
        cust_select_UC := '𝕬,𝕭,𝕮,𝕯,𝕰,𝕱,𝕲,𝕳,𝕴,𝕵,𝕶,𝕷,𝕸,𝕹,𝕺,𝕻,𝕼,𝕽,𝕾,𝕿,𝖀,𝖁,𝖂,𝖃,𝖄,𝖅'
        cust_select_DG := '𝟎,𝟏,𝟐,𝟑,𝟒,𝟓,𝟔,𝟕,𝟖,𝟗'
        cust_select_DG
    else if font_select == 'Script'
        cust_select_LC := '𝒶,𝒷,𝒸,𝒹,ℯ,𝒻,ℊ,𝒽,𝒾,𝒿,𝓀,𝓁,𝓂,𝓃,ℴ,𝓅,𝓆,𝓇,𝓈,𝓉,𝓊,𝓋,𝓌,𝓍,𝓎,𝓏'
        cust_select_UC := '𝒜,ℬ,𝒞,𝒟,ℰ,ℱ,𝒢,ℋ,ℐ,𝒥,𝒦,ℒ,ℳ,𝒩,𝒪,𝒫,𝒬,ℛ,𝒮,𝒯,𝒰,𝒱,𝒲,𝒳,𝒴,𝒵'
        cust_select_DG := '𝟢,𝟣,𝟤,𝟥,𝟦,𝟧,𝟨,𝟩,𝟪,𝟫'
        cust_select_DG
    else if font_select == 'Script Bold'
        cust_select_LC := '𝓪,𝓫,𝓬,𝓭,𝓮,𝓯,𝓰,𝓱,𝓲,𝓳,𝓴,𝓵,𝓶,𝓷,𝓸,𝓹,𝓺,𝓻,𝓼,𝓽,𝓾,𝓿,𝔀,𝔁,𝔂,𝔃'
        cust_select_UC := '𝓐,𝓑,𝓒,𝓓,𝓔,𝓕,𝓖,𝓗,𝓘,𝓙,𝓚,𝓛,𝓜,𝓝,𝓞,𝓟,𝓠,𝓡,𝓢,𝓣,𝓤,𝓥,𝓦,𝓧,𝓨,𝓩'
        cust_select_DG := '𝟎,𝟏,𝟐,𝟑,𝟒,𝟓,𝟔,𝟕,𝟖,𝟗'
        cust_select_DG
    else if font_select == 'Double-Struck'
        cust_select_LC := '𝕒,𝕓,𝕔,𝕕,𝕖,𝕗,𝕘,𝕙,𝕚,𝕛,𝕜,𝕝,𝕞,𝕟,𝕠,𝕡,𝕢,𝕣,𝕤,𝕥,𝕦,𝕧,𝕨,𝕩,𝕪,𝕫'
        cust_select_UC := '𝔸,𝔹,ℂ,𝔻,𝔼,𝔽,𝔾,ℍ,𝕀,𝕁,𝕂,𝕃,𝕄,ℕ,𝕆,ℙ,ℚ,ℝ,𝕊,𝕋,𝕌,𝕍,𝕎,𝕏,𝕐,ℤ'
        cust_select_DG := '𝟘,𝟙,𝟚,𝟛,𝟜,𝟝,𝟞,𝟟,𝟠,𝟡'
        cust_select_DG
    else if font_select == 'Monospace'
        cust_select_LC := '𝚊,𝚋,𝚌,𝚍,𝚎,𝚏,𝚐,𝚑,𝚒,𝚓,𝚔,𝚕,𝚖,𝚗,𝚘,𝚙,𝚚,𝚛,𝚜,𝚝,𝚞,𝚟,𝚠,𝚡,𝚢,𝚣'
        cust_select_UC := '𝙰,𝙱,𝙲,𝙳,𝙴,𝙵,𝙶,𝙷,𝙸,𝙹,𝙺,𝙻,𝙼,𝙽,𝙾,𝙿,𝚀,𝚁,𝚂,𝚃,𝚄,𝚅,𝚆,𝚇,𝚈,𝚉'
        cust_select_DG := '𝟶,𝟷,𝟸,𝟹,𝟺,𝟻,𝟼,𝟽,𝟾,𝟿'
        cust_select_DG
    else if font_select == 'Regional Indicator'
        cust_select_LC := '🇦,🇧,🇨,🇩,🇪,🇫,🇬,🇭,🇮,🇯,🇰,🇱,🇲,🇳,🇴,🇵,🇶,🇷,🇸,🇹,🇺,🇻,🇼,🇽,🇾,🇿'
        cust_select_UC := '🇦,🇧,🇨,🇩,🇪,🇫,🇬,🇭,🇮,🇯,🇰,🇱,🇲,🇳,🇴,🇵,🇶,🇷,🇸,🇹,🇺,🇻,🇼,🇽,🇾,🇿'
        cust_select_DG := '𝟶,𝟷,𝟸,𝟹,𝟺,𝟻,𝟼,𝟽,𝟾,𝟿'
        cust_select_DG
    else if font_select == 'Full Width'
        cust_select_LC := 'ａ,ｂ,ｃ,ｄ,ｅ,ｆ,ｇ,ｈ,ｉ,ｊ,ｋ,ｌ,ｍ,ｎ,ｏ,ｐ,ｑ,ｒ,ｓ,ｔ,ｕ,ｖ,ｗ,ｘ,ｙ,ｚ'
        cust_select_UC := 'Ａ,Ｂ,Ｃ,Ｄ,Ｅ,Ｆ,Ｇ,Ｈ,Ｉ,Ｊ,Ｋ,Ｌ,Ｍ,Ｎ,Ｏ,Ｐ,Ｑ,Ｒ,Ｓ,Ｔ,Ｕ,Ｖ,Ｗ,Ｘ,Ｙ,Ｚ'
        cust_select_DG := '０,１,２,３,４,５,６,７,８,９'
        cust_select_DG
    else if font_select == 'Circled'
        cust_select_LC := '🅐,🅑,🅒,🅓,🅔,🅕,🅖,🅗,🅘,🅙,🅚,🅛,🅜,🅝,🅞,🅟,🅠,🅡,🅢,🅣,🅤,🅥,🅦,🅧,🅨,🅩'
        cust_select_UC := '🅐,🅑,🅒,🅓,🅔,🅕,🅖,🅗,🅘,🅙,🅚,🅛,🅜,🅝,🅞,🅟,🅠,🅡,🅢,🅣,🅤,🅥,🅦,🅧,🅨,🅩'
        cust_select_DG := '⓿,❶,❷,❸,❹,❺,❻,❼,❽,❾'
        cust_select_DG
    else
        cust_select_LC := '𝚊,𝚋,𝚌,𝚍,𝚎,𝚏,𝚐,𝚑,𝚒,𝚓,𝚔,𝚕,𝚖,𝚗,𝚘,𝚙,𝚚,𝚛,𝚜,𝚝,𝚞,𝚟,𝚠,𝚡,𝚢,𝚣'
        cust_select_UC := '𝙰,𝙱,𝙲,𝙳,𝙴,𝙵,𝙶,𝙷,𝙸,𝙹,𝙺,𝙻,𝙼,𝙽,𝙾,𝙿,𝚀,𝚁,𝚂,𝚃,𝚄,𝚅,𝚆,𝚇,𝚈,𝚉'
        cust_select_DG := '𝟶,𝟷,𝟸,𝟹,𝟺,𝟻,𝟼,𝟽,𝟾,𝟿'
        cust_select_DG
    [cust_select_LC, cust_select_UC, cust_select_DG]

uni_replace_CHAR(_str, _fontType) =>
    [cust_select_LC, cust_select_UC, cust_select_DG] = fontType(_fontType)
    Cust_font_select_LC = str.split(cust_select_LC, ',')
    Cust_font_select_UC = str.split(cust_select_UC, ',')
    _custom_font_LC = Cust_font_select_LC
    _custom_font_UC = Cust_font_select_UC
    _new_str = _str
    for _i = 0 to array.size(Pine_font_std_LC) - 1 by 1
        _new_str := str.replace_all(_new_str, array.get(Pine_font_std_LC, _i), array.get(_custom_font_LC, _i))

        _new_str := str.replace_all(_new_str, array.get(Pine_font_std_UC, _i), array.get(_custom_font_UC, _i))
        _new_str
    _new_str

uni_replace_DG(_str, _fontType) =>
    [cust_select_LC, cust_select_UC, cust_select_DG] = fontType(_fontType)
    Cust_font_select_DG = str.split(cust_select_DG, ',')
    _custom_font = Cust_font_select_DG
    _new_str = _str
    for _i = 0 to array.size(Pine_font_std_DG) - 1 by 1
        _new_str := str.replace_all(_new_str, array.get(Pine_font_std_DG, _i), array.get(_custom_font, _i))
        _new_str
    _new_str

fontTypeSelector(_str, _fontType) =>
    _str2 = uni_replace_DG(_str, _fontType)
    _str3 = uni_replace_CHAR(_str2, _fontType)
    _str3

test_string = inp_str
test_string2 = inp_str2

txtLine0 = fontTypeSelector(inp_str, fontType1)
txtLine1 = fontTypeSelector(inp_str2, fontType2)


priceA                 = input.price(100, inline="PointA", confirm=true)
timeA                  = input.time(timestamp("2022-02-20"), inline="PointA", confirm=true)

priceB                 = input.price(100, inline="PointB", confirm=true)
timeB                  = input.time(timestamp("2022-02-20"), inline="PointB", confirm=true)


sloping_hori_vert      = line_slope == "Horizontal" ? priceA :  line_slope == "Sloped" ? priceB : priceA 
hori_z                 = line_slope == "Vertical" ? timeA : timeB
hori_zb                = line_slope == "Vertical" ? extend.both : Line_ste
hori_zb1                = line_slope == "Vertical" ? false : line_slope == "Horizontal" ? false : show_r_label

[yo,yc1]                     = request.security(syminfo.tickerid, '12M', expression=[open, close[1]], lookahead=barmerge.lookahead_on)
new_day                      = yc1[1]  != yc1

plotchar(new_day ? yo : na, title='Close', char='☉', location=location.absolute, color=AllColor2, offset=0, size=size.tiny)

if barstate.islast
    secondsPerBar=time[0]-time[1]    

    zone_01    = zone_on_off ? line.new(timeA,priceA+spacingz,hori_z,sloping_hori_vert+spacingz, xloc = xloc.bar_time,color=AllColor3,style=Line_stz, extend = hori_zb):na
    Main_line  = line.new(timeA,priceA,hori_z,sloping_hori_vert, xloc = xloc.bar_time,color=AllColor,style=Line_st, extend = hori_zb)
    zone_02    = zone_on_off ? line.new(timeA,priceA-spacingz,hori_z,sloping_hori_vert-spacingz, xloc = xloc.bar_time,color=AllColor3,style=Line_stz, extend = hori_zb):na

    LL = show_l_label ? label.new(timeA,priceA, txtLine0, xloc = xloc.bar_time, yloc=yloc.price, size=TextSize, style=label.style_label_right,textcolor=text_c,color=label_b_color):na
    RL = hori_zb1 ? label.new(timeB,priceB, txtLine1, xloc = xloc.bar_time, yloc=yloc.price, size=TextSize, style=label.style_label_left,textcolor=text_c,color=label_b_color):na