//@version=5
indicator(title="Chronos bear of all time", shorttitle="Time", overlay=true)

timetostring(timetoclose) =>
    d_ = math.floor(timetoclose / 86400)
    h_ = math.floor((timetoclose - d_ * 86400) / 3600)
    m_ = math.floor((timetoclose - d_ * 86400 - h_ * 3600) / 60)
    s_ = math.floor(timetoclose - d_ * 86400 - h_ * 3600 - m_ * 60)
    ret = d_ > 0 ? str.tostring(d_) + 'D ' : ''
    ret += (h_ > 0 ? str.tostring(h_) + 'H ' : '')
    ret += (m_ > 0 ? str.tostring(m_) + 'm ' : '')
    if d_ == 0
        ret += (s_ > 0 ? str.tostring(s_) + 's ' : '')
        ret
    ret

get_vol(vol) =>
    rvol = 0.
    rmul = ''
    if vol >= 1000000000
        rvol := vol / 1000000000
        rmul := 'B'
        rmul
    else if vol >= 1000000
        rvol := vol / 1000000
        rmul := 'M'
        rmul
    else if vol >= 1000
        rvol := vol / 1000
        rmul := 'K'
        rmul
    else
        rvol := vol
        rmul := ''
        rmul
    [rvol, rmul]

Timeframe = '60'
Timeframe1 = '240'
Timeframe2 = 'D'
Timeframe3 = 'W'
Timeframe4 = 'M'

numofcandles = 8
backcolor    = color.white
candlewidth  = 30
startbar     = 15
effect3d     = false

bool newbar = ta.change(time(Timeframe)) != 0
var candles = array.new_float(numofcandles * 5, na)  // last 3 candles, ohlc
if newbar
    if numofcandles > 1
        for x = numofcandles * 5 - 1 to 5 by 1
            array.set(candles, x, array.get(candles, x - 5))
    array.set(candles, 0, open)
    array.set(candles, 1, high)
    array.set(candles, 2, low)
    array.set(candles, 3, close)
    array.set(candles, 4, volume)
else
    array.set(candles, 1, math.max(array.get(candles, 1), high))
    array.set(candles, 2, math.min(array.get(candles, 2), low))
    array.set(candles, 3, close)
    array.set(candles, 4, array.get(candles, 4) + volume)

// time to close of htf
timeclose  = (request.security(syminfo.tickerid, Timeframe, time_close) - timenow) / 1000
timeclose1 = (request.security(syminfo.tickerid, Timeframe1, time_close) - timenow) / 1000
timeclose2 = (request.security(syminfo.tickerid, Timeframe2, time_close) - timenow) / 1000
timeclose3 = (request.security(syminfo.tickerid, Timeframe3, time_close) - timenow) / 1000
timeclose4 = (request.security(syminfo.tickerid, Timeframe4, time_close) - timenow) / 1000

head_text_color2 = input(defval=color.rgb(8, 8, 8), title='Timeframe Text Color')
text_color1      = input(defval=color.rgb(249, 250, 252), title='Time Text Color')
border_color1    = input(defval=color.rgb(255, 255, 255, 100), title='Border Color')
frame_color1     = input(defval=color.rgb(255, 255, 255, 100), title='Frame Color')
bgcolor1         = input(defval=color.rgb(255, 255, 255, 100), title='Time Background Color')
head_bgcolor1    = input(defval=#bbd9fb, title='Timeframe Background Color')

var table panel = table.new(position.top_right, 4, 5, border_color=border_color1, border_width=1, frame_color=frame_color1, frame_width=1)

table.cell(panel, 0, 0, "H1", bgcolor=head_bgcolor1, text_color=head_text_color2, text_size=size.small)
table.cell(panel, 1, 0, timetostring(timeclose), bgcolor=bgcolor1, text_color=text_color1, text_size=size.small)

table.cell(panel, 0, 1, "H4", bgcolor=head_bgcolor1, text_color=head_text_color2, text_size=size.small)
table.cell(panel, 1, 1, timetostring(timeclose1), bgcolor=bgcolor1, text_color=text_color1, text_size=size.small)

table.cell(panel, 0, 2, "D", bgcolor=head_bgcolor1, text_color=head_text_color2, text_size=size.small)
table.cell(panel, 1, 2, timetostring(timeclose2), bgcolor=bgcolor1, text_color=text_color1, text_size=size.small)

table.cell(panel, 0, 3, "W", bgcolor=head_bgcolor1, text_color=head_text_color2, text_size=size.small)
table.cell(panel, 1, 3, timetostring(timeclose3), bgcolor=bgcolor1, text_color=text_color1, text_size=size.small)

table.cell(panel, 0, 4, "M", bgcolor=head_bgcolor1, text_color=head_text_color2, text_size=size.small)
table.cell(panel, 1, 4, timetostring(timeclose4), bgcolor=bgcolor1, text_color=text_color1, text_size=size.small)