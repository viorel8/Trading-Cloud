// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Jo

//@version=5
indicator("Multi Exchange vol M30", shorttitle = "Multi Exchange vol max", overlay = true, max_lines_count = 500, max_boxes_count = 500, max_bars_back = 5000)

startTime            = input.time (0,"Entry Point",   confirm  = true,   inline = "21",                         group ="Dynamic Inputs")
endTime              = input.time (0,"Entry Point",   confirm  = true,   inline = "21",                         group ="Dynamic Inputs")

t1                   = input.symbol(title="Ticker 01",  defval = "BINANCE:BTCUSDTPERP")
t2                   = input.symbol(title="Ticker 02",  defval = "BINANCE:BTCUSDTPERP")
t3                   = input.symbol(title="Ticker 03",  defval = "BINANCE:BTCPERP")
t4                   = input.symbol(title="Ticker 04",  defval = "BYBIT:BTCUSDT.P")
t5                   = input.symbol(title="Ticker 05",  defval = "BYBIT:BTCUSDT")
t6                   = input.symbol(title="Ticker 06",  defval = "BYBIT:BTCUSD")

[t1_volume_]         = request.security(t1, timeframe.period, expression=[volume])
[t2_volume_]         = request.security(t2, timeframe.period, expression=[volume])
[t3_volume_]         = request.security(t3, timeframe.period, expression=[volume])
[t4_volume_]         = request.security(t4, timeframe.period, expression=[volume])
[t5_volume_]         = request.security(t5, timeframe.period, expression=[volume])
[t6_volume_]         = request.security(t6, timeframe.period, expression=[volume])

aggr = t1_volume_+t2_volume_+t3_volume_+t4_volume_+t5_volume_+t6_volume_

inp_text_size        = input.string("Tiny", options = ["Tiny", "Small"], title = "Label Text Size", group = "Element On/Off")
TextSize             = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : na
inp_line_style_poc   = input.string("Solid", options = ["Dotted", "Solid", "Dashed"], title = "Poc Line Style", group = "Element On/Off")
Line_st_poc          = inp_line_style_poc == "Solid" ? line.style_solid : inp_line_style_poc == "Dotted" ? line.style_dotted : inp_line_style_poc == "Dashed" ? line.style_dashed : na
inp_line_style_OB    = input.string("Dotted", options = ["Dotted", "Solid", "Dashed"], title = "Poc Line Style", group = "Element On/Off")
Line_st_OB           = inp_line_style_OB == "Solid" ? line.style_solid : inp_line_style_OB == "Dotted" ? line.style_dotted : inp_line_style_OB == "Dashed" ? line.style_dashed : na
inp_line_style_TR    = input.string("Dotted", options = ["Dotted", "Solid", "Dashed"], title = "Poc Line Style", group = "Element On/Off")
Line_st_TR           = inp_line_style_TR  == "Solid" ? line.style_solid : inp_line_style_TR  == "Dotted" ? line.style_dotted : inp_line_style_TR  == "Dashed" ? line.style_dashed : na

Alert_zone_spacing   = input.int(11,  'Alert Zone width',  minval=1, maxval=130, group = "Element On/Off")
Zone_ext             = input.int(1,  'Extend Volume Box Right',  minval=0, maxval=4000, group = "Element On/Off")
wick_width           = input.int(1,  'Volume Candle Wick thickness',  minval=1, maxval=30, group = "Element On/Off")
body_width           = input.int(2,  'Volume Candle Body thickness',  minval=1, maxval=30, group = "Element On/Off")

show_mpoc            = input.bool(true, 'Show First POC (POC of the First Highest Volume Candle)', group = "Element On/Off")
show_labels          = input.bool(true, 'Show labels', group = "Element On/Off")
show_labels_timeline = input.bool(true, 'Show Time devider Labels', group = "Element On/Off")
hide_lines           = input.bool(true, 'Vertical devider lines', group = "Element On/Off")
hide_tl_top          = input.bool(false, 'Show top Trendline', group = "Element On/Off")
hide_tl_bot          = input.bool(false, 'Show bottom Trendline', group = "Element On/Off")
hide_aggr            = input.bool(true, 'Show aggrigated vol selection below', group = "Element On/Off")
hide_aggr_lab        = input.bool(true, 'Show aggrigated vol selection below labels', group = "Element On/Off")

show_breaker         = input.bool(true, 'Show OB', group = "Element On/Off")
show_breakermd       = input.bool(true, 'Show OB 50% Line', group = "Element On/Off")
breaker_back         = input.int (6,   'OB/Breaker Candles back to include',  minval=1, maxval=130, group = "Element On/Off")
trendline_width      = input.int (1,   'Trendline Width',  minval=1, maxval=130, group = "Element On/Off")
vol_up_down          = input.int (600,   'Volume below up/down',  minval=1, maxval=1030, group = "Element On/Off")

breaker_c            = input.color(color.new(#eceef1, 100) ,'Breaker/OB Border Color', group = "Color")
ob_mid_c             = input.color(color.new(#0f0f0f, 0) ,'Breaker/OB Midline Color', group = "Color")
breaker_BG_c         = input.color(color.new(#0163f5, 75) ,'breaker BG Color', group = "Color")
Text_c               = input.color(color.new(#0c0c0c, 0) ,'Label Text Color', group = "Color")
trendln_c            = input.color(color.new(#0c0c0c, 90) ,'Trendline Color', group = "Color")
candle_c             = input.color(color.new(#0066cc, 0)  ,'Highest Volume Candle Color', group = "Color")
mainpoc_c            = input.color(color.new(#0d0d0e, 0) ,'Poc Line Color', group = "Color")
time_line_col        = input.color(color.new(#afcff7, 100) ,'Time line color', group = "Color")
alert_line_col       = input.color(color.new(#eceff1, 100) ,'Alert zone line color', group = "Color")
alert_zone_bg        = input.color(color.new(#070707, 96) ,'Alert zone BG color', group = "Color")
colorup              = input.color(defval = color.new(#076a88, 70), title = "Colors vol bars bottom", group = "Color")
colordn              = input.color(defval = color.new(#17244e, 70), title = "Colors vol bars bottom", group = "Color")

//Current timeframe in minutes
currentTimeframe = timeframe.in_seconds(timeframe.period) / 60

//Dynamic timeframe
dynTf = currentTimeframe <= 30 ? "1" : currentTimeframe > 30 and currentTimeframe <= 180 ? "5" :
 currentTimeframe > 180 and currentTimeframe <= 480 ? "15" : currentTimeframe > 480 and currentTimeframe <= 1440 ? "60" :
  currentTimeframe > 1440 and currentTimeframe <= 4320 ? "120" : currentTimeframe > 4320 ? "240" : na

ltfStats() =>

    vol = na(volume) == false ? volume : 0

    [close, vol]

[ltfSrc, ltfVolume]
 = request.security_lower_tf(syminfo.tickerid, dynTf, ltfStats())

tpoArrSize              = array.size(ltfSrc)
maxVolume               = array.max(ltfVolume,0)
indexOfMaxVolume        = array.indexof(ltfVolume, maxVolume)
maxVol                  = array.size(ltfSrc) > 0 ? array.get(ltfSrc, indexOfMaxVolume) : na
bartime                 = int(ta.change(time))
bars_start              = (math.floor((timenow - startTime) / bartime)) 
bars_end                = (math.floor((timenow - endTime) / bartime)) 






//HTF Vol				   
arr_t1 = array.new_float(0)
arr_t2 = array.new_float(0)
arr_t3 = array.new_float(0)
arr_t4 = array.new_float(0)
arr_t5 = array.new_float(0)
arr_t6 = array.new_float(0)

index = nz(bars_start,1) 

for i = index to bars_end by 1 
    array.push(arr_t1, (t1_volume_[i]))
    array.push(arr_t2, (t2_volume_[i]))
    array.push(arr_t3, (t3_volume_[i]))
    array.push(arr_t4, (t4_volume_[i]))
    array.push(arr_t5, (t5_volume_[i]))
    array.push(arr_t6, (t6_volume_[i]))

t1_highest                        = array.max(arr_t1, 0)
t2_highest                        = array.max(arr_t2, 0)
t3_highest                        = array.max(arr_t3, 0)
t4_highest                        = array.max(arr_t4, 0)
t5_highest                        = array.max(arr_t5, 0)
t6_highest                        = array.max(arr_t6, 0)

t1_index                          = array.lastindexof(arr_t1, t1_highest) + index -1
t2_index                          = array.lastindexof(arr_t2, t2_highest) + index -1
t3_index                          = array.lastindexof(arr_t3, t3_highest) + index -1
t4_index                          = array.lastindexof(arr_t4, t4_highest) + index -1
t5_index                          = array.lastindexof(arr_t5, t5_highest) + index -1
t6_index                          = array.lastindexof(arr_t6, t6_highest) + index -1

same_index     = t2_index == t1_index and t3_index == t1_index and t4_index == t1_index and t5_index == t1_index and t6_index == t1_index ? false : true
not_same_index = t2_index == t1_index and t3_index == t1_index and t4_index == t1_index and t5_index == t1_index and t6_index == t1_index ? true : false

//vol below
var float bottomMargin = 8.0 / 82.0
var times = array.new_float(0)
array.unshift(times, time)

visibleBars = 0
if time == chart.right_visible_bar_time
    visibleBars := array.indexof(times, chart.left_visible_bar_time) + 1

lowest = ta.lowest(visibleBars > 0 ? visibleBars : 1)-vol_up_down
bottomline =  (lowest - (ta.highest(visibleBars > 0 ? visibleBars : 1) - lowest) * (bottomMargin))
maxVola = ta.highest(aggr, visibleBars > 0 ? visibleBars : 1)


if visibleBars > bars_end and bars_start and hide_aggr
    var volLines = array.new_line(0)
    for x = 0 to (array.size(volLines) > 0 ? array.size(volLines) - 1 : na)
        line.delete(array.pop(volLines))
    maxVolLevel = (lowest - bottomline) * 5
    
    for x = bars_start to bars_end
        array.push(volLines, 
                   line.new(x1 = bar_index - x, y1 = bottomline, x2 = bar_index - x, y2 = bottomline + aggr[x] * maxVolLevel / maxVola, 
                      width = 1, 
                      color = close[x] >= open[x] ? colorup : colordn))
                   
                       

                       
plotarrow(aggr, colorup=color.new(chart.fg_color, 100), colordown=color.new(chart.fg_color, 100), maxheight = 0)
ff = hide_aggr_lab ? label.new(bar_index[t1_index+1],bottomline, text= 'Aggrigated: \n' + str.tostring(t1+'\n'+t2+ t3+'\n'+t4+'\n'+t6),style=label.style_label_up,size=size.tiny,color=color.new(color.green,100)):na
label.delete(ff[1])













//t1 Volume Candle
t1_candle_body = line.new(bar_index[t1_index+1], open[t1_index+1], bar_index[t1_index+1], close[t1_index+1], color=candle_c, width=body_width)
line.delete(t1_candle_body[1])
t1_candle_wick = line.new(bar_index[t1_index+1], high[t1_index+1], bar_index[t1_index+1], low[t1_index+1], color=candle_c, width=wick_width)
line.delete(t1_candle_wick[1])
//t2 Volume Candle
t2_candle_body = line.new(bar_index[t2_index+1], open[t2_index+1], bar_index[t2_index+1], close[t2_index+1], color=candle_c, width=body_width)
line.delete(t2_candle_body[1])
t2_candle_wick = line.new(bar_index[t2_index+1], high[t2_index+1], bar_index[t2_index+1], low[t2_index+1], color=candle_c, width=wick_width)
line.delete(t2_candle_wick[1])
//t3 Volume Candle
t3_candle_body = line.new(bar_index[t3_index+1], open[t3_index+1], bar_index[t3_index+1], close[t3_index+1], color=candle_c, width=body_width)
line.delete(t3_candle_body[1])
t3_candle_wick = line.new(bar_index[t3_index+1], high[t3_index+1], bar_index[t3_index+1], low[t3_index+1], color=candle_c, width=wick_width)
line.delete(t3_candle_wick[1])
//t4 Volume Candle
t4_candle_body = line.new(bar_index[t4_index+1], open[t4_index+1], bar_index[t4_index+1], close[t4_index+1], color=candle_c, width=body_width)
line.delete(t4_candle_body[1])
t4_candle_wick = line.new(bar_index[t4_index+1], high[t4_index+1], bar_index[t4_index+1], low[t4_index+1], color=candle_c, width=wick_width)
line.delete(t4_candle_wick[1])
//t5 Volume Candle
t5_candle_body = line.new(bar_index[t5_index+1], open[t5_index+1], bar_index[t5_index+1], close[t5_index+1], color=candle_c, width=body_width)
line.delete(t5_candle_body[1])
t5_candle_wick = line.new(bar_index[t5_index+1], high[t5_index+1], bar_index[t5_index+1], low[t5_index+1], color=candle_c, width=wick_width)
line.delete(t5_candle_wick[1])
//t6 Volume Candle
t6_candle_body = line.new(bar_index[t6_index+1], open[t6_index+1], bar_index[t6_index+1], close[t6_index+1], color=candle_c, width=body_width)
line.delete(t6_candle_body[1])
t6_candle_wick = line.new(bar_index[t6_index+1], high[t6_index+1], bar_index[t6_index+1], low[t6_index+1], color=candle_c, width=wick_width)
line.delete(t6_candle_wick[1])

col_on_all  = t2_index == t1_index and t3_index == t1_index and t4_index == t1_index and t5_index == t1_index and t6_index == t1_index ? candle_c : mainpoc_c

//t1 Poc
Poc_line_t1  = show_mpoc ? line.new(bar_index[t1_index+1], maxVol[t1_index+1], bar_index[t1_index+1]+3, maxVol[t1_index+1], color=col_on_all , width=1,style=Line_st_poc):na
line.delete(Poc_line_t1[1])
//t2 Poc
Poc_line_t2  = show_mpoc and same_index ? line.new(bar_index[t2_index+1], maxVol[t2_index+1], bar_index+20, maxVol[t2_index+1], color=mainpoc_c , width=1,style=Line_st_poc):na
line.delete(Poc_line_t2[1])
//t3 Poc
Poc_line_t3  = show_mpoc and same_index ? line.new(bar_index[t3_index+1], maxVol[t3_index+1], bar_index+20, maxVol[t3_index+1], color=mainpoc_c , width=1,style=Line_st_poc):na
line.delete(Poc_line_t3[1])
//t4 Poc
Poc_line_t4  = show_mpoc and same_index ? line.new(bar_index[t4_index+1], maxVol[t4_index+1], bar_index+20, maxVol[t4_index+1], color=mainpoc_c , width=1,style=Line_st_poc):na
line.delete(Poc_line_t4[1])
//t5 Poc
Poc_line_t5  = show_mpoc and same_index ? line.new(bar_index[t5_index+1], maxVol[t5_index+1], bar_index+20, maxVol[t5_index+1], color=mainpoc_c , width=1,style=Line_st_poc):na
line.delete(Poc_line_t5[1])
//t6 Poc
Poc_line_t6  = show_mpoc and same_index ? line.new(bar_index[t6_index+1], maxVol[t6_index+1], bar_index+20, maxVol[t6_index+1], color=mainpoc_c , width=1,style=Line_st_poc):na
line.delete(Poc_line_t6[1])

Poc_label_t1 = show_labels and same_index ? label.new(bar_index+23, maxVol[t1_index+1], text="1", color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
label.delete(Poc_label_t1[1])
Poc_label_t2 = show_labels and same_index? label.new(bar_index+23, maxVol[t2_index+1], text="  2", color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
label.delete(Poc_label_t2[1])
Poc_label_t3 = show_labels and same_index? label.new(bar_index+23, maxVol[t3_index+1], text="    3", color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
label.delete(Poc_label_t3[1])
Poc_label_t4 = show_labels and same_index? label.new(bar_index+23, maxVol[t4_index+1], text="      4", color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
label.delete(Poc_label_t4[1])
Poc_label_t5 = show_labels and same_index? label.new(bar_index+23, maxVol[t5_index+1], text="        5", color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
label.delete(Poc_label_t5[1])
Poc_label_t6 = show_labels and same_index? label.new(bar_index+23, maxVol[t6_index+1], text="          6", color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
label.delete(Poc_label_t6[1])


Poc_label_max = show_labels and not_same_index ? label.new(bar_index, maxVol[t6_index+1], text="                - " + str.tostring(maxVol[t6_index+1]), color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
label.delete(Poc_label_max[1])

alert_zone_top = show_mpoc and not_same_index ? line.new(bar_index[t2_index+1], maxVol[t2_index+1]+Alert_zone_spacing, bar_index+20, maxVol[t2_index+1]+Alert_zone_spacing, color=alert_line_col, width=1,style=Line_st_poc):na
line.delete(alert_zone_top[1])
alert_zone_bottom = show_mpoc and not_same_index ? line.new(bar_index[t2_index+1], maxVol[t2_index+1]-Alert_zone_spacing, bar_index+20, maxVol[t2_index+1]-Alert_zone_spacing, color=alert_line_col, width=1,style=Line_st_poc):na
line.delete(alert_zone_bottom[1])
linefill_alert_zone = linefill.new(alert_zone_top, alert_zone_bottom, color=alert_zone_bg)




top_anchored_trend_line = show_mpoc and not_same_index and hide_tl_top and open[t1_index+1] < close[t1_index+1] ? line.new(bar_index[t2_index+1], high[t2_index+1], bar_index, high , color=trendln_c, width=trendline_width,style=Line_st_TR):na
line.delete(top_anchored_trend_line[1])
bot_anchored_trend_line = show_mpoc and not_same_index and hide_tl_bot and open[t1_index+1] > close[t1_index+1] ? line.new(bar_index[t2_index+1], low[t2_index+1], bar_index, low, color=trendln_c, width=trendline_width,style=Line_st_TR):na
line.delete(bot_anchored_trend_line[1])

// test = label.new(bar_index,close,text=str.tostring(dd))
// label.delete(test[1])

Breaker_high    = ta.highest(high, breaker_back)[t1_index+2]
Breaker_low     = ta.lowest(low, breaker_back)[t1_index+2]

ob_midline = show_breaker and not_same_index and show_breakermd ? line.new(bar_index[t1_index+1+breaker_back],(Breaker_high + Breaker_low)/2,bar_index[t1_index+1],(Breaker_high + Breaker_low)/2,color=ob_mid_c, style=Line_st_OB):na
line.delete(ob_midline[1])
ob_box = show_breaker and not_same_index ? box.new(bar_index[t1_index+1+breaker_back], Breaker_high, bar_index[t1_index+1], Breaker_low, border_color=breaker_c, border_width=1, bgcolor=breaker_BG_c):na
box.delete(ob_box[1])


label_ob_or_breaker = open[t1_index+1] > close[t1_index+1] and close > Breaker_high ? 'BREAKER' :  open[t1_index+1] > close[t1_index+1] and close < Breaker_low ? 'OB' : na
label_ob_or_breaker2 = open[t1_index+1] < close[t1_index+1] and close < Breaker_low ? 'BREAKER' :  open[t1_index+1] < close[t1_index+1] and close > Breaker_low ? 'OB' : na



ob_breaker_label = show_breaker and not_same_index ? label.new(bar_index[t1_index+1+(breaker_back/2)], Breaker_high, text=label_ob_or_breaker, color=color.new(color.black,100), style=label.style_label_down, textcolor=Text_c, size=TextSize):na
label.delete(ob_breaker_label[1])
ob_breaker_label2 = show_breaker and not_same_index ? label.new(bar_index[t1_index+1+(breaker_back/2)], Breaker_low, text=label_ob_or_breaker2, color=color.new(color.black,100), style=label.style_label_up, textcolor=Text_c, size=TextSize):na
label.delete(ob_breaker_label2[1])

condition_max_poc_crossed = ta.cross(close, maxVol[t2_index+1]-Alert_zone_spacing) or ta.cross(close, maxVol[t2_index+1]+Alert_zone_spacing) and t2_index == t1_index and t3_index == t1_index and t4_index == t1_index and t5_index == t1_index and t6_index == t1_index
alertcondition(condition_max_poc_crossed, title='Price crossed Time selected LTF POC | All Exchanges had max vol on the same bar', message='Price crossed Time selected LTF POC | All Exchanges had max vol on the same bar')



// test_condition = ta.cross(close, maxVol[t2_index+1]-Alert_zone_spacing) or ta.cross(close, maxVol[t2_index+1]+Alert_zone_spacing) and t2_index == t1_index and t3_index == t1_index and t4_index == t1_index and t5_index == t1_index and t6_index == t1_index ? true :false
// alert_test = test_condition ? label.new(bar_index, close, text="alert", color=color.new(color.blue,0), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
// label.delete(alert_test[1])



if barstate.ishistory
   
    startLine  = hide_lines ? line.new(bar_index[bars_start-1], close, bar_index[bars_start-1], open, extend = extend.both, color = time_line_col,style=line.style_dashed):na
    startLabel = hide_lines and show_labels_timeline ? label.new(bar_index[bars_start-1], low[t1_index+1], "",  style = label.style_label_up, color=color.new(color.black,100), textcolor = Text_c, size = TextSize,textalign=text.align_left):na
    endLine    = hide_lines ? line.new(bar_index[bars_end-1], close, bar_index[bars_end-1], open, extend = extend.both, color = time_line_col,style=line.style_dashed):na
    endLabel   = hide_lines and show_labels_timeline ? label.new(bar_index[bars_end-1], low[t1_index+1],"", style = label.style_label_up, color=color.new(color.black,100), textcolor = Text_c, size = TextSize):na
    line.delete(startLine[1])
    label.delete(startLabel[1])
    line.delete(endLine[1])
    label.delete(endLabel[1])