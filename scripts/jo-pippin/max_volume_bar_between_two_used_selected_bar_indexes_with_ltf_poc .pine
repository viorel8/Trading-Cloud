// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Jo

//@version=5
indicator("VOL - deviations", shorttitle = "VOL - deviations", overlay = true, max_lines_count = 500, max_boxes_count = 500, max_bars_back = 5000)


startTime   = input.time (0,"Entry Point",   confirm = true,   inline = "21",                         group ="Dynamic Inputs")
endTime     = input.time (0,"Entry Point",   confirm = true,   inline = "21",                         group ="Dynamic Inputs")
ticker_input_vol     = input.symbol(title="CUSTOM TICKER (Will only activate if the below is set to CUSTOM TICKER INPUT",  defval="BTCUSDT")

inp_ticker           = input.string("THE CURRENT TICKER", options = ["THE CURRENT TICKER", "AGG CURRENCY PAIRS","AGGR STOCKS","AGGR INDICES","AGGR FUTURES AGRICULTURAL","AGGR FUTURES ENERGY","AGGR FUTURES CURRENCY","AGGR FUTURES WORLD INDICES", "BTC", "ETH", "BTC + ETH","GOLD", "CUSTOM TICKER INPUT"], 
                       title = "Volume Source", group = "Element On/Off")

ticker_input         = inp_ticker == "THE CURRENT TICKER" ? syminfo.tickerid :
                       inp_ticker == "BTC" ? "BINANCE:BTCPERP+BTCUSDT" :
                       inp_ticker == "ETH" ? "BINANCE:ETHPERP+ETHUSDT" :
                       inp_ticker == "BTC + ETH" ? "ETHUSDT+BTCUSDT" :
                       inp_ticker == "GOLD" ? "XAUUSD" :
                       inp_ticker == "AGGR STOCKS" ? "AMZN+AAPL+NVDA+TSLA+NFLX+F" :
                       inp_ticker == "AGGR INDICES" ? "SPX+DAX" :
                       inp_ticker == "AGGR FUTURES AGRICULTURAL" ? "CC1!+DC1!+GF1!+HE1!+KC1!" :
                       inp_ticker == "AGGR FUTURES ENERGY" ? "CL1!+HO1!+NG1!+QG1!+QM1!" :
                       inp_ticker == "AGGR FUTURES CURRENCY" ? "6A1!+6B1!+6C1!+6E1!+6J1!" :
                       inp_ticker == "AGGR FUTURES METALS" ? "GC1!+HG1!+MGC1!+PA1!+PL1!" :
                       inp_ticker == "AGGR FUTURES WORLD INDICES" ? "EMD1!+ES1!" :
                       inp_ticker == "AGG CURRENCY PAIRS" ? "EURUSD+GBPUSD+AUDUSD+NZDUSD+USDCHF+USDCAD+EURGBP+GBPJPY+EURJPY+USDJPY" : 
                       inp_ticker == "CUSTOM TICKER INPUT" ? ticker_input_vol : na

[volume_]            = request.security(ticker_input, timeframe.period, expression=[volume])
choose_bars_back_t   = input.string("Time Points", options = ["Bars Back", "Time Points"], title = "Label Text Size", group = "Element On/Off")
Bars_back            = input.int(1000,  'Search for highest volume for (x) Bars Back',  minval=0, maxval=4980, group = "Element On/Off")
// Bars_forward         = input.int(2000,  'Search for highest volume for (x) Bars Back',  minval=0, maxval=4980, group = "Element On/Off")
inp_text_size        = input.string("Tiny", options = ["Tiny", "Small"], title = "Label Text Size", group = "Element On/Off")
TextSize             = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : na
inp_line_style       = input.string("Dotted", options = ["Dotted", "Solid", "Dashed"], title = "Cross Line Style", group = "Element On/Off")
Line_st              = inp_line_style == "Solid" ? line.style_solid : inp_line_style == "Dotted" ? line.style_dotted : inp_line_style == "Dashed" ? line.style_dashed : na
inp_line_style_poc   = input.string("Dashed", options = ["Dotted", "Solid", "Dashed"], title = "Poc Line Style", group = "Element On/Off")
Line_st_poc          = inp_line_style_poc == "Solid" ? line.style_solid : inp_line_style_poc == "Dotted" ? line.style_dotted : inp_line_style_poc == "Dashed" ? line.style_dashed : na
Zone_ext             = input.int(1,  'Extend Volume Box Right',  minval=0, maxval=4000, group = "Element On/Off")
ori_ext              = input.int(100,  'Deviation Origin Line Extention Length ',  minval=1, maxval=4000, group = "Element On/Off")
wick_width           = input.int(1,  'Volume Candle Wick thickness',  minval=1, maxval=30, group = "Element On/Off")
body_width           = input.int(4,  'Volume Candle Body thickness',  minval=1, maxval=30, group = "Element On/Off")
Percent_away         = input.float(0.4, 'Show deviations only when origin deviation is (x) % away from the Volume Box',step=0.1, minval=0.3, maxval=20, group = "Element On/Off")

show_mpoc            = input.bool(true, 'Show First POC (POC of the First Highest Volume Candle)', group = "Element On/Off")
show_second_mpoc     = input.bool(false, 'Show Second POC (POC of the Second Highest Volume Candle)', group = "Element On/Off")
show_labels          = input.bool(true, 'Show labels', group = "Element On/Off")
show_dev             = input.bool(false, 'Show deviations', group = "Element On/Off")
show_second_vol_c    = input.bool(false, 'Show second largest vol candle', group = "Element On/Off")
show_vol_c_labels    = input.bool(true, 'Show volume candle number Below High Vol Candles (1 being the greatest vol)', group = "Element On/Off")
show_labels_timeline = input.bool(true, 'Show Time devider Labels', group = "Element On/Off")

Text_c               = input.color(color.new(#afcff7, 30) ,'Label Text Color', group = "Color")
Rise_c               = input.color(color.new(#afcff7, 100),'Volume Box BG Color', group = "Color")
border_c             = input.color(color.new(#afcff7, 75) ,'Volume Box Border Color', group = "Color")
candle_c             = input.color(color.new(#afcff7, 0)  ,'Highest Volume Candle Color', group = "Color")
second_candle_c      = input.color(color.new(#afcff7, 0)  ,'Second Highest Volume Candle Color', group = "Color")
dev_origon           = input.color(color.new(#afd0f7, 60) ,'Origin Deviation Line Color', group = "Color")
dev_c                = input.color(color.new(#afcff7, 100) ,'First Deviation Box BG Color', group = "Color")
dev_c2               = input.color(color.new(#afcff7, 100),'Second Deviation Box BG Color', group = "Color")
dev_c2_bor           = input.color(color.new(#afcff7, 78) ,'Deviation Box border Color', group = "Color")
mainpoc_c            = input.color(color.new(#afcff7, 60) ,'Poc Line Color', group = "Color")
time_line_col        = input.color(color.new(#afcff7, 60) ,'Time line color', group = "Color")

//Current timeframe in minutes
currentTimeframe = timeframe.in_seconds(timeframe.period) / 60

//Dynamic timeframe
dynTf = currentTimeframe <= 30 ? "1" : currentTimeframe > 30 and currentTimeframe <= 180 ? "5" :
 currentTimeframe > 180 and currentTimeframe <= 480 ? "15" : currentTimeframe > 480 and currentTimeframe <= 1440 ? "60" :
  currentTimeframe > 1440 and currentTimeframe <= 4320 ? "120" : currentTimeframe > 4320 ? "240" : na

ltfStats() =>

    vol = na(volume) == false ? volume : 0

    [close, vol]

[ltfSrc, ltfVolume]
 = request.security_lower_tf(syminfo.tickerid, dynTf, ltfStats())

tpoArrSize              = array.size(ltfSrc)
maxVolume               = array.max(ltfVolume,0)
indexOfMaxVolume        = array.indexof(ltfVolume, maxVolume)
maxVol                  = array.size(ltfSrc) > 0 ? array.get(ltfSrc, indexOfMaxVolume) : na

second_maxVolume        = array.max(ltfVolume,0)
second_indexOfMaxVolume = array.indexof(ltfVolume, second_maxVolume)
second_maxVol           = array.size(ltfSrc) > 0 ? array.get(ltfSrc, second_indexOfMaxVolume) : na

bartime                 = int(ta.change(time))
bars_start              = (math.floor((timenow - startTime) / bartime)) 
bars_end                = (math.floor((timenow - endTime) / bartime)) 

choozy_ba_loozy         = choose_bars_back_t == "Bars Back" ? Bars_back : choose_bars_back_t == "Time Points" ? bars_end :na
bars_back_mdingy        = choose_bars_back_t == "Bars Back" ? nz(1,1) : choose_bars_back_t == "Time Points" ? nz(bars_start,1)  :na
hide_lines              = choose_bars_back_t == "Bars Back" ? false :true

if barstate.ishistory
   
    startLine  = hide_lines ? line.new(bar_index[bars_start-1], close, bar_index[bars_start-1], open, extend = extend.both, color = time_line_col,style=line.style_dashed):na
    startLabel = hide_lines and show_labels_timeline ? label.new(bar_index[bars_start-1], close+300, "Start: " + str.tostring(bars_start-1), style = label.style_label_lower_left, color=color.new(color.black,100), textcolor = Text_c, size = TextSize):na

    endLine    = hide_lines ? line.new(bar_index[bars_end-1], close, bar_index[bars_end-1], open, extend = extend.both, color = time_line_col,style=line.style_dashed):na
    endLabel   = hide_lines and show_labels_timeline ? label.new(bar_index[bars_end-1], close+300,"End: " + str.tostring(bars_end-1), style = label.style_label_lower_left, color=color.new(color.black,100), textcolor = Text_c, size = TextSize):na
    line.delete(startLine[1])
    label.delete(startLabel[1])
    line.delete(endLine[1])
    label.delete(endLabel[1])

//HTF Vol				   
arr = array.new_float(0)
// index = nz(bars_back_mdingy,1)
index = bars_back_mdingy 
for i = index to choozy_ba_loozy by 1 
    array.push(arr, (volume_[i]))

firstHighest                                 = array.max(arr, 0)
first_Highest_index                          = array.lastindexof(arr, firstHighest) + index -1

second_Highest                               = array.max(arr, 1)
second_Highest_index                         = array.lastindexof(arr, second_Highest) + index -1

Highest_outside_high_vol_zone                = ta.highest(high, first_Highest_index+2)
Lowest_outside_high_vol_zone                 = ta.lowest(low, first_Highest_index+2) 

bar_index_of_highest_point                   = ta.highestbars(high, first_Highest_index+2)
bar_index_of_lowest_point                    = ta.lowestbars(low, first_Highest_index+2)

Price_distance_top_deviation                 = high[first_Highest_index+1] - Highest_outside_high_vol_zone
Price_distance_bottom_deviation              = low[first_Highest_index+1]  - Lowest_outside_high_vol_zone

when_to_choose_what_high_first               = (bar_index_of_highest_point*-1) > (bar_index_of_lowest_point*-1) ? Price_distance_top_deviation   : Price_distance_bottom_deviation
When_to_choose_the_most_outer_deviation_line = (bar_index_of_highest_point*-1) > (bar_index_of_lowest_point*-1) ? Price_distance_top_deviation*2 : Price_distance_bottom_deviation*2

choosing_to_locate_box_above_or_below        = (bar_index_of_highest_point*-1) > (bar_index_of_lowest_point*-1) ? low[first_Highest_index+1] : high[first_Highest_index+1]
Deviation_box_start_choose                   = (bar_index_of_highest_point*-1) > (bar_index_of_lowest_point*-1) ? bar_index_of_lowest_point : bar_index_of_highest_point

//show deviation origon
choosing_to_locate_deviation_origon_above_or_below        = (bar_index_of_highest_point*-1) < (bar_index_of_lowest_point*-1) ? low[first_Highest_index+1] : high[first_Highest_index+1]
when_to_choose_what_high_first_origon                     = (bar_index_of_highest_point*-1) < (bar_index_of_lowest_point*-1) ? Lowest_outside_high_vol_zone   : Highest_outside_high_vol_zone
when_to_choose_what_high_first_origon_label_up_or_down    = (bar_index_of_highest_point*-1) < (bar_index_of_lowest_point*-1) ? label.style_label_up   : label.style_label_down
Deviation_origon_start_choose                             = (bar_index_of_highest_point*-1) < (bar_index_of_lowest_point*-1) ? bar_index_of_lowest_point : bar_index_of_highest_point

//Only show deviation when origin is x%away
Percentage_from_close = (high[first_Highest_index+1] - when_to_choose_what_high_first_origon) / when_to_choose_what_high_first_origon * 100

percentage_range(value, minimum, maximum) =>
    math.min(math.max(value, minimum), maximum)
    
range_value_                  = percentage_range(Percentage_from_close, -Percent_away, +Percent_away)
hide_deviations_percent_away  =  range_value_ == Percentage_from_close ? false : true


//Deviation origon line
Deviation_origon_line     = show_dev and hide_deviations_percent_away ? line.new(bar_index[(Deviation_origon_start_choose*-1)], when_to_choose_what_high_first_origon , bar_index [(Deviation_origon_start_choose*-1)]+ori_ext, when_to_choose_what_high_first_origon , color=dev_origon, width=1,style=line.style_dotted):na
line.delete(Deviation_origon_line[1])
Deviation_origon_label    = show_labels and show_dev and hide_deviations_percent_away ?  label.new(bar_index[(Deviation_origon_start_choose*-1)]+(ori_ext/2),when_to_choose_what_high_first_origon   , text="Origin Deviation" ,color=color.new(color.black,100), style=when_to_choose_what_high_first_origon_label_up_or_down, textcolor=Text_c, size=TextSize):na
label.delete(Deviation_origon_label[1])

//Main Deviation
main_deviation_box      = show_dev and hide_deviations_percent_away ? box.new(bar_index[(Deviation_box_start_choose*-1) +100], choosing_to_locate_box_above_or_below, bar_index[(Deviation_box_start_choose*-1) ] , choosing_to_locate_box_above_or_below + when_to_choose_what_high_first, border_color=dev_c2_bor,text="1x",text_color=Text_c, border_width=1, bgcolor=dev_c, text_size=TextSize,text_valign=text.align_bottom,text_halign=text.align_left) :na
box.delete(main_deviation_box[1])


main_deviation_cross_line_one = show_dev and hide_deviations_percent_away ? line.new(bar_index[(Deviation_box_start_choose*-1) +100], choosing_to_locate_box_above_or_below , bar_index[(Deviation_box_start_choose*-1) ] , choosing_to_locate_box_above_or_below + when_to_choose_what_high_first, color=dev_c2_bor, width=1,style=Line_st):na
line.delete(main_deviation_cross_line_one[1])
main_deviation_cross_line_two = show_dev and hide_deviations_percent_away ? line.new(bar_index[(Deviation_box_start_choose*-1) ], choosing_to_locate_box_above_or_below , bar_index[(Deviation_box_start_choose*-1) +100] , choosing_to_locate_box_above_or_below + when_to_choose_what_high_first, color=dev_c2_bor, width=1,style=Line_st):na
line.delete(main_deviation_cross_line_two[1])

//Secondary Deviation
secondary_deviation_box   = show_dev and hide_deviations_percent_away ? box.new(bar_index[(Deviation_box_start_choose*-1) +100], choosing_to_locate_box_above_or_below + when_to_choose_what_high_first, bar_index[(Deviation_box_start_choose*-1) ] , choosing_to_locate_box_above_or_below + When_to_choose_the_most_outer_deviation_line, text="2x",text_color=Text_c, border_color=dev_c2_bor, border_width=1, bgcolor=dev_c2, text_size=TextSize,text_valign=text.align_bottom,text_halign=text.align_left) :na
box.delete(secondary_deviation_box[1])


secondary_deviation_cross_line_one = show_dev and hide_deviations_percent_away ? line.new(bar_index[(Deviation_box_start_choose*-1) +100], choosing_to_locate_box_above_or_below + when_to_choose_what_high_first, bar_index[(Deviation_box_start_choose*-1) ] , choosing_to_locate_box_above_or_below + When_to_choose_the_most_outer_deviation_line, color=dev_c2_bor, width=1,style=Line_st):na
line.delete(secondary_deviation_cross_line_one[1])
secondary_deviation_cross_line_two = show_dev and hide_deviations_percent_away ? line.new(bar_index[(Deviation_box_start_choose*-1) ], choosing_to_locate_box_above_or_below + when_to_choose_what_high_first, bar_index[(Deviation_box_start_choose*-1) +100] , choosing_to_locate_box_above_or_below + When_to_choose_the_most_outer_deviation_line, color=dev_c2_bor, width=1,style=Line_st):na
line.delete(secondary_deviation_cross_line_two[1])

//High Volume Box
High_vol_box = box.new(bar_index[first_Highest_index+1], high[first_Highest_index+1], bar_index+Zone_ext , low[first_Highest_index+1], border_color=border_c, border_width=1, bgcolor=Rise_c, text="" , text_size=TextSize,text_halign=text.align_right,text_color=Text_c,text_valign=text.align_top) 
box.delete(High_vol_box[1])

//First Volume Candle
High_vol_candle_body = line.new(bar_index[first_Highest_index+1], open[first_Highest_index+1], bar_index[first_Highest_index+1], close[first_Highest_index+1], color=candle_c, width=body_width)
line.delete(High_vol_candle_body[1])
High_vol_candle_wick = line.new(bar_index[first_Highest_index+1], high[first_Highest_index+1], bar_index[first_Highest_index+1], low[first_Highest_index+1], color=candle_c, width=wick_width)
line.delete(High_vol_candle_wick[1])
High_vol_candle_label = show_vol_c_labels ? label.new(bar_index[first_Highest_index+1], low[first_Highest_index+1], text="1", color=color.new(color.white,100), style=label.style_label_up, textcolor=Text_c, size=TextSize):na
label.delete(High_vol_candle_label[1])

//Second High Volume Candle
second_High_vol_candle_body = show_second_vol_c ? line.new(bar_index[second_Highest_index+1], open[second_Highest_index+1], bar_index[second_Highest_index+1], close[second_Highest_index+1], color=second_candle_c, width=body_width):na
line.delete(second_High_vol_candle_body[1])
second_High_vol_candle_wick = show_second_vol_c ? line.new(bar_index[second_Highest_index+1], high[second_Highest_index+1], bar_index[second_Highest_index+1], low[second_Highest_index+1], color=second_candle_c, width=wick_width):na
line.delete(second_High_vol_candle_wick[1])
second_High_vol_candle_label = show_vol_c_labels and show_second_vol_c ? label.new(bar_index[second_Highest_index+1], low[second_Highest_index+1], text="2", color=color.new(color.white,100), style=label.style_label_up, textcolor=Text_c, size=TextSize):na
label.delete(second_High_vol_candle_label[1])

//First Poc
Poc_line  = show_mpoc ? line.new(bar_index[first_Highest_index+1], maxVol[first_Highest_index+1], bar_index+20, maxVol[first_Highest_index+1], color=mainpoc_c , width=1,style=Line_st_poc):na
line.delete(Poc_line[1])
Poc_label = show_labels ? label.new(bar_index+23, maxVol[first_Highest_index+1], text="1 LTF Poc  |  $" + str.tostring(maxVol[first_Highest_index+1]) + "  |  " + str.tostring(first_Highest_index) + "  |  " + str.tostring(inp_ticker ) + " VOL", color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
label.delete(Poc_label[1])

//Second Poc
Second_Poc_line  = show_second_mpoc and show_second_vol_c ? line.new(bar_index[second_Highest_index+1], maxVol[second_Highest_index+1], bar_index+20, maxVol[second_Highest_index+1], color=mainpoc_c , width=1,style=Line_st_poc):na
line.delete(Second_Poc_line[1])
Second_Poc_label = show_labels and show_second_vol_c and show_second_mpoc ? label.new(bar_index+23, maxVol[second_Highest_index+1], text="2 LTF Poc  |  $" + str.tostring(maxVol[second_Highest_index+1]) + "  |  " + str.tostring(second_Highest_index), color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
label.delete(Second_Poc_label[1])

//Deviational Vol
// input parameters
// length               = input.int(150,"Length",minval=2,maxval=300,step=1, group = "Element On/Off")
// numdev               = input.float(2,"Number Of Deviations",minval=1,maxval=20,step=0.1, group = "Element On/Off")
// showneg              = input.bool(false,"Show Negative Values", group = "Element On/Off")

// // calculations
// average = ta.sma(volume_,length)
// stdev = ta.stdev(volume_,length)
// diff = volume_ - average
// result = diff / stdev

// plot the result
// plot(showneg ? result : result > 0 ? result : na,title="RelVolStDev",color=result>=numdev?color.green:color.red,style=plot.style_columns)

// barcolor(result>=numdev?deviational_col:na)
// plotcandle(open, high, low, close, title="High Low Candle",  bordercolor=result>=numdev?deviational_col:na, color =result>=numdev?deviational_col:na, wickcolor=result>=numdev?deviational_col:na)