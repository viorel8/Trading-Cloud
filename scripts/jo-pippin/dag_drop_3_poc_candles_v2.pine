// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Jo-Pippin

//@version=5
indicator("H2", overlay = true, max_bars_back = 500)

Alert_zone_spacing   = input.int (20,   'Poc Zones width',  minval=1, maxval=530, group = "Element On/Off")
ext_zone_past        = input.int (0,   'Zone Right Extend',  minval=0, maxval=530, group = "Element On/Off")
show_labels          = input.bool(true, 'Show Poc price labels', group = "Element On/Off")
vol_or               = input.string("All Data", options = ["Just Vol", "All Data","Price Only", "Vol and Price", "Exchange and Price", "Exchange Only"], title = "Poc Label Display", group = "Element On/Off")
show_vol_mark        = input.bool(true, 'Show vol Markers', group = "Element On/Off")
show_volume_gra      = input.bool(false, 'Show gradient volume candles', group = "Element On/Off")
show_yearly          = input.bool(true, 'Show Yearly Open Markers', group = "Element On/Off")

alert_line_col       = input.color(color.new(#eceff1, 100) ,'Poc zone outline color', group = "Color")
alert_zone_bg        = input.color(color.new(#dcdfe6, 70) ,'Poc zone BG color', group = "Color")

zone_col            = input.string("ZONE COLOR", options = ["ZONE COLOR", "VOLUME GRADIENT"], title = "LTF POC Volume source", group = "Element On/Off")

length               = input.int(400, "Volume Lookback Period", 2,  group = "Volume candle gradient")
bodyColorToggle      = input.bool(true, "Vol Canles Body Color On",  group = "Volume candle gradient")
borderColorToggle    = input.bool(true, "Vol Canles Border Color On",  group = "Volume candle gradient")
wickColorToggle      = input.bool(true, "Vol Canles Wick Color On",  group = "Volume candle gradient")

ltf_poc_s            = input.string("BINANCE:BTCUSDTPERP", options = ["BYBIT:BTCUSDT", "BINANCE:BTCUSDT","BINANCE:BTCUSDTPERP", "CURRENT TICKER"], title = "LTF POC Volume source", group = "Element On/Off")
ltf_poc              = ltf_poc_s  == "BINANCE:BTCUSDTPERP" ? "BINANCE:BTCUSDTPERP" : ltf_poc_s  == "BYBIT:BTCUSDT" ? "BYBIT:BTCUSDT" : ltf_poc_s  == "BINANCE:BTCUSDT" ? "BINANCE:BTCUSDT" : ltf_poc_s  == "CURRENT TICKER" ? syminfo.tickerid : na

inp_line_style_TR    = input.string("Dotted", options = ["Dotted", "Solid", "Dashed"], title = "Poc Zone outline style", group = "Element On/Off")
Line_st_TR           = inp_line_style_TR  == "Solid" ? line.style_solid : inp_line_style_TR  == "Dotted" ? line.style_dotted : inp_line_style_TR  == "Dashed" ? line.style_dashed : na

inp_text_size        = input.string("Tiny", options = ["Tiny", "Small", "Auto"], title = "Label Text Size", group = "Element On/Off")
TextSize             = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : inp_text_size == "Auto" ? size.auto : na

Text_c               = input.color(color.new(#080808, 0) ,'Text Color', group = "Color")
m_c                  = input.color(color.new(#404867, 0) ,'Selected candle Marker Color', group = "Color")
customUpColorT       = input.color(color.new(#0683f1, 0), "Up Color of gradient vol candles",  group = "Color")
customDownColorT     = input.color(color.new(#f82104, 0), "Down Color of gradient vol candles", group = "Color")
UpColorT             = input.color(color.new(#0683f1, 90), "Up Color of gradient vol candles",  group = "Color")
DownColorT           = input.color(color.new(#f82104, 90), "Down Color of gradient vol candles", group = "Color")
i_open_c             = input.color(color.new(#0683f8, 0),  'Yearly Open Marker Color', group = "Color Settings")

date1                = input.time(0,title ='Input Candle Date',confirm=true,group='Elements')
date2                = input.time(0,title ='Input Zone End',confirm=true,group='Elements')

t1                   = "BINANCE:BTCUSDT"
t2                   = "BINANCE:BTCUSDTPERP"
t3                   = "BINANCE:BTCPERP"
t4                   = "BITSTAMP:BTCUSD"
t5                   = "BYBIT:BTCUSDT"
t6                   = "BYBIT:BTCUSD"

[t1_volume_]         = request.security(t1, timeframe.period, expression=[volume])
[t2_volume_]         = request.security(t2, timeframe.period, expression=[volume])
[t3_volume_]         = request.security(t3, timeframe.period, expression=[volume])
[t4_volume_]         = request.security(t4, timeframe.period, expression=[volume])
[t5_volume_]         = request.security(t5, timeframe.period, expression=[volume])
[t6_volume_]         = request.security(t6, timeframe.period, expression=[volume])

aggr = t1_volume_ + t2_volume_ + t5_volume_

//Volume for last N periods
var int [] pastVol = array.new_int(length)
for i = 0 to length - 1
    array.set(pastVol, i, int(aggr[i]))

//Heatmap color assignments
upColor   = color.from_gradient(aggr, array.min(pastVol), array.max(pastVol), na, customUpColorT)
downColor = color.from_gradient(aggr, array.min(pastVol), array.max(pastVol), na, customDownColorT)

//Dynamic timeframe
currentTimeframe = timeframe.in_seconds(timeframe.period) / 60
dynTf = currentTimeframe <= 30 ? "1" : currentTimeframe > 30 and currentTimeframe <= 180 ? "5" :
 currentTimeframe > 180   and currentTimeframe <= 480 ? "15" : currentTimeframe > 480 and currentTimeframe <= 1440 ? "60" :
  currentTimeframe > 1440 and currentTimeframe <= 4320 ? "120" : currentTimeframe > 4320 ? "240" : na

ltfStats() =>
    vol = na(volume) == false ? volume : 0
    [close, vol]

[ltfSrc, ltfVolume] = request.security_lower_tf(ltf_poc, dynTf, ltfStats())

tpoArrSize          = array.size(ltfSrc)
maxVolume           = array.max(ltfVolume,0)
indexOfMaxVolume    = array.indexof(ltfVolume, maxVolume)
maxVol              = array.size(ltfSrc) > 0 ? array.get(ltfSrc, indexOfMaxVolume) : na
bartime             = int(ta.change(time))
index               = (math.floor((timenow - date1) / bartime))-1
index2              = (math.floor((timenow - date2) / bartime))-1
bars                = nz(index,1)
bars2               = nz(index2,1)

ltf_pocs_vol        = ltf_poc_s  == "BINANCE:BTCUSDTPERP" ? t2_volume_ : ltf_poc_s  == "BYBIT:BTCUSDT" ? t5_volume_ : ltf_poc_s  == "BINANCE:BTCUSDT" ? t1_volume_ : ltf_poc_s  == "CURRENT TICKER" ? volume : na
day_01 = dayofweek[bars+1] == 1 ?  "SUNDAY" : dayofweek[bars+1] == 2 ?  "MONDAY" : dayofweek[bars+1] == 3 ?  "TUESDAY" : dayofweek[bars+1] == 4 ?  "WEDNESDAY" : dayofweek[bars+1] == 5 ?  "THURSDAY" : dayofweek[bars+1] == 6 ?  "FRIDAY" : dayofweek[bars+1] == 7 ?  "SATERDAY" :na 

poc_price_text      = show_labels == true ? "      " + str.tostring(day_01) + "  |  " + str.tostring(ltf_pocs_vol[bars+1], format.volume) + "  |  " + str.tostring(ltf_poc_s) + "  |  " + str.tostring(timeframe.period) + "M   |   $" + str.tostring(maxVol[bars+1]) : ''
poc_price_text2     = show_labels == true ? "      " + str.tostring(ltf_pocs_vol[bars+1], format.volume) : ''
poc_price_text3     = show_labels == true ? "       $" + str.tostring(maxVol[bars+1]) : ''
poc_price_text4      = show_labels == true ? "      " + str.tostring(ltf_pocs_vol[bars+1], format.volume) + "  |  " + "$" + str.tostring(maxVol[bars+1]) : ''
poc_price_text5      = show_labels == true ? "      " + str.tostring(ltf_poc_s) + "  |   $" + str.tostring(maxVol[bars+1]) : ''
poc_price_text6      = show_labels == true ? "      " + str.tostring(ltf_poc_s) : ''


Just_vol_or         = vol_or  == "All Data" ? poc_price_text : vol_or  == "Just Vol" ? poc_price_text2 : vol_or  == "Price Only" ? poc_price_text3 :  vol_or  == "Vol and Price" ? poc_price_text4 :  vol_or  == "Exchange and Price" ? poc_price_text5 :  vol_or  == "Exchange Only" ? poc_price_text6 :  na


//Yearly Open Dots
[yo,yc1]      = request.security(syminfo.tickerid, '12M', expression=[open, close[1]], lookahead=barmerge.lookahead_on)
new_day1       = yc1[1]  != yc1
plotchar(new_day1 and show_yearly ? yo : na, title='Close', char='●', location=location.absolute, color=i_open_c, offset=0, size=size.tiny)

//Plot high vol candles
plotcandle(show_volume_gra ? open:na, high, low, close, "Volume Heatmap Candlestick Colors", bodyColorToggle ? close >= open ? upColor : downColor : color.rgb(0, 0, 0, 100), wickColorToggle ? close >= open ? upColor : downColor : color.rgb(0, 0, 0, 100), bordercolor=borderColorToggle ? close >= open ? upColor : downColor : color.rgb(0, 0, 0, 100))

//Poc 
zone_c              = zone_col  == "ZONE COLOR" ? alert_zone_bg : zone_col  == "VOLUME GRADIENT" and close[bars+1] > open[bars+1] ? UpColorT : zone_col  == "VOLUME GRADIENT" and close[bars+1] < open[bars+1] ? DownColorT :na

poc_z_box  = box.new(bar_index[bars+1], maxVol[bars+1]+Alert_zone_spacing, bar_index[bars2+1]+ext_zone_past, maxVol[bars+1]-Alert_zone_spacing, border_color=alert_line_col, border_width=1, border_style=Line_st_TR,bgcolor=zone_c, text=Just_vol_or, text_size=TextSize, text_color=Text_c, text_halign=text.align_left, text_valign=text.align_center)
box.delete(poc_z_box[1]) 

//Vol Candle Marker 01
vol_candle_marker = show_vol_mark  ? label.new(bar_index[bars+1], low[bars+1], text='▲', color=color.new(color.black,100), style=label.style_label_up, textcolor=m_c, size=size.tiny):na
label.delete(vol_candle_marker[1])

//Vol Candle Marker 02
vol_candle_marker2 = show_vol_mark  ? label.new(bar_index[bars+1], high[bars+1], text='▼', color=color.new(color.black,100), style=label.style_label_down, textcolor=m_c, size=size.tiny):na
label.delete(vol_candle_marker2[1])