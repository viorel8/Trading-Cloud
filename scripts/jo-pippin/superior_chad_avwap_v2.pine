//Jo

//@version=5
indicator("Multi-Exchange vwap V3", overlay=true, max_bars_back = 500)

startCalculationDate = input.time(timestamp("20 Jan 2023"), "Start Calculation High", confirm=true)
endCalculationDate   = input.time(timestamp("20 Jan 2023"), "End Calculation High", confirm=true)

Show_t1              = input.bool(false, 'Show Ticker 01 Vwap', group = "Settings")
Show_t2              = input.bool(false, 'Show Ticker 02 Vwap', group = "Settings")
Show_t3              = input.bool(false, 'Show Ticker 03 Vwap', group = "Settings")
Show_t4              = input.bool(false, 'Show Ticker 04 Vwap', group = "Settings")
Show_t5              = input.bool(false, 'Show Ticker 05 Vwap', group = "Settings")
Show_t6              = input.bool(false, 'Show Ticker 06 Vwap', group = "Settings")
Show_max             = input.bool(true, 'Show Max Vwap', group = "Settings")
Show_min             = input.bool(true, 'Show Min Vwap', group = "Settings")
Show_avr             = input.bool(true, 'Show Avr Vwap', group = "Settings")
Show_AVWAP_zone      = input.bool(false, 'Show AVWAP Zone', group = "Settings")
Show_dots            = input.bool(false, 'Show Dots when price wicked into bands', group = "Settings")
show_anchor          = input.bool(true, 'Show Anchor point', group = "Settings")
Show_avwap_TB_price  = input.bool(false, 'Show AVWAP TOP BOT price labels', group = "Settings")
Show_avwap_price_mid = input.bool(false, 'Show AVWAP middle label price', group = "Settings")
inp_line_style       = input.string("Step", options = ["Step", "Line"], title = "Cross Line Style", group = "Settings")
Line_st              = inp_line_style == "Step" ? plot.style_stepline : inp_line_style == "Line" ? plot.style_line : na
lookback             = input.int(defval=20, title='Zone Lookback Period', group='Elements')
lookbackex           = input.int(defval=10, title='Zone Ext Period', group='Elements')

max_min_col          = input.color(color.new(#101111, 84), 'Vwap Max Min color',   group = "Color Settings")
avr_col              = input.color(color.new(#101111, 84), 'Vwap Avr color',   group = "Color Settings")
dot_col              = input.color(color.new(#0a7ef3, 0), 'Dot collor', group = "Color Settings")
zone_col             = input.color(color.new(#0c0c0c, 94), 'Zone', group = "Color Settings")
zone_mid             = input.color(color.new(#0c0c0c, 70), 'Zone Midline', group = "Color Settings")
marker_c             = input.color(color.new(#0c0c0c, 2), 'Marker color', group = "Color Settings")

hide_r               = input.string("Hide Right", options = ["Hide Right", "Extend Right"], title = "Cross Line Style", group = "Settings")
Hide_ex              = hide_r == "Hide Right" ? color.new(#080808, 100) : hide_r == "Extend Right" ? max_min_col : na
Hide_ex2             = hide_r == "Hide Right" ? color.new(#080808, 100) : hide_r == "Extend Right" ? avr_col : na

t1                   = input.symbol(title="Ticker 01",  defval = "BINANCE:BTCUSDT")
t2                   = input.symbol(title="Ticker 02",  defval = "BINANCE:BTCUSDTPERP")
t3                   = input.symbol(title="Ticker 03",  defval = "BINANCE:BTCPERP")
t4                   = input.symbol(title="Ticker 04",  defval = "BITSTAMP:BTCUSD")
t5                   = input.symbol(title="Ticker 05",  defval = "BYBIT:BTCUSDT")
t6                   = input.symbol(title="Ticker 06",  defval = "BYBIT:BTCUSD")

[t1_volume_]         = request.security(t1, timeframe.period, expression=[volume])
[t2_volume_]         = request.security(t2, timeframe.period, expression=[volume])
[t3_volume_]         = request.security(t3, timeframe.period, expression=[volume])
[t4_volume_]         = request.security(t4, timeframe.period, expression=[volume])
[t5_volume_]         = request.security(t5, timeframe.period, expression=[volume])
[t6_volume_]         = request.security(t6, timeframe.period, expression=[volume])

vwap_t1() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t1_volume_)
        array.push(volArray, t1_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt1 = vwap_t1()

vwap_t2() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t2_volume_)
        array.push(volArray, t2_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt2 = vwap_t2()

vwap_t3() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t3_volume_)
        array.push(volArray, t3_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt3 = vwap_t3()

vwap_t4() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t4_volume_)
        array.push(volArray, t4_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt4 = vwap_t4()

vwap_t5() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t5_volume_)
        array.push(volArray, t5_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt5 = vwap_t5()

vwap_t6() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t6_volume_)
        array.push(volArray, t6_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt6 = vwap_t6()

max = math.max(vt1,vt2,vt3,vt4,vt5,vt6)
min = math.min(vt1,vt2,vt3,vt4,vt5,vt6)
avr = math.avg(max,min)

a = high <  max and high > min and close < min
b = low <  max and low > min and close > max

bartime             = int(ta.change(time))
index               = (math.floor((timenow - startCalculationDate) / bartime))-1
bars                = nz(index,1) 
index2              = (math.floor((timenow - endCalculationDate) / bartime))-1
bars_end            = nz(index2,1)


Hide_right        = time > endCalculationDate and time > startCalculationDate ? Hide_ex  : max_min_col
Hide_right_avr    = time > endCalculationDate and time > startCalculationDate ? Hide_ex2  : avr_col

marker_above_below = ((max+min)/2) > hl2[bars] ? '▲' : '▼'
above_below_choose = ((max+min)/2) > hl2[bars] ? high : low
label_below_choose = ((max+min)/2) > hl2[bars] ? label.style_label_up : label.style_label_down

//Vol Candle Marker 01
vol_candle_marker = show_anchor  ? label.new(bar_index[bars+1], above_below_choose[bars+1], text=marker_above_below, color=color.new(color.black,100), style=label_below_choose, textcolor=marker_c, size=size.tiny):na
label.delete(vol_candle_marker[1])


plot(Show_max ? max :na, "max", linewidth=1, color=Hide_right, style=Line_st)
plot(Show_avr ? avr :na, "avr", linewidth=1, color=Hide_right_avr, style=Line_st)
plot(Show_min ? min :na, "min", linewidth=1, color=Hide_right, style=Line_st)

plot(Show_t1 ? vt1 :na, "t1",  linewidth=1, color=Hide_right)
plot(Show_t2 ? vt2 :na, "t2",  linewidth=1, color=Hide_right)
plot(Show_t3 ? vt3 :na, "t3",  linewidth=1, color=Hide_right)
plot(Show_t4 ? vt4 :na, "t4",  linewidth=1, color=Hide_right)
plot(Show_t5 ? vt5 :na, "t5",  linewidth=1, color=Hide_right)
plot(Show_t6 ? vt6 :na, "t6",  linewidth=1, color=Hide_right)

plotshape(Show_dots ? a:na,style=shape.triangledown, location=location.abovebar, size=size.auto,color= dot_col)
plotshape(Show_dots ? b:na,style=shape.triangleup, location=location.belowbar, size=size.auto,color= dot_col)
lab1 = Show_avwap_TB_price ?label.new(bar_index+lookbackex+3,max,text=str.tostring(max,format.mintick),style=label.style_label_left,size=size.tiny,color=color.new(color.white,100)):na
label.delete(lab1[1])
lab2 = Show_avwap_TB_price ? label.new(bar_index+lookbackex+3,min,text=str.tostring(min,format.mintick),style=label.style_label_left,size=size.tiny,color=color.new(color.white,100)):na
label.delete(lab2[1])
zone = Show_AVWAP_zone ? box.new(bar_index[lookback], max, bar_index+lookbackex+3, min, border_color=color.new(color.white,100), border_width=1,bgcolor=zone_col,text="" ,text_color =color.black, text_size=size.tiny,text_halign=text.align_right ,text_valign=  text.align_top ):na
box.delete(zone[1])
midline = Show_AVWAP_zone ? line.new(bar_index[lookback],(max+min)/2, bar_index+lookbackex+3,(max+min)/2,style=line.style_solid,color=zone_mid):na
line.delete(midline[1])
labmid = Show_avwap_price_mid ? label.new(bar_index+lookbackex+3,(max+min)/2,text= "Yearly Open AVWAP  " +  str.tostring((max+min)/2,format.mintick),style=label.style_label_left,size=size.tiny,color=color.new(color.white,100)):na
label.delete(labmid[1])

alertcondition((ta.cross(min,close) and (close[1] < min)) or (ta.cross(max,close) and (close[1] < max)) , title='AVWAP ALERT', message='PRICE CROSSED AVWAP!')