// Jo
//@version=5
indicator('True Gaps',overlay = true, max_lines_count = 500,max_labels_count = 500,max_boxes_count = 500,max_bars_back = 5000,explicit_plot_zorder = true)
import FFriZz/BoxLine_Lib/1 as obj

line_col                  = input.color(color.new(#afcff7,70), "Labels, N wave, lines and TPs color")
text_c                    = input.color(color.new(#afcff7,15), "Text Color")
label_b_color             = input.color(color.white, "Label Background Color")
brightness_01             = color.new(#afcff7,10)
brightness_02             = color.new(#afcff7,40)
brightness_03             = color.new(#afcff7,80)
Dot_collor_controller_top = input.color(color.new(#afcff7,93))

tf                 = input.timeframe("", "", group = "Global Settings")
FVG_on_off         = input.bool(true,'FVG | On/Off?', group = "Global Settings")
delete_filled_gaps = input.bool(true,'Delete FVG when Completely filled', group = "Global Settings")
fvg_mitigation     = input.bool(true,'Reduce Gap Size as it is Being Mitigated', group = "Global Settings")
plot_candle        = input.bool(false,'Plot candles', group = "Global Settings")
plot_lines         = input.bool(false,'Plot lines', group = "Global Settings")
switch_off_dots    = plot_candle == true ? false :  plot_lines == true ? false : true
on_off_fvg         = input.bool(true,'Show FVG', group = "Global Settings")

candleupcol        = input.color(color.new(#676d84,70),title="Candle up color",group="Color")
candledowncol      = input.color(color.new(#343946,100),title="Candle down color",group="Color")
wickcol            = input.color(color.new(#afcff7,86),title="Candle wick color",group="Color")
candleupcolb       = input.color(color.new(#afcff7,55),title="Candle up border color",group="Color")
candledowncolb     = input.color(color.new(#676d84,52),title="Candle down border color",group="Color")  
bullFvg_c          = input.color(#fafcfa,'Bull', group="Color")
bearFvg_c          = input.color(#fcf9f9,'Bear', group="Color")

line_up        = input.color(color.new(#676d84,70),title="Line up color",group="Color")
line_down        = input.color(color.new(#676d84,70),title="Line down color",group="Color")

show_t1            = input.bool(true, 'BINANCE:BTCUSDT', group = "Global Settings")
show_t2            = input.bool(true, 'BYBIT:BTCUSDT.P', group = "Global Settings")
show_t3            = input.bool(true, 'BINANCE:BTCPERP', group = "Global Settings")
show_t4            = input.bool(true, 'BINANCE:BTCUSDTPERP', group = "Global Settings")
show_t5            = input.bool(true, 'BYBIT:BTCUSD', group = "Global Settings")
show_t6            = input.bool(true, 'COINBASE:BTCUSDT', group = "Global Settings")
show_t7            = input.bool(false, 'KUCOIN:BTCUSDT', group = "Global Settings")
show_t8            = input.bool(false, 'OKX:BTCUSDT', group = "Global Settings")
show_t9            = input.bool(false, 'KRAKEN:BTCUSDT', group = "Global Settings")
// show_t10           = input.bool(false, 'HUOBI:BTCUSDT', group = "Global Settings")
show_t11           = input.bool(false, 'BITFINEX:BTCUSD', group = "Global Settings")
show_t12           = input.bool(false, 'POLONIEX:BTCUSDT', group = "Global Settings")
show_t13           = input.bool(false, 'BITMEX:XBTUSDT', group = "Global Settings")

fvg_w              = input.int(6,'FVG Width', group = "Global Settings")
FVG_count          = input.int(100,'Display Count', group = "Global Settings")

[low_t1,high_t1,open_t1,close_t1]     = request.security("BINANCE:BTCUSDT",              tf, [low,high,open,close]) 
[low_t2,high_t2,open_t2,close_t2]     = request.security("BYBIT:BTCUSDT.P",              tf, [low,high,open,close])
[low_t3,high_t3,open_t3,close_t3]     = request.security("BINANCE:BTCPERP",              tf, [low,high,open,close])
[low_t4,high_t4,open_t4,close_t4]     = request.security("BINANCE:BTCUSDTPERP",          tf, [low,high,open,close])
[low_t5,high_t5,open_t5,close_t5]     = request.security("BYBIT:BTCUSD",                 tf, [low,high,open,close])
[low_t6,high_t6,open_t6,close_t6]     = request.security("COINBASE:BTCUSDT",             tf, [low,high,open,close])
[low_t7,high_t7,open_t7,close_t7]     = request.security("KUCOIN:BTCUSDT",               tf, [low,high,open,close])
[low_t8,high_t8,open_t8,close_t8]     = request.security("OKX:BTCUSDT",                  tf, [low,high,open,close])
// [low_t9,high_t9,open_t9,close_t9]     = request.security("KRAKEN:BTCUSDT",               tf, [low,high,open,close])
// [low_t10,high_t10,open_t10,close_t10] = request.security("HUOBI:BTCUSDT",                tf, [low,high,open,close])
[low_t11,high_t11,open_t11,close_t11] = request.security("BITFINEX:BTCUSD",              tf, [low,high,open,close])
[low_t12,high_t12,open_t12,close_t12] = request.security("POLONIEX:BTCUSDT",             tf, [low,high,open,close])
[low_t13,high_t13,open_t13,close_t13] = request.security("BITMEX:XBTUSDT",               tf, [low,high,open,close])

low_s   = math.min(low_t1, low_t2, low_t3, low_t4, low_t5, low_t6, low_t7, low_t8,  low_t11, low_t12, low_t13)
high_s  = math.max(high_t1, high_t2, high_t3, high_t4, high_t5, high_t6, high_t7, high_t8,   high_t11, high_t12, high_t13)
close_s = math.avg(close_t1, close_t2, close_t3, close_t4, close_t5, close_t6, close_t7, close_t8,   close_t11, close_t12, close_t13)
open_s  = math.avg(open_t1, open_t2, open_t3, open_t4, open_t5, open_t6, open_t7, open_t8,  open_t11, open_t12, open_t13)

plotcandle(plot_candle ? open_s:na, high_s, low_s, close_s, title="High Low Candle",  bordercolor=open < close ? candleupcolb : candledowncolb, color = open < close ? candleupcol : candledowncol, wickcolor=wickcol)

col_up_down = close > high ? line_up : line_down
lines_plot = plot_lines ? line.new(bar_index, low_s, bar_index, high_s, color=col_up_down, width=1) : na

//FVG Starts
var line[] aBull = array.new<line>()
var line[] aBear = array.new<line>()
bearFvg = high_s < low_s[2] and FVG_on_off and on_off_fvg 
bullFvg = low_s  > high_s[2] and FVG_on_off and on_off_fvg
fvgC = bullFvg ? bullFvg_c : bearFvg_c

fvgEdit(aBull,aBear,count) =>
    
    for s = 0 to 1
        line[] aLine = aBull
        int aSize = array.size(aBull)
        
        switch s
            1 => aSize := array.size(aBear), aLine := aBear
        
        if aSize > 0
            for i = aSize - 1 to 0
                getLine = array.get(aLine,i)
                y1 = line.get_y1(getLine)
                y2 = line.get_y2(getLine)
                cross = low_s < y2
                crossAdj = low_s < y1
                
                switch s
                    1 => cross := high_s > y2, crossAdj := high_s > y1

                if fvg_mitigation and crossAdj and delete_filled_gaps
                    switch s
                        0 => line.set_y1(getLine,low_s)
                        1 => line.set_y1(getLine,high_s)
                if delete_filled_gaps and cross
                    line.delete(array.remove(aLine,i))
    
        if barstate.islast
            if aSize > count
                line.delete(array.pop(aLine))
                    
if bullFvg 
    array.unshift(aBull,
     line.new(
     bar_index - 1, 
     low_s,
     bar_index - 1,
     high_s[2],
     width = fvg_w,
     color = fvgC)) 
if bearFvg 
    array.unshift(aBear,
     line.new(
     bar_index - 1, 
     high_s,
     bar_index - 1,
     low_s[2],
     width = fvg_w,
     color = fvgC)) 

//Fun Call     
fvgEdit(aBull,aBear,FVG_count)     
     
bear_index = ta.barssince(bearFvg)
bull_index = ta.barssince(bullFvg)


// lll = label.new(bar_index, high, text=  "Bear: "+ str.tostring(bear_index+ 1)+ "\nBull: " + str.tostring(bull_index+1))
// label.delete(lll[1])



plot(show_t1 and switch_off_dots ? low_t1  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
plot(show_t1 and switch_off_dots ? high_t1 :na , title ='', color =Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

plot(show_t2 and switch_off_dots ? low_t2  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
plot(show_t2 and switch_off_dots ? high_t2 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

plot(show_t3 and switch_off_dots ? low_t3  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
plot(show_t3 and switch_off_dots ? high_t3 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

plot(show_t4 and switch_off_dots ? low_t4  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
plot(show_t4 and switch_off_dots ? high_t4 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

plot(show_t5 and switch_off_dots ? low_t5  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
plot(show_t5 and switch_off_dots ? high_t5 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

plot(show_t6 and switch_off_dots ? low_t6  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
plot(show_t6 and switch_off_dots ? high_t6 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

plot(show_t7 and switch_off_dots ? low_t7  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
plot(show_t7 and switch_off_dots ? high_t7 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

plot(show_t8 and switch_off_dots ? low_t8  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
plot(show_t8 and switch_off_dots ? high_t8 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

// plot(show_t9 and switch_off_dots ? low_t9  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
// plot(show_t9 and switch_off_dots ? high_t9 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

// plot(show_t10 and switch_off_dots ? low_t9  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
// plot(show_t10 and switch_off_dots ? high_t9 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

plot(show_t11 and switch_off_dots ? low_t11  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
plot(show_t11 and switch_off_dots ? high_t11 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

plot(show_t12 and switch_off_dots ? low_t12  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
plot(show_t12 and switch_off_dots ? high_t12 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)

plot(show_t13 and switch_off_dots ? low_t13  :na , title  ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)
plot(show_t13 and switch_off_dots ? high_t13 :na , title ='', color= Dot_collor_controller_top, style=plot.style_cross, linewidth=1)


////////////////////////////////////////////////////////////////

var inputHighlightIntermediates = input(true, 'Highlight Intermediate Swing Highs and Lows')
var inputIntermediateSize = input.string('Tiny', 'Intermediate Swing Label Size', options=['Auto', 'Tiny', 'Small', 'Normal'])
var inputShowShortTermSwings = input(false, 'Short Term Swings')
var inputPivotBars = input(2, 'Pivot Candles')
var highcolor = input.color(color.red, title="High", tooltip="select a color for ST/IT Highs")
var lowcolor = input.color(color.green, title="Low", tooltip="select a color for ST/IT Lows")

var intermediateLabelSize = inputIntermediateSize == 'Auto' ? size.auto : inputIntermediateSize == 'Tiny' ? size.tiny : inputIntermediateSize == 'Small' ? size.small : size.normal

// Parallel arrays for Swing High Data
var float[] swingHighs = array.new_float()
var label[] swingHighLabels = array.new_label()
var bool[] swingHighIsHigher = array.new_bool()
var bool[] swingHighIsIntermediate = array.new_bool()

// Parallel arrays for Swing Low Data
var float[] swingLows = array.new_float()
var label[] swingLowLabels = array.new_label()
var bool[] swingLowIsLower = array.new_bool()
var bool[] swingLowIsIntermediate = array.new_bool()

// see last element pushed an an array
array_peek(arrayId) =>
    int arraySize = array.size(arrayId)
    if arraySize > 0
        array.get(arrayId, arraySize - 1)
    else
        na

// filters out swings that were not intermediate swings after all swings have been recorded.
remove_short_term_swings() =>
    if not inputShowShortTermSwings and barstate.islast
        var swingHighCount = array.size(swingHighLabels)
        var swingLowCount = array.size(swingLowLabels)

        for i = 0 to swingHighCount - 1 by 1
            if not array.get(swingHighIsIntermediate, i)
                label.delete(array.get(swingHighLabels, i))

        for i = 0 to swingLowCount - 1 by 1
            if not array.get(swingLowIsIntermediate, i)
                label.delete(array.get(swingLowLabels, i))


// detect swing highs and lows
swingHighPrice = ta.pivothigh(high_s, inputPivotBars, inputPivotBars)
swingLowPrice = ta.pivotlow(low_s, inputPivotBars, inputPivotBars)


if not na(swingHighPrice)
    lastSwingHighPrice = array_peek(swingHighs)
    isHigherHigh = swingHighPrice > lastSwingHighPrice
    isLowerHigh = swingHighPrice < lastSwingHighPrice
    swingLabel = label.new(bar_index[inputPivotBars], swingHighPrice, color=highcolor, yloc=yloc.price, style=label.style_circle, size=size.tiny)

    // check if last swing high was intermediate
    if isLowerHigh and array_peek(swingHighIsHigher)
        // lower high after a higher high means the previous swing high was intermediate
        if inputHighlightIntermediates
            label.set_size(array_peek(swingHighLabels), intermediateLabelSize)
            array.set(swingHighIsIntermediate, array.size(swingHighIsIntermediate) - 1, true)

    // save swing
    array.push(swingHighs, swingHighPrice)
    array.push(swingHighLabels, swingLabel)
    array.push(swingHighIsHigher, isHigherHigh)
    array.push(swingHighIsIntermediate, false)  // can be filled in later, if a lower high forms next

if not na(swingLowPrice)
    lastSwingLowPrice = array_peek(swingLows)
    isHigherLow = swingLowPrice > lastSwingLowPrice
    isLowerLow = swingLowPrice < lastSwingLowPrice
    swingLabel = label.new(bar_index[inputPivotBars], swingLowPrice, color=lowcolor, yloc=yloc.price, style=label.style_circle, size=size.tiny)

    // check if last swing low was intermediate
    if isHigherLow and array_peek(swingLowIsLower)
        // higher low after a lower low means the previous swing low was intermediate
        if inputHighlightIntermediates
            label.set_size(array_peek(swingLowLabels), intermediateLabelSize)
            array.set(swingLowIsIntermediate, array.size(swingLowIsIntermediate) - 1, true)

    // save swing
    array.push(swingLows, swingLowPrice)
    array.push(swingLowLabels, swingLabel)
    array.push(swingLowIsLower, isLowerLow)
    array.push(swingLowIsIntermediate, false)  // can be filled in later if a higher low forms next


remove_short_term_swings()