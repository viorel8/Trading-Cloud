//Jo - A VWAP 

//@version=5
indicator("Trimeresurus Insularis", overlay=true, max_bars_back = 500)

var string SH1a      = 'Humdrum Color Select below'
var string SH1       = 'Ferrari Safari Color'
var string SH2       = 'Inflamed Gums Color'
var string SH3       = 'Eastern Green Mamba Color'
var string SH4       = 'African Zebra Color'
var string SH5       = 'Bubble Gum and Cocaine Color'
var string SH6       = 'Cherry Blossom Awesome Color'
var string SH7       = 'Rainbow Pony Color'

var string i_scheme  = input.string(SH1, 'Color Theme', options=[SH1a,SH1, SH2, SH3, SH4, SH5, SH6, SH7],   group = "Color Settings")
var bool i_invert    = input(false, 'Invert Colors',   group = "Color Settings")
Trans_par            = input.int(70, title="AVwap Transparency", minval=1,   group = "Color Settings")
plain                = input.color(#e6ecec, 'Humdrum Color Must be Select Above',   group = "Color Settings")
fill_c               = input.color(color.new(color.white,95), 'Fill Color',    group = "Color Settings")
fill_                = input.bool(false, 'Fill Max and Min',   group = "Color Settings")
Show_Aggr            = input.bool(false, 'Show Aggr AVWAP based on the selected Tickers',   group = "Color Settings")
aggr_c               = input.color(color.new(#9af704, 1), 'Aggr Color',    group = "Color Settings")

Show_t1              = input.bool(true, 'Include Ticker 01 Vwap', group = "Ticker 01")
Show_t2              = input.bool(true, 'Include Ticker 02 Vwap', group = "Ticker 02")
Show_t3              = input.bool(true, 'Include Ticker 03 Vwap', group = "Ticker 03")
Show_t4              = input.bool(true, 'Include Ticker 04 Vwap', group = "Ticker 04")
Show_t5              = input.bool(true, 'Include Ticker 05 Vwap', group = "Ticker 05")
Show_t6              = input.bool(true, 'Include Ticker 06 Vwap', group = "Ticker 06")
Show_t7              = input.bool(true, 'Include Ticker 07 Vwap', group = "Ticker 07")
Show_t8              = input.bool(true, 'Include Ticker 08 Vwap', group = "Ticker 08")

t1                   = input.symbol(title="Ticker 01",  defval = "BINANCE:BTCUSDT",     group = "Ticker 01")
t2                   = input.symbol(title="Ticker 02",  defval = "BINANCE:BTCUSDTPERP", group = "Ticker 02")
t3                   = input.symbol(title="Ticker 03",  defval = "BINANCE:BTCPERP",     group = "Ticker 03")
t4                   = input.symbol(title="Ticker 04",  defval = "BITSTAMP:BTCUSD",     group = "Ticker 04")
t5                   = input.symbol(title="Ticker 05",  defval = "BYBIT:BTCUSDT",       group = "Ticker 05")
t6                   = input.symbol(title="Ticker 06",  defval = "BYBIT:BTCUSD",        group = "Ticker 06")
t7                   = input.symbol(title="Ticker 05",  defval = "COINBASE:BTCUSDT",    group = "Ticker 07")
t8                   = input.symbol(title="Ticker 06",  defval = "COINBASE:BTCUSD",     group = "Ticker 08")

Show_all_sp          = input.bool(true, 'Show All above Selected Exchange AVWAPs or Only Show Max and Min', group = "AVWAP Settings")
Show_all_sel         = Show_all_sp == true ? false :true
Show_max_min         = Show_all_sp == true ? false :true
Show_labels          = input.bool(false, 'Show Labels', group = "AVWAP Settings")

inp_line_style       = input.string("Step", options = ["Step", "Line"], title = "Line Style", group = "AVWAP Settings")
Line_st              = inp_line_style == "Step" ? plot.style_stepline : inp_line_style == "Line" ? plot.style_line : na
inp_text_size        = input.string("Tiny", options = ["Tiny", "Small","Normal"], title = "Text Sizs", group = "AVWAP Settings")
TextSize             = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : inp_text_size == "Normal" ? size.normal : na

Show_weekly          = input.bool(true,  title='Show W Open Dots',        group = "Opening Dots")
Show_monthly         = input.bool(true,  title='Show M Open Dots',        group = "Opening Dots")
Show_yearly          = input.bool(true,  title='Show Y Open Dots',        group = "Opening Dots")

dot_w_c              = input.color(color.new(#f2f3f8, 0),  title = 'Weekly Dot Color' ,   group = "Opening Dots")
dot_m_c              = input.color(color.new(#0c54f0, 0),  title = 'Monthly Dot Color' ,  group = "Opening Dots")
dot_y_c              = input.color(color.new(#f2f3f8, 0),  title = 'Yearly Dot Color' ,   group = "Opening Dots")

[t1_volume_]         = request.security(t1, timeframe.period, expression=[volume])
[t2_volume_]         = request.security(t2, timeframe.period, expression=[volume])
[t3_volume_]         = request.security(t3, timeframe.period, expression=[volume])
[t4_volume_]         = request.security(t4, timeframe.period, expression=[volume])
[t5_volume_]         = request.security(t5, timeframe.period, expression=[volume])
[t6_volume_]         = request.security(t6, timeframe.period, expression=[volume])
[t7_volume_]         = request.security(t5, timeframe.period, expression=[volume])
[t8_volume_]         = request.security(t6, timeframe.period, expression=[volume])

[wo1,wc1,wl1,wh1,wc1a]     = request.security(syminfo.tickerid, 'W', expression  = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
[mo1,mc11,ml1,mh1,mc1a]    = request.security(syminfo.tickerid, 'M', expression  = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
[yo1,yc11,yl1,yh1,yc1a]    = request.security(syminfo.tickerid, '12M', expression= [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)

new_week        = wc1[1]   != wc1
new_month       = mc11[1]  != mc11
new_year        = yc11[1]  != yc11

plotchar(new_week  and Show_weekly  ? wo1 : na, title='Close', char='•', location=location.absolute, color=dot_w_c, offset=0, size=size.tiny)
plotchar(new_month and Show_monthly ? mo1 : na, title='Close', char='•', location=location.absolute, color=dot_m_c, offset=0, size=size.tiny)
plotchar(new_year  and Show_yearly  ? yo1 : na, title='Close', char='◎', location=location.absolute, color=dot_y_c, offset=0, size=size.tiny)

cr                   = input.price(0,  inline="Custom start vwap", confirm=true)
startCalculationDate = input.time(timestamp("20 Jan 2023"), "Start Calculation High",  inline="Custom start vwap", confirm=true)

pr                   = input.price(0,  inline="Custom stop vwap", confirm=true)
time_                = input.time(timestamp("20 Jan 2023"), "End Calculation High", inline="Custom stop vwap", confirm=true)
endCalculationDate = time_ < startCalculationDate ? time : time_

vwap_t1() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t1_volume_)
        array.push(volArray, t1_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt1 = vwap_t1()

vwap_t2() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t2_volume_)
        array.push(volArray, t2_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt2 = vwap_t2()

vwap_t3() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t3_volume_)
        array.push(volArray, t3_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt3 = vwap_t3()

vwap_t4() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t4_volume_)
        array.push(volArray, t4_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt4 = vwap_t4()

vwap_t5() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t5_volume_)
        array.push(volArray, t5_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt5 = vwap_t5()

vwap_t6() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t6_volume_)
        array.push(volArray, t6_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt6 = vwap_t6()

vwap_t7() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t7_volume_)
        array.push(volArray, t7_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt7 = vwap_t7()

vwap_t8() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t8_volume_)
        array.push(volArray, t8_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt8 = vwap_t8()

vwap_t9() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*volume)
        array.push(volArray, volume)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt9 = vwap_t9()

vp1 = Show_t1 ? vt1 :vt9
vp2 = Show_t2 ? vt2 :vt9
vp3 = Show_t3 ? vt3 :vt9
vp4 = Show_t4 ? vt4 :vt9
vp5 = Show_t5 ? vt5 :vt9
vp6 = Show_t6 ? vt6 :vt9
vp7 = Show_t7 ? vt7 :vt9
vp8 = Show_t8 ? vt8 :vt9

max = math.max(vp1,vp2,vp3,vp4,vp5,vp6,vp7,vp8)
min = math.min(vp1,vp2,vp3,vp4,vp5,vp6,vp7,vp8)
avr = math.avg(vp1,vp2,vp3,vp4,vp5,vp6,vp7,vp8)

var color[] c_gradients = array.new_color(na)

if barstate.isfirst
    if i_scheme == SH1a
        array.push(c_gradients, plain)

    else if i_scheme == SH1
        array.push(c_gradients, #ff0000)
        array.push(c_gradients, #ff2c00)
        array.push(c_gradients, #fe4200)
        array.push(c_gradients, #fc5300)
        array.push(c_gradients, #f96200)
        array.push(c_gradients, #f57000)
        array.push(c_gradients, #f07e00)
        array.push(c_gradients, #ea8a00)
        array.push(c_gradients, #e39600)
        array.push(c_gradients, #dca100)
        array.push(c_gradients, #d3ac00)
        array.push(c_gradients, #c9b600)
        array.push(c_gradients, #bfc000)
        array.push(c_gradients, #b3ca00)
        array.push(c_gradients, #a6d400)
        array.push(c_gradients, #97dd00)
        array.push(c_gradients, #86e600)
        array.push(c_gradients, #71ee00)
        array.push(c_gradients, #54f700)
        array.push(c_gradients, #1eff00)
    else if i_scheme == SH2
        array.push(c_gradients, #ff00d4)
        array.push(c_gradients, #f71fda)
        array.push(c_gradients, #ef2ee0)
        array.push(c_gradients, #e63ae5)
        array.push(c_gradients, #de43ea)
        array.push(c_gradients, #d44bee)
        array.push(c_gradients, #cb52f2)
        array.push(c_gradients, #c158f6)
        array.push(c_gradients, #b75df9)
        array.push(c_gradients, #ac63fb)
        array.push(c_gradients, #a267fe)
        array.push(c_gradients, #966bff)
        array.push(c_gradients, #8b6fff)
        array.push(c_gradients, #7e73ff)
        array.push(c_gradients, #7276ff)
        array.push(c_gradients, #6479ff)
        array.push(c_gradients, #557bff)
        array.push(c_gradients, #437eff)
        array.push(c_gradients, #2e80ff)
        array.push(c_gradients, #0082ff)
    else if i_scheme == SH3
        array.push(c_gradients, #fafa6e)
        array.push(c_gradients, #e0f470)
        array.push(c_gradients, #c7ed73)
        array.push(c_gradients, #aee678)
        array.push(c_gradients, #97dd7d)
        array.push(c_gradients, #81d581)
        array.push(c_gradients, #6bcc86)
        array.push(c_gradients, #56c28a)
        array.push(c_gradients, #42b98d)
        array.push(c_gradients, #2eaf8f)
        array.push(c_gradients, #18a48f)
        array.push(c_gradients, #009a8f)
        array.push(c_gradients, #00908d)
        array.push(c_gradients, #008589)
        array.push(c_gradients, #007b84)
        array.push(c_gradients, #0c707d)
        array.push(c_gradients, #196676)
        array.push(c_gradients, #215c6d)
        array.push(c_gradients, #275263)
        array.push(c_gradients, #2a4858)
    else if i_scheme == SH4
        array.push(c_gradients, #ffffff)
        array.push(c_gradients, #f0f0f0)
        array.push(c_gradients, #e1e1e1)
        array.push(c_gradients, #d2d2d2)
        array.push(c_gradients, #c3c3c3)
        array.push(c_gradients, #b5b5b5)
        array.push(c_gradients, #a7a7a7)
        array.push(c_gradients, #999999)
        array.push(c_gradients, #8b8b8b)
        array.push(c_gradients, #7e7e7e)
        array.push(c_gradients, #707070)
        array.push(c_gradients, #636363)
        array.push(c_gradients, #575757)
        array.push(c_gradients, #4a4a4a)
        array.push(c_gradients, #3e3e3e)
        array.push(c_gradients, #333333)
        array.push(c_gradients, #272727)
        array.push(c_gradients, #1d1d1d)
        array.push(c_gradients, #121212)
        array.push(c_gradients, #000000)
    else if i_scheme == SH5
        array.push(c_gradients, #ffffff)
        array.push(c_gradients, #f4f5fa)
        array.push(c_gradients, #e9ebf5)
        array.push(c_gradients, #dee1f0)
        array.push(c_gradients, #d3d7eb)
        array.push(c_gradients, #c8cde6)
        array.push(c_gradients, #bdc3e1)
        array.push(c_gradients, #b2b9dd)
        array.push(c_gradients, #a7b0d8)
        array.push(c_gradients, #9ca6d3)
        array.push(c_gradients, #919dce)
        array.push(c_gradients, #8594c9)
        array.push(c_gradients, #7a8bc4)
        array.push(c_gradients, #6e82bf)
        array.push(c_gradients, #6279ba)
        array.push(c_gradients, #5570b5)
        array.push(c_gradients, #4768b0)
        array.push(c_gradients, #385fab)
        array.push(c_gradients, #2557a6)
        array.push(c_gradients, #004fa1)
    else if i_scheme == SH6
        array.push(c_gradients, #ffffff)
        array.push(c_gradients, #fff4f1)
        array.push(c_gradients, #ffe9e3)
        array.push(c_gradients, #ffded6)
        array.push(c_gradients, #ffd3c8)
        array.push(c_gradients, #fec8bb)
        array.push(c_gradients, #fdbdae)
        array.push(c_gradients, #fbb2a1)
        array.push(c_gradients, #f8a794)
        array.push(c_gradients, #f69c87)
        array.push(c_gradients, #f3917b)
        array.push(c_gradients, #f0856f)
        array.push(c_gradients, #ec7a62)
        array.push(c_gradients, #e86e56)
        array.push(c_gradients, #e4634a)
        array.push(c_gradients, #df563f)
        array.push(c_gradients, #db4933)
        array.push(c_gradients, #d63a27)
        array.push(c_gradients, #d0291b)
        array.push(c_gradients, #cb0e0e)
    else if i_scheme == SH7
        array.push(c_gradients, #E50000)
        array.push(c_gradients, #E6023B)
        array.push(c_gradients, #E70579)
        array.push(c_gradients, #E908B7)
        array.push(c_gradients, #E00BEA)
        array.push(c_gradients, #A70DEB)
        array.push(c_gradients, #6E10ED)
        array.push(c_gradients, #3613EE)
        array.push(c_gradients, #162DEF)
        array.push(c_gradients, #1969F1)
        array.push(c_gradients, #1CA4F2)
        array.push(c_gradients, #1FDFF4)
        array.push(c_gradients, #22F5D2)
        array.push(c_gradients, #25F69C)
        array.push(c_gradients, #28F867)
        array.push(c_gradients, #2CF933)
        array.push(c_gradients, #5DFA2F)
        array.push(c_gradients, #96FC32)
        array.push(c_gradients, #CDFD35)
        array.push(c_gradients, #FFF938)

    if i_invert
        array.reverse(c_gradients)

f_rescale(_src, _min, _max) =>
    var int _size = array.size(c_gradients) - 1
    int _colorStep = int(_size * (_src - _min)) / int(math.max(_max - _min, 10e-10))
    _colorStep := _colorStep > _size ? _size : _colorStep < 0 ? 0 : _colorStep
    int(_colorStep)

f_colGrad(_src, _min, _max) =>
    array.get(c_gradients, f_rescale(_src, _min, _max))

rsi = ta.rsi(close, 377)
[_, rsiUpperBand, rsiLowerBand] = ta.bb(rsi, 1400, 2.618)
color c_rsi = f_colGrad(rsi, rsiLowerBand, rsiUpperBand)




Hide_right        = time > endCalculationDate and time > startCalculationDate ? color.new(#080808, 100)  : c_rsi


plot(Show_max_min and Show_all_sel ? max :na, "max", linewidth=1, color=Hide_right, style=Line_st, transp=Trans_par)
plot(Show_max_min and Show_all_sel ? min :na, "min", linewidth=1, color=Hide_right, style=Line_st, transp=Trans_par)
plot(Show_Aggr ? avr :na, "min", linewidth=1, color=aggr_c, style=Line_st, transp=Trans_par)

p1 = plot(max , "max", linewidth=1, color=color.new(#080808, 100), style=Line_st)
p2 = plot(min , "min", linewidth=1, color=color.new(#080808, 100), style=Line_st)

gil_innn = fill_ ? fill_c : color.new(#080808, 100)
Hide_right_fill   = time > endCalculationDate and time > startCalculationDate ? color.new(#080808, 100)  : gil_innn
fill(p1, p2, color=Hide_right_fill)

plot(Show_t1 and Show_all_sp ? vt1 :na, "t1",  linewidth=1, color=Hide_right, transp=Trans_par, style=Line_st)
plot(Show_t2 and Show_all_sp ? vt2 :na, "t2",  linewidth=1, color=Hide_right, transp=Trans_par, style=Line_st)
plot(Show_t3 and Show_all_sp ? vt3 :na, "t3",  linewidth=1, color=Hide_right, transp=Trans_par, style=Line_st)
plot(Show_t4 and Show_all_sp ? vt4 :na, "t4",  linewidth=1, color=Hide_right, transp=Trans_par, style=Line_st)
plot(Show_t5 and Show_all_sp ? vt5 :na, "t5",  linewidth=1, color=Hide_right, transp=Trans_par, style=Line_st)
plot(Show_t6 and Show_all_sp ? vt6 :na, "t6",  linewidth=1, color=Hide_right, transp=Trans_par, style=Line_st)
plot(Show_t7 and Show_all_sp ? vt7 :na, "t7",  linewidth=1, color=Hide_right, transp=Trans_par, style=Line_st)
plot(Show_t8 and Show_all_sp ? vt8 :na, "t8",  linewidth=1, color=Hide_right, transp=Trans_par, style=Line_st)

lab1a = Show_labels and Show_t1 ? label.new(bar_index+3,vt1,text=str.tostring(t1)+ "  |  " + str.tostring(vt1,format.mintick) ,style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = c_rsi):na
label.delete(lab1a[1])

lab2a = Show_labels and Show_t2 ? label.new(bar_index+3,vt2,text=str.tostring(t2)+ "  |  " + str.tostring(vt2,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = c_rsi):na
label.delete(lab2a[1])

lab3a = Show_labels and Show_t3 ? label.new(bar_index+3,vt3,text=str.tostring(t3)+ "  |  " + str.tostring(vt3,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = c_rsi):na
label.delete(lab3a[1])

lab4a = Show_labels and Show_t4 ? label.new(bar_index+3,vt4,text=str.tostring(t4)+ "  |  " + str.tostring(vt4,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = c_rsi):na
label.delete(lab4a[1])

lab5a = Show_labels and Show_t5 ? label.new(bar_index+3,vt5,text=str.tostring(t5)+ "  |  " + str.tostring(vt5,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = c_rsi):na
label.delete(lab5a[1])

lab6a = Show_labels and Show_t6 ? label.new(bar_index+3,vt6,text=str.tostring(t6)+ "  |  " + str.tostring(vt6,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = c_rsi):na
label.delete(lab6a[1])

lab7a = Show_labels and Show_t7 ? label.new(bar_index+3,vt7,text=str.tostring(t7)+ "  |  " + str.tostring(vt7,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = c_rsi):na
label.delete(lab7a[1])

lab8a = Show_labels and Show_t8 ? label.new(bar_index+3,vt8,text=str.tostring(t8)+ "  |  " + str.tostring(vt8,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = c_rsi):na
label.delete(lab8a[1])