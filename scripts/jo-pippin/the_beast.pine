//Jo
//@version=5
indicator('The Beast', overlay=true, max_bars_back=500)

import FFriZz/BoxLine_Lib/1 as obj


//Theme Light Dark

dark_light          = input.string("Light", options = ["Dark", "Light", "Custom"], title = "Theme", confirm=true,  group ='Theme')
custom_text_col     = input.color(color.new(#f70808, 0),title="Custom Text color", group = "Custom Color")
custom_line_col     = input.color(color.new(#f70808, 0),title="Custom Line color", group = "Custom Color")
custom_fvg_col      = input.color(color.new(#f70808, 0),title="Custom FVG color", group = "Custom Color")
custom_IB_col       = input.color(color.new(#f70808, 0),title="Custom IB color", group = "Custom Color")
custom_wick_col     = input.color(color.new(#f70808, 0),title="Custom Wick color", group = "Custom Color")
custom_dot_col      = input.color(color.new(#f70808, 0),title="Custom Wick color", group = "Custom Color")

text_col_theme      = dark_light == "Dark" ? color.new(#123a55, 0) : dark_light == "Light" ? color.new(#9598a1, 0) : dark_light == "Custom" ? custom_text_col : na
line_col_theme      = dark_light == "Dark" ? color.new(#123a55, 50) : dark_light == "Light" ? color.new(#9598a1, 70) : dark_light == "Custom" ? custom_line_col : na
fvg_col_theme       = dark_light == "Dark" ? color.new(#faf9f9, 0) : dark_light == "Light" ? color.new(#131722, 0) : dark_light == "Custom" ? custom_fvg_col : na
IB_col_theme        = dark_light == "Dark" ? color.new(#123a55, 85) : dark_light == "Light" ? color.new(#9598a1, 90) : dark_light == "Custom" ? custom_IB_col : na
Wick_col_theme      = dark_light == "Dark" ? color.new(#123a55, 85) : dark_light == "Light" ? color.new(#9598a1, 85) : dark_light == "Custom" ? custom_wick_col : na
dot_col_theme       = dark_light == "Dark" ? color.new(#123a55, 0) : dark_light == "Light" ? color.new(#9598a1, 0) : dark_light == "Custom" ? custom_dot_col : na

label_shift         = input.int (8,  'Shift Labels right/left',       minval=1, maxval=30000,  group ='Global')
label_lines_right   = input.int (8,  'Shift Lines Right',       minval=1, maxval=30000,  group ='Global')
fib_ext             = input(title='Extend Lines', defval=1,  group ='Global')
fib_zone            = input.int (1,  'Level line Width',       minval=1, maxval=300,  group ='Global')
inp_text_size       = input.string("Tiny", options = ["Tiny", "Small","Normal"], title = "Label Text Size",  group ='Global')
TextSize            = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : inp_text_size == "Normal" ? size.normal : na

//symbol info
symInfoCheck        = input.bool(title='Show Symbol Info', defval=true, group='symbol settings')
layoutCheck         = input.bool(title='Show Layout Name', defval=true, group='symbol settings')
datef               = str.tostring(dayofmonth(time_close)) + '/' + str.tostring(month(time_close)) + '/' + str.tostring(year(time_close))
symInfo             = datef + ' | ' + syminfo.prefix + ' | ' + syminfo.ticker + ' | ' + timeframe.period + (timeframe.isminutes ? 'M' : na)
symVPosition        = input.string('bottom', 'Symbol Vertical Position', options=['top', 'middle', 'bottom'], group='symbol settings')
symHPosition        = input.string('center', 'Symbol Horizontal Position', options=['left', 'center', 'right'], group='symbol settings')
s_symInfo           = input.string('small', 'Text Size Symbol/Layout', options=['tiny', 'small', 'normal', 'large', 'huge', 'auto'], group='symbol settings')
string ST_1         = "Layout Text"
string ST_2         = ""
string textInput1   = input.string(ST_1,     "Text 1")
string textInput2   = ST_2

string infoBoxYPosInput = input.string('top', 'Layout Vertical Position', options=['top', 'middle', 'bottom'], group='symbol settings')
string infoBoxXPosInput = input.string('right', 'Layout Horizontal Position', options=['left', 'center', 'right'], group='symbol settings')
int    heightInput      = input.int(3,          "Height Layout ", minval = 1, maxval = 100, group='symbol settings')
int    widthInput       = input.int(6,          "Width Layout", minval = 1, maxval = 100,  group='symbol settings')

FVG_on_off          = input.bool(true,'Show FVG', group = "FVG")
delete_filled_gaps  = input.bool(true,'Delete FVG when Completely filled', group = "FVG")
fvg_mitigation      = input.bool(true,'Reduce Gap Size as it is Being Mitigated', group = "FVG")
fvg_w               = input.int(6,'FVG Width', group = "FVG")
FVG_count           = input.int(100,'FVG Display Count', group = "FVG")

plot_candle         = input.bool(true,'Plot Wicks from the below Exchanges', group = "Candle Wicks")
show_t1             = input.bool(true, 'BINANCE:BTCUSDT', group = "Candle Wicks")
show_t2             = input.bool(true, 'BYBIT:BTCUSDT.P', group = "Candle Wicks")
show_t3             = input.bool(true, 'BINANCE:BTCPERP', group = "Candle Wicks")
show_t4             = input.bool(true, 'BINANCE:BTCUSDTPERP', group = "Candle Wicks")
show_t5             = input.bool(false, 'BYBIT:BTCUSD', group = "Candle Wicks")
show_t6             = input.bool(false, 'COINBASE:BTCUSDT', group = "Candle Wicks")
show_t7             = input.bool(false, 'KUCOIN:BTCUSDT', group = "Candle Wicks")
show_t8             = input.bool(false, 'OKX:BTCUSDT', group = "Candle Wicks")
show_t11            = input.bool(false, 'BITFINEX:BTCUSD', group = "Candle Wicks")
show_t12            = input.bool(false, 'POLONIEX:BTCUSDT', group = "Candle Wicks")
show_t13            = input.bool(false, 'BITMEX:XBTUSDT', group = "Candle Wicks")

show_labels         = input(title='Show H/L Price Labels', defval=true,  group ='Pivot Lines')
perc_               = input.bool(true,'Show Percentage between HL',  group ='Pivot Lines')
show_high           = input(title='Show high line', defval=true, group ='Pivot Lines')
show_Low            = input(title='Show Low line', defval=true,  group ='Pivot Lines')
line_width          = input.int (1,  'HL Line Width',       minval=1, maxval=4,  group ='Pivot Lines')
top_line_c          = line_col_theme
bot_line_c          = line_col_theme

show_Mid            = input(title='Show 50% Fib Point', defval=false,  group ='Fibs')
Show_mid_lab        = input(title='Show 50% Fib Label', defval=false,  group ='Fibs')
show_fibs           = input.bool(false, 'Show 0.618 and 0.382 Fib Points',  group ='Fibs')
show_fib_lab        = input(title='Show 0.618 and 0.382 Fib Labels', defval=false,  group ='Fibs')
show_fibs_outside   = input.bool(false, 'Show -0.618 and 0.618 Fib points',  group ='Fibs')
show_fib_lab_out    = input(title='Show -0.618 and 0.618 Fib Labels', defval=false,  group ='Fibs')


show_openingR       = input.string("Entire Week", options = ["Only on Monday", "Entire Week", "None","Tue-Sun"], title = "Show Monday Opening Range on", group = "Monday Settings")
Show_mday_OR        = show_openingR == "Tue-Sun" ? dayofweek == dayofweek.tuesday or dayofweek == dayofweek.wednesday or dayofweek == dayofweek.thursday or dayofweek == dayofweek.friday or dayofweek == dayofweek.saturday or dayofweek == dayofweek.sunday : show_openingR == "Only on Monday" ? dayofweek == dayofweek.monday : show_openingR == "Entire Week" ? dayofweek == dayofweek.monday or dayofweek == dayofweek.tuesday or dayofweek == dayofweek.wednesday or dayofweek == dayofweek.thursday or dayofweek == dayofweek.friday or dayofweek == dayofweek.saturday or dayofweek == dayofweek.sunday: na
dont_show_or        = show_openingR == "None" ? false :true
i_open              = input.bool(true, 'Plot Weekly Open Dots', group = "Monday Settings")

Mon_lines           = line_col_theme
Opening_R           = IB_col_theme

show_volume_gra     = input.bool(false, 'Show gradient volume candles', group = "Volume Candles")
customUpColorT      = input.color(color.new(#0683f1, 0), "Up Color of gradient vol candles", group = "Volume Candles")
customDownColorT    = input.color(color.new(#f82104, 0), "Down Color of gradient vol candles", group = "Volume Candles")
length              = input.int(400, "Volume Lookback Period", 2, group = "Volume Candles")
show_mpoc           = input.bool(true, 'Show weekly Max vol candle LTF Poc', group = "Volume Candles")
show_mvol           = input.bool(true, 'Show Max weekly vol markers', group = "Volume Candles")

week_bars_back      = ta.barssince(ta.change(time("W")))
ltf_poc_s           = input.string("BINANCE:BTCUSDTPERP", options = ["BYBIT:BTCUSDT", "BINANCE:BTCUSDT","BINANCE:BTCUSDTPERP", "CURRENT TICKER"], title = "LTF POC Volume source", group = "Volume Candles")
ltf_poc             = ltf_poc_s  == "BINANCE:BTCUSDTPERP" ? "BINANCE:BTCUSDTPERP" : ltf_poc_s  == "BYBIT:BTCUSDT" ? "BYBIT:BTCUSDT" : ltf_poc_s  == "BINANCE:BTCUSDT" ? "BINANCE:BTCUSDT" : ltf_poc_s  == "CURRENT TICKER" ? syminfo.tickerid : na
[vol_s]             = request.security(ltf_poc, timeframe.period, expression=[volume])
[yo,yotime]         = request.security(syminfo.tickerid, "W", expression=[open,time], lookahead=barmerge.lookahead_on)

show_Line_B         = input.bool(false, 'Show Anchored Weekly Line', group = "Weekly Anchored Trendline")
line_c              = line_col_theme
inp_line_style_TR   = input.string("Dotted", options = ["Dotted", "Solid", "Dashed"], title = "Line Style", group = "Weekly Anchored Trendline")
Line_st_TR          = inp_line_style_TR  == "Solid" ? line.style_solid : inp_line_style_TR  == "Dotted" ? line.style_dotted : inp_line_style_TR  == "Dashed" ? line.style_dashed : na
ext_l               = input.string("Trim Line", options = ["Extend Line Right", "Trim Line"], title = "Line Style", group = "Weekly Anchored Trendline")
Line_ex             = ext_l  == "Trim Line" ? extend.none : ext_l  == "Extend Line Right" ? extend.right : na
dec                 = input.int(3,          title = "Decimal Points"   , minval=1, maxval =3                                      ,     group = "Elements")
c_bg                = color.new(color.black, 100)

//Decimals
d =  dec  == 1 ? "#.#"   : 
     dec  == 2 ? "#.##"  : 
     dec  == 3 ? "#.###" : na

//Monday Anchored
new_period(p) => p and na(p[1])
sm = time(timeframe.period, "0000-0000:2")
var float c = close[1]

if new_period(sm)
    c := close   
if sm
    c := close

new_period2(p2) => p2 and na(p2[1])
sm2 = time(timeframe.period, "0000-0000:1")
var float c2 = close

if new_period2(sm2)
    c2 := time   
if sm2
    c2 := close     

mon_open_bar = ta.barssince(sm2)
mon_end_bar  = ta.barssince(sm)    

hide_right_oi        = time > sm  ? color.new(color.green, 0)   : color.new(color.yellow, 0) 


line_n = show_Line_B ? line.new(bar_index[mon_open_bar],c2,bar_index[mon_end_bar],c,color=color.new(color.green,100),width = 1, extend = extend.right, style = Line_st_TR):na
line.delete(line_n[1])

kkk = line.get_price(line_n,bar_index[1])

line_n1 = show_Line_B ? line.new(bar_index[mon_end_bar],c,bar_index[1],kkk,color=line_col_theme,width = 1, style = Line_st_TR):na
line.delete(line_n1[1])



















//HTF Vol input week 
arr = array.new_float(0)
for i = 1 to week_bars_back by 1

	array.push(arr,vol_s[i])

first_Highest       = array.max(arr, 0)
first_Highest_index = array.lastindexof(arr, first_Highest)

//ltf Vol input
currentTimeframe = timeframe.in_seconds(timeframe.period) / 60

dynTf = currentTimeframe <= 30 ? "1" : currentTimeframe > 30 and currentTimeframe <= 180 ? "5" :
 currentTimeframe > 180  and currentTimeframe <= 480  ? "15" : currentTimeframe  > 480 and currentTimeframe <= 1440 ? "60" :
 currentTimeframe > 1440 and currentTimeframe <= 4320 ? "120" : currentTimeframe > 4320 ? "240" : na

ltfStats() =>

    vol = na(volume) == false ? volume : 0

    [close, vol]

[ltfSrc, ltfVolume]
 = request.security_lower_tf(ltf_poc, dynTf, ltfStats())

maxVolume = array.max(ltfVolume,0)
indexOfMaxVolume = array.indexof(ltfVolume, maxVolume)
maxVol = array.size(ltfSrc) > 0 ? array.get(ltfSrc, indexOfMaxVolume) : na

ltf_poca = show_mpoc        ? line.new(bar_index[first_Highest_index+1], maxVol[first_Highest_index+1], bar_index[first_Highest_index+1]+6, maxVol[first_Highest_index+1], color=line_col_theme , width=1,style = line.style_solid):na
line.delete(ltf_poca[1])

//Vol Candle Marker week
vol_candle_marker_week = show_mvol  ? label.new(bar_index[first_Highest_index+1], low[first_Highest_index+1], text='▲', color=color.new(color.black,100), style=label.style_label_up, textcolor=text_col_theme, size=size.tiny):na
label.delete(vol_candle_marker_week[1])
vol_candle_marker_week2 = show_mvol  ? label.new(bar_index[first_Highest_index+1], high[first_Highest_index+1], text='▼', color=color.new(color.black,100), style=label.style_label_down, textcolor=text_col_theme, size=size.tiny):na
label.delete(vol_candle_marker_week2[1])




trans_p             = color.new(color.black,100)
bearFvg_c           = fvg_col_theme

[low_t1,high_t1,open_t1,close_t1,t1_volume]     = request.security("BINANCE:BTCUSDT",              timeframe.period, [low,high,open,close,volume]) 
[low_t2,high_t2,open_t2,close_t2,t2_volume]     = request.security("BYBIT:BTCUSDT.P",              timeframe.period, [low,high,open,close,volume]) 
[low_t3,high_t3,open_t3,close_t3,t3_volume]     = request.security("BINANCE:BTCPERP",              timeframe.period, [low,high,open,close,volume]) 
[low_t4,high_t4,open_t4,close_t4,t4_volume]     = request.security("BINANCE:BTCUSDTPERP",          timeframe.period, [low,high,open,close,volume]) 
[low_t5,high_t5,open_t5,close_t5]     = request.security("BYBIT:BTCUSD",                 timeframe.period, [low,high,open,close])
[low_t6,high_t6,open_t6,close_t6]     = request.security("COINBASE:BTCUSDT",             timeframe.period, [low,high,open,close])
[low_t7,high_t7,open_t7,close_t7]     = request.security("KUCOIN:BTCUSDT",               timeframe.period, [low,high,open,close])
[low_t8,high_t8,open_t8,close_t8]     = request.security("OKX:BTCUSDT",                  timeframe.period, [low,high,open,close])
[low_t11,high_t11,open_t11,close_t11] = request.security("BITFINEX:BTCUSD",              timeframe.period, [low,high,open,close])
[low_t12,high_t12,open_t12,close_t12] = request.security("POLONIEX:BTCUSDT",             timeframe.period, [low,high,open,close])
[low_t13,high_t13,open_t13,close_t13] = request.security("BITMEX:XBTUSDT",               timeframe.period, [low,high,open,close])

a1 = show_t1 ? low_t1 : low
a2 = show_t2 ? low_t2 : low
a3 = show_t3 ? low_t3 : low
a4 = show_t4 ? low_t4 : low
a5 = show_t5 ? low_t5 : low
a6 = show_t6 ? low_t6 : low
a7 = show_t7 ? low_t7 : low
a8 = show_t8 ? low_t8 : low
a11 = show_t11 ? low_t11 : low
a12 = show_t12 ? low_t12 : low
a13 = show_t13 ? low_t13 : low

b1 = show_t1 ? high_t1 : high
b2 = show_t2 ? high_t2 : high
b3 = show_t3 ? high_t3 : high
b4 = show_t4 ? high_t4 : high
b5 = show_t5 ? high_t5 : high
b6 = show_t6 ? high_t6 : high
b7 = show_t7 ? high_t7 : high
b8 = show_t8 ? high_t8 : high
b11 = show_t11 ? high_t11 : high
b12 = show_t12 ? high_t12 : high
b13 = show_t13 ? high_t13 : high

low_s   = math.min(a1, a2, a3, a4, a5, a6, a7, a8,  a11, a12, a13)
high_s  = math.max(b1, b2, b3, b4, b5, b6, b7, b8,   b11, b12, b13)
close_s = math.avg(close_t1, close_t2, close_t3, close_t4, close_t5, close_t6, close_t7, close_t8,   close_t11, close_t12, close_t13)
open_s  = math.avg(open_t1, open_t2, open_t3, open_t4, open_t5, open_t6, open_t7, open_t8,  open_t11, open_t12, open_t13)

date_top            = input.time(0,title ='Top Line Left Anchor',   confirm = true, group ='Elements')
date_bot            = input.time(0,title ='Bottom Line Left Anchor',confirm = true, group ='Elements')

leftborder_top      = timenow - time < timenow - date_top
leftborder_bot      = timenow - time < timenow - date_bot 
rightborder         = barstate.islast

max = float(na)
max := not leftborder_top ? na : na(max[1]) ? high_s : max[1]
barsSinceLastHigh = int(na)
barsSinceLastHigh := not leftborder_top ? na : na(barsSinceLastHigh[1]) ? 0 : barsSinceLastHigh + 1

min = float(na)
min := not leftborder_bot ? na : na(min[1]) ? low_s : min[1]
barsSinceLastLow = int(na)
barsSinceLastLow := not leftborder_bot ? na : na(barsSinceLastLow[1]) ? 0 : barsSinceLastLow + 1

if high_s > max
    max := high_s
    barsSinceLastHigh := 0
    barsSinceLastHigh

if low_s < min
    min := low_s
    barsSinceLastLow := 0
    barsSinceLastLow

lastHigh = rightborder ? max[1] : na
lastLow = rightborder  ? min[1] : na

//Fib calc
mid_price_ = max  - min
six_six          = max  - 0.66 * mid_price_
six_one_eight    = max  - 0.618 * mid_price_
three_eight_two  = max  - 0.382 * mid_price_
three_four_one   = max  - 0.341 * mid_price_
//Fibs outside
minus_0618       = max  - -0.618 * mid_price_
plus_1618        = max  - 1.618 * mid_price_

Percent = (close - max) / (min - max)

[ATH_,LOW_]     = request.security(syminfo.tickerid, '12M', expression=[high[2],low[1]], lookahead=barmerge.lookahead_on)

Percent_ath_low = (close - ATH_) / (LOW_ - ATH_)
Percent_ath_low2 = (close - LOW_) / (ATH_ - LOW_)

percentage_range(value, minimum, maximum) =>
    math.min(math.max(value, minimum), maximum)

range_value    = percentage_range(Percent, 0.48, 0.52)
range_value618 = percentage_range(Percent, 0.618, 0.66)
range_value382 = percentage_range(Percent, 0.382, 0.334)


range50     =  range_value == Percent ? color.blue :range_value618 ==  Percent ? color.yellow : range_value382 == Percent ? color.yellow : text_col_theme    

running_fib = perc_ ? label.new(bar_index, (six_one_eight+six_six)/2, text =str.tostring(Percent,  d) + '%', style=label.style_label_left,color =color.new(color.black,100),textcolor =range50, size=TextSize,textalign= text.align_left):na
label.delete(running_fib[1])

plot(show_high ? max : na, color=top_line_c, style=plot.style_stepline,  title='High', linewidth = line_width)
plot(show_Low  ? min : na, color= bot_line_c, style=plot.style_stepline, title='Low', linewidth = line_width)

mid_line = show_Mid ? line.new(bar_index+label_lines_right, (min+max)/2, bar_index[fib_ext]+label_lines_right, (min+max)/2, color=line_col_theme,  width=fib_zone):na
line.delete(mid_line[1])
top_line_price_label = show_labels and show_high ? label.new(bar_index+label_shift, max, text = "PH | $" + str.tostring(max,format.mintick), style=label.style_label_left,color =color.new(color.black,100),textcolor =text_col_theme, size=TextSize):na
label.delete(top_line_price_label[1])
mid_line_price_label = show_labels and show_Mid and Show_mid_lab ? label.new(bar_index+label_shift, (max+min)/2, text = "0.500 | $" + str.tostring((max+min)/2,format.mintick), style=label.style_label_left,color =color.new(color.black,100),textcolor =text_col_theme, size=TextSize):na
label.delete(mid_line_price_label[1])
bot_line_price_label = show_labels and show_Low ? label.new(bar_index+label_shift, min, text = "PL | $" + str.tostring(min,format.mintick), style=label.style_label_left,color =color.new(color.black,100),textcolor =text_col_theme, size=TextSize):na
label.delete(bot_line_price_label[1])

//Inside fibs
//fib 66
fib_line66 = show_fibs ? line.new(bar_index+label_lines_right, six_six, bar_index[fib_ext]+label_lines_right, six_six, color=line_col_theme,  width=fib_zone):na
line.delete(fib_line66[1])
//fib 341
fib_line341 = show_fibs ? line.new(bar_index+label_lines_right, three_four_one, bar_index[fib_ext]+label_lines_right, three_four_one, color=line_col_theme,  width=fib_zone):na
line.delete(fib_line341[1])
//fib 618
fib_1 = show_fib_lab ? label.new(bar_index+label_shift, (six_one_eight+six_six)/2, text ="GP | $" + str.tostring((six_one_eight+six_six)/2,format.mintick), style=label.style_label_left,color =color.new(color.black,100),textcolor =text_col_theme, size=TextSize):na
label.delete(fib_1[1])
fib_line1 = show_fibs ? line.new(bar_index+label_lines_right, six_one_eight, bar_index[fib_ext]+label_lines_right, six_one_eight, color=line_col_theme,  width=fib_zone):na
line.delete(fib_line1[1])
//fib 382
fib_2 = show_fib_lab ? label.new(bar_index+label_shift, (three_eight_two+three_four_one)/2, text = "GP | $" + str.tostring((three_eight_two+three_four_one)/2,format.mintick), style=label.style_label_left,color =color.new(color.black,100),textcolor =text_col_theme, size=TextSize):na
label.delete(fib_2[1])
fib_line2 = show_fibs ? line.new(bar_index+label_lines_right, three_eight_two, bar_index[fib_ext]+label_lines_right, three_eight_two, color=line_col_theme,  width=fib_zone):na
line.delete(fib_line2[1])

//Outside fibs
minus_0618_line = show_fibs_outside ? line.new(bar_index+label_lines_right, minus_0618, bar_index[fib_ext]+label_lines_right, minus_0618, color=line_col_theme,  width=fib_zone):na
line.delete(minus_0618_line[1])
//fib -0.618
minus_0618_label = show_fib_lab_out ? label.new(bar_index+label_shift, minus_0618, text ="-0.618 | $" + str.tostring(minus_0618,format.mintick), style=label.style_label_left,color =color.new(color.black,100),textcolor =text_col_theme, size=TextSize):na
label.delete(minus_0618_label[1])

plus_0618_line = show_fibs_outside ? line.new(bar_index+label_lines_right, plus_1618, bar_index[fib_ext]+label_lines_right, plus_1618, color=line_col_theme,  width=fib_zone):na
line.delete(plus_0618_line[1])
//fib -0.618
plus_0618_label = show_fib_lab_out ? label.new(bar_index+label_shift, plus_1618, text ="1.618 | $" + str.tostring(plus_1618,format.mintick), style=label.style_label_left,color =color.new(color.black,100),textcolor =text_col_theme, size=TextSize):na
label.delete(plus_0618_label[1])

//Volume for last N periods
var int [] pastVol = array.new_int(length)
for i = 0 to length - 1
    array.set(pastVol, i, int(volume[i]))

//Heatmap color assignments
upColor   = color.from_gradient(volume, array.min(pastVol), array.max(pastVol), na, customUpColorT)
downColor = color.from_gradient(volume, array.min(pastVol), array.max(pastVol), na, customDownColorT)

//Plot high vol candles
plotcandle(show_volume_gra ? open_s:na, high_s, low_s, close_s, "Volume Heatmap Candlestick Colors", true ? close >= open ? upColor : downColor : color.rgb(0, 0, 0, 100), true ? close >= open ? upColor : downColor : color.rgb(0, 0, 0, 100), bordercolor=true ? close >= open ? upColor : downColor : color.rgb(0, 0, 0, 100))

[dc1,dl,dh,day_open,dc]    = request.security(syminfo.tickerid, 'D', expression=[close[1],low,high,open,close], lookahead=barmerge.lookahead_on)
[wo,wc1,wl,wh,wc]      = request.security(syminfo.tickerid, 'W', expression=[open, close[1],low,high,close], lookahead=barmerge.lookahead_on)

new_day     = wc1[1]  != wc1

//Monday Outlines
transparent = color.new(color.orange, 100)

var datePrev = 0
var H = 0.0
var L = 0.0

date = time('D')
newDay1 = date != datePrev
datePrev := date

bcolor = dayofweek == dayofweek.monday ? Mon_lines : transparent

H := newDay1 or high_s > H ? high_s[0] : H
L := newDay1 or low_s  < L ? low_s[0]  : L

pH = plot(H, title='High', style=plot.style_stepline, linewidth=1, color=bcolor)
pL = plot(L, title='Low' , style=plot.style_stepline, linewidth=1, color=bcolor)

Show_Monday_Warning_Color_Hide = dayofweek == dayofweek.thursday ? color.white : transparent
is_monday = dayofweek == dayofweek.monday

float monday_high = 0
float monday_low  = 0

monday_high := is_monday ? dh : monday_high[1]
monday_low  := is_monday ? dl : monday_low[1]

//////////////// IB Mon-Tue///////////
replace_= timeframe.period == "15" ? "10" : timeframe.period == "20" ? "10" : timeframe.period == "30" ? "10" : timeframe.period == "60" ? "20" : timeframe.period == "10" ? "10" : "5"

[l10,h10]    = request.security(syminfo.tickerid, replace_, expression=[low,high])

getIB(session_times) =>
    in_session  = time(replace_, session_times)
    var ib_high = 0.0
    var ib_low  = 10e10
    if in_session
        if not in_session[1]
            ib_high := h10
            ib_low  := l10
            ib_low
        else
            ib_high := math.max(h10, ib_high)
            ib_low  := math.min(l10, ib_low)
            ib_low
    [in_session, ib_high, ib_low]

[in_day_session, ib_high, ib_low] = getIB('0000-0005:2')

/// IB 
IB_hide_col     = dayofweek == Show_mday_OR ? transparent : Opening_R
day_ib_start    = plot(true and Show_mday_OR ? ib_high : na, title='IB High Line', color=transparent, linewidth=1, style=plot.style_stepline)
day_ib_end      = plot(true and Show_mday_OR ? ib_low  : na, title='IB Low Line' , color=transparent, linewidth=1, style=plot.style_stepline)
fill(day_ib_start, day_ib_end, color=IB_hide_col, title='IB Background')

/// Weekly Dots
plotchar(new_day  and i_open  ? wo : na, title='Close', char='●', location=location.absolute, color=dot_col_theme, offset=0, size=size.tiny)
plotcandle(plot_candle ? open_s:na, high_s, low_s, close_s, title="High Low Candle",  bordercolor=trans_p, color = trans_p, wickcolor=Wick_col_theme)

width = 0
height = 0    
dayofweek_text_function(t) =>
    switch dayofweek(t, "America/New_York")
        1 => "SUNDAY"
        2 => "MONDAY"
        3 => "TUESDAY"
        4 => "WEDNESDAY"
        5 => "THURSDAY"
        6 => "FRIDAY"
        7 => "SATURDAY"
        
symWatermark = table.new(symVPosition + '_' + symHPosition, 5, 5)
if symInfoCheck == true
    table.cell(symWatermark, 0, 1, symInfo + ' | ' + str.tostring(dayofweek_text_function(time)), width, height, text_col_theme, text_size=s_symInfo, bgcolor=c_bg)

var table watermark = table.new(infoBoxYPosInput + "_" + infoBoxXPosInput, 1, 1)

if barstate.islast and layoutCheck
    varip bool changeText = true
    changeText := not changeText
    string txt = str.length(textInput2) != 0 and changeText ? textInput2 : textInput1
    table.cell(watermark, 0, 0, txt, widthInput, heightInput, text_col_theme, text_size = s_symInfo, bgcolor = c_bg)

//FVG Starts
var line[] aBull = array.new<line>()
var line[] aBear = array.new<line>()
bearFvg = high_s < low_s[2] and FVG_on_off and true 
bullFvg = low_s  > high_s[2] and FVG_on_off and true
fvgC = bullFvg ? fvg_col_theme : bearFvg_c

fvgEdit(aBull,aBear,count) =>
    
    for s = 0 to 1
        line[] aLine = aBull
        int aSize = array.size(aBull)
        
        switch s
            1 => aSize := array.size(aBear), aLine := aBear
        
        if aSize > 0
            for i = aSize - 1 to 0
                getLine = array.get(aLine,i)
                y1 = line.get_y1(getLine)
                y2 = line.get_y2(getLine)
                cross = low_s < y2
                crossAdj = low_s < y1
                
                switch s
                    1 => cross := high_s > y2, crossAdj := high_s > y1

                if fvg_mitigation and crossAdj and delete_filled_gaps
                    switch s
                        0 => line.set_y1(getLine,low_s)
                        1 => line.set_y1(getLine,high_s)
                if delete_filled_gaps and cross
                    line.delete(array.remove(aLine,i))
    
        if barstate.islast
            if aSize > count
                line.delete(array.pop(aLine))
                    
if bullFvg 
    array.unshift(aBull,
     line.new(bar_index - 1, low_s, bar_index - 1, high_s[2], width = fvg_w, color = fvgC)) 
if bearFvg 
    array.unshift(aBear, line.new(bar_index - 1, high_s, bar_index - 1, low_s[2], width = fvg_w, color = fvgC)) 

//Fun Call     
fvgEdit(aBull,aBear,FVG_count)     
     
bear_index = ta.barssince(bearFvg)
bull_index = ta.barssince(bullFvg)