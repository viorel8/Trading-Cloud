// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Jo-Pippin

//@version=5
indicator('Yearly Levels', overlay=true)

inp_text_size2  = input.string("Tiny", options = ["Tiny", "Small"], title = "Label Size", group = "Global Settings")
TextSize_Labels = inp_text_size2 == "Tiny" ? size.tiny : inp_text_size2 == "Small" ? size.small : na
Shift2          = input.int(90, title ="Label Positioning Yearly Levels", minval=1, group = "Global Settings")
Shifta          = input.int(90, title ="Line Shift right", minval=1, group = "Global Settings")
Shift3          = Shifta * 5000000

tc_inv          = color.new(color.black,0)
text_c          = color.new(#171718, 0)
tc_labe__a      = input.color(color.new(#0f0f0f, 0), title = "Label Color", group = "Global Settings")
w_col_y         = input.color(color.new(#101111, 0),title='Line Color', group = "Global Settings")
i_open_c        = input.color(color.new(#0683f8, 0),  'Yearly Open Marker Color', group = "Global Settings")
b_b_lines       = input.int(100,  'Line Length',  minval=1, maxval=400, group = "Global Settings")
inp_ln_style    = input.string("Solid", options = ["Solid", "Dotted","Dashed"], title = "Line Style", group = "Global Settings")
inp_ln_style2   = inp_ln_style == "Solid" ? line.style_solid : inp_ln_style == "Dotted" ? line.style_dotted: inp_ln_style == "Dashed" ? line.style_dashed : na
line_width      = input.int(1, 'Line Width', minval=1, maxval=400, group = "Global Settings")

show_price      = input(title ='Show Price Labels', defval=true, group = "Global Settings")
show_one_to_one = input(title ='Show yOpen-pyOpen 1 to 1 extensions to both sides.', defval=true, group = "Global Settings")
show_medians    = input(title ='Show yOpen-pyOpen mean', defval=true, group = "Global Settings")
show_medians2   = input(title ='Show pyOpen-ppyOpen mean', defval=true, group = "Global Settings")
show_medians3   = input(title ='Show yOpen-ppyOpen mean', defval=true, group = "Global Settings")
show_medians4   = input(title ='Show ppyOpen-pppyOpen mean', defval=true, group = "Global Settings")
show_yOpen      = input(title ='Show Current Yearly Open', defval=true, group = "Global Settings")
show_yEQ        = input(title ='Show Current Yearly EQ', defval=false, group = "Global Settings")
show_pyEQ       = input(title ='Show Previous Yearly EQ', defval=false, group = "Global Settings")
show_pyOpen     = input(title ='Show Previous Yearly Open', defval=true, group = "Global Settings")
show_ppyOpen    = input(title ='Show Previous -1 Yearly Open', defval=true, group = "Global Settings")
show_pppyOpen   = input(title ='Show Previous -2 Yearly Open', defval=true, group = "Global Settings")
show_ppppyOpen  = input(title ='Show Previous -3 Yearly Open', defval=true, group = "Global Settings")
show_yearly     = input.bool(true, 'Show Yearly Open Markers',confirm=true, group = "Global Settings")

//Yearly Open Dots
[yo,yc1]      = request.security(syminfo.tickerid, '12M', expression=[open, close[1]], lookahead=barmerge.lookahead_on)
new_day1      = yc1[1]  != yc1
plotchar(new_day1 and show_yearly ? yo : na, title='Close', char='●', location=location.absolute, color=i_open_c, offset=0, size=size.tiny)

//-----------YEARLY SETTINGS----------//
pwOpen    = request.security(syminfo.tickerid, 'W',   open[1], lookahead=barmerge.lookahead_on)
pqOpen    = request.security(syminfo.tickerid, '3M',  open[1], lookahead=barmerge.lookahead_on)
qOpen     = request.security(syminfo.tickerid, '3M',  open,    lookahead=barmerge.lookahead_on)
pyOpen    = request.security(syminfo.tickerid, '12M', open[1], lookahead=barmerge.lookahead_on)
ppyOpen   = request.security(syminfo.tickerid, '12M', open[2], lookahead=barmerge.lookahead_on)
pppyOpen  = request.security(syminfo.tickerid, '12M', open[3], lookahead=barmerge.lookahead_on)
ppppyOpen = request.security(syminfo.tickerid, '12M', open[4], lookahead=barmerge.lookahead_on)
yOpen     = request.security(syminfo.tickerid, '12M', open,    lookahead=barmerge.lookahead_on)
yHigh     = request.security(syminfo.tickerid, '12M', high,    lookahead=barmerge.lookahead_on)
yLow      = request.security(syminfo.tickerid, '12M', low,    lookahead=barmerge.lookahead_on)
pyHigh    = request.security(syminfo.tickerid, '12M', high[1],    lookahead=barmerge.lookahead_on)
pyLow     = request.security(syminfo.tickerid, '12M', low[1],    lookahead=barmerge.lookahead_on)

////////////////////////-------DEVIATION CALCS START------------////////////////////////
yOpen_pyOpen_Deviation       = ((yOpen - pyOpen) * 2) + pyOpen
yOpen_pyOpen_Deviation_top   = ((yOpen - pyOpen) * -1) + pyOpen
pyOpen_ppyOpen_Deviation     = ((pyOpen - ppyOpen) * 2) + ppyOpen
pyOpen_ppyOpen_Deviation_top = ((pyOpen - ppyOpen) * -1) + ppyOpen

////////////////////////-------MEANS CALCS START------------////////////////////////
pqOpen_to_qOpen_mean_price     = math.avg(pqOpen,qOpen)
pyOpen_to_yOpen_mean_price     = math.avg(pyOpen,yOpen)
ppyOpen_to_pyOpen_mean_price   = math.avg(ppyOpen,pyOpen)
yOpen_to_ppyOpen_mean_price    = math.avg(ppyOpen,yOpen)
ppyOpen_to_pppyOpen_mean_price = math.avg(pppyOpen,ppyOpen)
yearlyEQ  = math.avg(yHigh,yLow)
pyearlyEQ = math.avg(pyHigh,pyLow)

///////////////////-------PERCENTAGE FROM CALCS START------////////////////////////
Percentage_qOpen                          = (close - qOpen) / qOpen * 100
Percentage_pqOpen                         = (close - pqOpen) / pqOpen * 100
Percentage_yOpen                          = (close - yOpen) / yOpen * 100
Percentage_pyOpen                         = (close - pyOpen) / pyOpen * 100
Percentage_ppyOpen                        = (close - ppyOpen) / ppyOpen * 100
Percentage_pppyOpen                       = (close - pppyOpen) / pppyOpen * 100
Percentage_ppppyOpen                      = (close - ppppyOpen) / ppppyOpen * 100

Percentage_pqOpen_to_qOpen_mean_price     = (close - pqOpen_to_qOpen_mean_price) / pqOpen_to_qOpen_mean_price * 100
Percentage_pyOpen_to_yOpen_mean_price     = (close - pyOpen_to_yOpen_mean_price) / pyOpen_to_yOpen_mean_price * 100
Percentage_ppyOpen_to_yOpen_mean_price    = (close - yOpen_to_ppyOpen_mean_price) / yOpen_to_ppyOpen_mean_price * 100
Percentage_ppyOpen_to_pppyOpen_mean_price = (close - ppyOpen_to_pppyOpen_mean_price) / ppyOpen_to_pppyOpen_mean_price * 100
Percentage_ppyOpen_to_pyOpen_mean_price   = (close - ppyOpen_to_pyOpen_mean_price) / ppyOpen_to_pyOpen_mean_price * 100
Percentage_yOpen_pyOpen_deviation_bot     = (close - yOpen_pyOpen_Deviation) / yOpen_pyOpen_Deviation * 100
Percentage_yOpen_pyOpen_deviation_top     = (close - yOpen_pyOpen_Deviation_top) / yOpen_pyOpen_Deviation_top * 100
Percentage_pyOpen_ppyOpen_deviation_bot   = (close - pyOpen_ppyOpen_Deviation) / pyOpen_ppyOpen_Deviation * 100
Percentage_pyOpen_ppyOpen_deviation_top   = (close - pyOpen_ppyOpen_Deviation_top) / pyOpen_ppyOpen_Deviation_top * 100

percentage_range(value, minimum, maximum) =>
    math.min(math.max(value, minimum), maximum)
    
truncate(_number, _decimalPlaces) =>
    _factor = math.pow(10, _decimalPlaces)
    int(_number * _factor) / _factor    

/////////YEARLY RELATED TRIGGERS AND LINES////////
yEQ_price_label     = show_price ? ("  |  "+str.tostring(truncate(yearlyEQ,2))) :na
yEQ_price_line      = show_yEQ and yOpen and true and barstate.islast ? line.new(time+Shift3, yearlyEQ, time + (100000*Shift2), yearlyEQ, color=w_col_y   , xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width):na 
line.delete(yEQ_price_line[1])
yEQ_label           = show_yEQ and yOpen and true and true ? label.new(time + (100000*Shift2), yearlyEQ , str.tostring(year) + " Yearly EQ" + yEQ_price_label, xloc=xloc.bar_time ,  style=label.style_label_left,color=color.new(color.white,100), textcolor=tc_labe__a, size=TextSize_Labels):na
label.delete(yEQ_label[1])

pyEQ_price_label    = show_price ? ("  |  "+str.tostring(truncate(pyearlyEQ,2))) :na
pyEQ_price_line     = show_pyEQ and yOpen and true and barstate.islast ? line.new(time+Shift3, pyearlyEQ, time + + (100000*Shift2), pyearlyEQ, color=w_col_y   , xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width):na 
line.delete(pyEQ_price_line[1])
pyEQ_label          = show_pyEQ and yOpen and true and true ? label.new(time + (100000*Shift2), pyearlyEQ , str.tostring(year-1) + " Yearly EQ" + pyEQ_price_label, xloc=xloc.bar_time ,  style=label.style_label_left,color=color.new(color.white,100), textcolor=tc_labe__a, size=TextSize_Labels):na
label.delete(pyEQ_label[1])

yopen_price_label    = show_price ? ("  |  "+str.tostring(truncate(yOpen,2))) :na
range_value_yOpen    = percentage_range(Percentage_yOpen, -2000, +2000)
yOpen_BG_color       =  range_value_yOpen == Percentage_yOpen ? w_col_y : na
yOpen_TX_color       =  range_value_yOpen == Percentage_yOpen ? tc_inv : text_c
yOpen_TX_color2      =  range_value_yOpen == Percentage_yOpen ? tc_labe__a : na
yOpen_price_line     = show_yOpen and yOpen and true and barstate.islast ? line.new(time+Shift3, yOpen, time + (100000*Shift2), yOpen, color=yOpen_BG_color   , xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width):na 
line.delete(yOpen_price_line[1])
yOpen_label          = show_yOpen and yOpen and true and true ? label.new(time + (100000*Shift2), yOpen , str.tostring(year) + " Yearly Open" + yopen_price_label, xloc=xloc.bar_time ,  style=label.style_label_left,color=color.new(color.white,100), textcolor=yOpen_TX_color2, size=TextSize_Labels):na
label.delete(yOpen_label[1])

pyopen_price_label   = show_price ? ("  |  "+str.tostring(truncate(pyOpen,2))) :na
range_value_pyOpen   = percentage_range(Percentage_pyOpen, -2000, +2000)
pyOpen_BG_color      =  range_value_pyOpen == Percentage_pyOpen ? w_col_y : na
pyOpen_TX_color      =  range_value_pyOpen == Percentage_pyOpen ? tc_inv : text_c
pyOpen_TX_color2     =  range_value_pyOpen == Percentage_pyOpen ? tc_labe__a : na
pyOpen_price_line    = show_pyOpen and pyOpen and true and barstate.islast ? line.new(time+Shift3, pyOpen, time + (100000*Shift2), pyOpen, color=pyOpen_BG_color       , xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width) : na
line.delete(pyOpen_price_line[1])
pyOpen_label         = show_pyOpen and pyOpen and true and true ? label.new(time + (100000*Shift2), pyOpen , str.tostring(year -1) + " Yearly Open" + pyopen_price_label, xloc=xloc.bar_time ,  style=label.style_label_left, color=color.new(color.white,100),textcolor=pyOpen_TX_color2, size=TextSize_Labels):na
label.delete(pyOpen_label[1])

ppyopen_price_label  = show_price ? ("  |  "+str.tostring(truncate(ppyOpen,2))) :na
range_value_ppyOpen  = percentage_range(Percentage_ppyOpen, -2000, +2000)
ppyOpen_BG_color     =  range_value_ppyOpen == Percentage_ppyOpen ? w_col_y : na
ppyOpen_TX_color     =  range_value_ppyOpen == Percentage_ppyOpen ? tc_inv : text_c
ppyOpen_TX_color2    =  range_value_ppyOpen == Percentage_ppyOpen ? tc_labe__a : na
ppyOpen_price_line   = show_ppyOpen and ppyOpen and true and barstate.islast ? line.new(time+Shift3, ppyOpen, time + (100000*Shift2), ppyOpen, color=ppyOpen_BG_color       , xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width) : na
line.delete(ppyOpen_price_line[1])
ppyOpen_label        = show_ppyOpen and ppyOpen and true and true ? label.new(time + (100000*Shift2), ppyOpen , str.tostring(year -2) + " Yearly Open" + ppyopen_price_label, xloc=xloc.bar_time ,  style=label.style_label_left, color=color.new(color.white,100),textcolor=ppyOpen_TX_color2, size=TextSize_Labels):na
label.delete(ppyOpen_label[1])


pppyopen_price_label  = show_price ? ("  |  "+str.tostring(truncate(pppyOpen,2))) :na
range_value_pppyOpen  = percentage_range(Percentage_pppyOpen, -2000, +2000)
pppyOpen_BG_color     = range_value_pppyOpen == Percentage_pppyOpen ? w_col_y : na
pppyOpen_TX_color     = range_value_pppyOpen == Percentage_pppyOpen ? tc_inv : text_c
pppyOpen_TX_color2    = range_value_pppyOpen == Percentage_pppyOpen ? tc_labe__a : na
pppyOpen_price_line   = show_pppyOpen and pppyOpen and true and barstate.islast ? line.new(time+Shift3, pppyOpen, time + (100000*Shift2), pppyOpen, color=pppyOpen_BG_color       , xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width) : na
line.delete(pppyOpen_price_line[1])
pppyOpen_label        = show_pppyOpen and pppyOpen and true and true ? label.new(time + (100000*Shift2), pppyOpen , str.tostring(year -3) + " Yearly Open" + pppyopen_price_label, xloc=xloc.bar_time ,  style=label.style_label_left, color=color.new(color.white,100),textcolor=pppyOpen_TX_color2, size=TextSize_Labels):na
label.delete(pppyOpen_label[1])

ppppyopen_price_label = show_price ? ("  |  "+str.tostring(truncate(ppppyOpen,2))) :na
range_value_ppppyOpen = percentage_range(Percentage_ppppyOpen, -2000, +2000)
ppppyOpen_BG_color    = range_value_ppppyOpen == Percentage_ppppyOpen ? w_col_y : na
ppppyOpen_TX_color    = range_value_ppppyOpen == Percentage_ppppyOpen ? tc_inv : text_c
ppppyOpen_TX_color2   = range_value_ppppyOpen == Percentage_ppppyOpen ? tc_labe__a : na
ppppyOpen_price_line  = show_ppppyOpen and ppppyOpen and true and barstate.islast ? line.new(time+Shift3, ppppyOpen, time + (100000*Shift2), ppppyOpen, color=ppppyOpen_BG_color       , xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width) : na
line.delete(ppppyOpen_price_line[1])
ppppyOpen_label       =show_ppppyOpen and ppppyOpen and true and true ? label.new(time + (100000*Shift2), ppppyOpen , str.tostring(year -4) + " Yearly Open" + ppppyopen_price_label, xloc=xloc.bar_time ,  style=label.style_label_left, color=color.new(color.white,100),textcolor=ppppyOpen_TX_color2, size=TextSize_Labels):na
label.delete(ppppyOpen_label[1])

pyOpen_to_yOpen_mean_price_label_rep      = show_price ? ("  |  "+str.tostring(truncate(pyOpen_to_yOpen_mean_price,2))) :na
range_value_pyOpen_to_yOpen_mean_price    = percentage_range(Percentage_pyOpen_to_yOpen_mean_price, -2000, +2000)
pyOpen_to_yOpen_mean_price_BG_color       = range_value_pyOpen_to_yOpen_mean_price == Percentage_pyOpen_to_yOpen_mean_price ? w_col_y : na
pyOpen_to_yOpen_mean_price_TX_color       = range_value_pyOpen_to_yOpen_mean_price == Percentage_pyOpen_to_yOpen_mean_price ? w_col_y : text_c
pyOpen_to_yOpen_mean_price_TX_color2      = range_value_pyOpen_to_yOpen_mean_price == Percentage_pyOpen_to_yOpen_mean_price ? tc_labe__a : na
pyOpen_to_yOpen_mean_price_price_line     = show_medians and  pyOpen_to_yOpen_mean_price and true and barstate.islast ? line.new(time+Shift3, pyOpen_to_yOpen_mean_price, time + (100000*Shift2), pyOpen_to_yOpen_mean_price, color=pyOpen_to_yOpen_mean_price_BG_color, xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width) : na
line.delete(pyOpen_to_yOpen_mean_price_price_line[1])
pyOpen_to_yOpen_mean_price_label          = show_medians and  pyOpen_to_yOpen_mean_price and true and true ? label.new(time + (100000*Shift2), pyOpen_to_yOpen_mean_price ,str.tostring(year-1) +  ' - '+ str.tostring(year ) +' mean'+pyOpen_to_yOpen_mean_price_label_rep, xloc=xloc.bar_time ,  style=label.style_label_left,color=color.new(color.white,100), textcolor=pyOpen_to_yOpen_mean_price_TX_color2, size=TextSize_Labels):na
label.delete(pyOpen_to_yOpen_mean_price_label[1])


ppyOpen_to_pyOpen_mean_price_label_rep    = show_price ? ("  |  "+str.tostring(truncate(ppyOpen_to_pyOpen_mean_price,2))) :na
range_value_ppyOpen_to_pyOpen_mean_price  = percentage_range(Percentage_ppyOpen_to_pyOpen_mean_price, -2000, +2000)
ppyOpen_to_pyOpen_mean_price_BG_color     = range_value_ppyOpen_to_pyOpen_mean_price == Percentage_ppyOpen_to_pyOpen_mean_price ? w_col_y : na
ppyOpen_to_pyOpen_mean_price_TX_color     = range_value_ppyOpen_to_pyOpen_mean_price == Percentage_ppyOpen_to_pyOpen_mean_price ? w_col_y : text_c
ppyOpen_to_pyOpen_mean_price_TX_color2    = range_value_ppyOpen_to_pyOpen_mean_price == Percentage_ppyOpen_to_pyOpen_mean_price ? tc_labe__a : na
ppyOpen_to_pyOpen_mean_price_price_line   = show_medians2 and  ppyOpen_to_pyOpen_mean_price and true and barstate.islast ? line.new(time+Shift3, ppyOpen_to_pyOpen_mean_price, time + (100000*Shift2), ppyOpen_to_pyOpen_mean_price, color=ppyOpen_to_pyOpen_mean_price_BG_color, xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width) : na
line.delete(ppyOpen_to_pyOpen_mean_price_price_line[1])
ppyOpen_to_pyOpen_mean_price_label        = show_medians2 and  ppyOpen_to_pyOpen_mean_price and true and true ? label.new(time + (100000*Shift2), ppyOpen_to_pyOpen_mean_price ,str.tostring(year-2) +  ' - '+ str.tostring(year -1) +' mean'+ppyOpen_to_pyOpen_mean_price_label_rep, xloc=xloc.bar_time ,  style=label.style_label_left,color=color.new(color.white,100), textcolor=ppyOpen_to_pyOpen_mean_price_TX_color2, size=TextSize_Labels):na
label.delete(ppyOpen_to_pyOpen_mean_price_label[1])

ppyOpen_to_yOpen_mean_price_label_rep      = show_price ? ("  |  "+str.tostring(truncate(yOpen_to_ppyOpen_mean_price,2))) :na
range_value_ppyOpen_to_yOpen_mean_price    = percentage_range(Percentage_ppyOpen_to_yOpen_mean_price, -2000, +2000)
ppyOpen_to_yOpen_mean_price_BG_color       =  range_value_ppyOpen_to_yOpen_mean_price == Percentage_ppyOpen_to_yOpen_mean_price ? w_col_y : na
ppyOpen_to_yOpen_mean_price_TX_color       =  range_value_ppyOpen_to_yOpen_mean_price == Percentage_ppyOpen_to_yOpen_mean_price ? w_col_y : text_c
ppyOpen_to_yOpen_mean_price_TX_color2      =  range_value_ppyOpen_to_yOpen_mean_price == Percentage_ppyOpen_to_yOpen_mean_price ? tc_labe__a : na
ppyOpen_to_yOpen_mean_price_price_line     = show_medians3 and  yOpen_to_ppyOpen_mean_price and true and barstate.islast ? line.new(time+Shift3, yOpen_to_ppyOpen_mean_price, time + (100000*Shift2), yOpen_to_ppyOpen_mean_price, color=ppyOpen_to_yOpen_mean_price_BG_color, xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width) : na
line.delete(ppyOpen_to_yOpen_mean_price_price_line[1])
ppyOpen_to_yOpen_mean_price_label          = show_medians3 and  yOpen_to_ppyOpen_mean_price and true and true ? label.new(time + (100000*Shift2), yOpen_to_ppyOpen_mean_price ,str.tostring(year-2) +  ' - '+ str.tostring(year) +' mean'+ppyOpen_to_yOpen_mean_price_label_rep, xloc=xloc.bar_time ,  style=label.style_label_left,color=color.new(color.white,100), textcolor=ppyOpen_to_yOpen_mean_price_TX_color2, size=TextSize_Labels):na
label.delete(ppyOpen_to_yOpen_mean_price_label[1])

ppyOpen_to_pppyOpen_mean_price_label_rep   = show_price ? ("  |  "+str.tostring(truncate(ppyOpen_to_pppyOpen_mean_price,2))) :na
range_value_ppyOpen_to_pppyOpen_mean_price = percentage_range(Percentage_ppyOpen_to_pppyOpen_mean_price, -2000, +2000)
ppyOpen_to_pppyOpen_mean_price_BG_color    = range_value_ppyOpen_to_pppyOpen_mean_price == Percentage_ppyOpen_to_pppyOpen_mean_price ? w_col_y : na
ppyOpen_to_pppyOpen_mean_price_TX_color    = range_value_ppyOpen_to_pppyOpen_mean_price == Percentage_ppyOpen_to_pppyOpen_mean_price ? w_col_y : text_c
ppyOpen_to_pppyOpen_mean_price_TX_color2   = range_value_ppyOpen_to_pppyOpen_mean_price == Percentage_ppyOpen_to_pppyOpen_mean_price ? tc_labe__a : na
ppyOpen_to_pppyOpen_mean_price_price_line  = show_medians4 and  ppyOpen_to_pppyOpen_mean_price and true and barstate.islast ? line.new(time+Shift3, ppyOpen_to_pppyOpen_mean_price, time + (100000*Shift2), ppyOpen_to_pppyOpen_mean_price, color=ppyOpen_to_pppyOpen_mean_price_BG_color, xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width) : na
line.delete(ppyOpen_to_pppyOpen_mean_price_price_line[1])
ppyOpen_to_pppyOpen_mean_price_label       = show_medians4 and  ppyOpen_to_pppyOpen_mean_price and true and true ? label.new(time + (100000*Shift2), ppyOpen_to_pppyOpen_mean_price ,str.tostring(year-3) +  ' - '+ str.tostring(year-2) +' mean'+ppyOpen_to_pppyOpen_mean_price_label_rep, xloc=xloc.bar_time ,  style=label.style_label_left,color=color.new(color.white,100), textcolor=ppyOpen_to_pppyOpen_mean_price_TX_color2, size=TextSize_Labels):na
label.delete(ppyOpen_to_pppyOpen_mean_price_label[1])


yOpen_pyOpen_Deviation_bot_price_label_rep = show_price ? ("  |  "+str.tostring(truncate(yOpen_pyOpen_Deviation,2))) :na
range_value_yOpen_pyOpen_Deviation         = percentage_range(Percentage_yOpen_pyOpen_deviation_bot, -2000, +2000)
yOpen_pyOpen_Deviation_BG_color            = range_value_yOpen_pyOpen_Deviation == Percentage_yOpen_pyOpen_deviation_bot ? w_col_y : na
yOpen_pyOpen_Deviation_TX_color            = range_value_yOpen_pyOpen_Deviation == Percentage_yOpen_pyOpen_deviation_bot ? tc_inv : text_c
yOpen_pyOpen_Deviation_TX_color2           = range_value_yOpen_pyOpen_Deviation == Percentage_yOpen_pyOpen_deviation_bot ? tc_labe__a : na
yOpen_pyOpen_Deviation_price_line          = show_one_to_one and yOpen_pyOpen_Deviation and true and barstate.islast ? line.new(time+Shift3,yOpen_pyOpen_Deviation, time + (100000*Shift2), yOpen_pyOpen_Deviation, color=yOpen_pyOpen_Deviation_BG_color     , xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width) : na
line.delete(yOpen_pyOpen_Deviation_price_line[1])
yOpen_pyOpen_Deviation_price_label         = show_one_to_one and yOpen_pyOpen_Deviation and true and true ? label.new(time + (100000*Shift2),yOpen_pyOpen_Deviation ,str.tostring(year-1) +  ' - '+ str.tostring(year ) +' 1 to 1'+yOpen_pyOpen_Deviation_bot_price_label_rep, xloc=xloc.bar_time ,  style=label.style_label_left,color=color.new(color.white,100), textcolor=yOpen_pyOpen_Deviation_TX_color2 , size=TextSize_Labels):na
label.delete(yOpen_pyOpen_Deviation_price_label[1])

yOpen_pyOpen_Deviation_top_price_label_rep = show_price ? ("  |  "+str.tostring(truncate(yOpen_pyOpen_Deviation_top,2))) :na
range_value_yOpen_pyOpen_Deviation_top     = percentage_range(Percentage_yOpen_pyOpen_deviation_top, -2000, +2000)
yOpen_pyOpen_Deviation_top_BG_color        = range_value_yOpen_pyOpen_Deviation_top == Percentage_yOpen_pyOpen_deviation_top ? w_col_y : na
yOpen_pyOpen_Deviation_top_TX_color        = range_value_yOpen_pyOpen_Deviation_top == Percentage_yOpen_pyOpen_deviation_top ? tc_inv : text_c
yOpen_pyOpen_Deviation_top_TX_color2       = range_value_yOpen_pyOpen_Deviation_top == Percentage_yOpen_pyOpen_deviation_top ? tc_labe__a : na
yOpen_pyOpen_Deviation_top_price_line      = show_one_to_one and yOpen_pyOpen_Deviation_top and true and barstate.islast ? line.new(time + Shift3,yOpen_pyOpen_Deviation_top, time + (100000*Shift2), yOpen_pyOpen_Deviation_top, color=yOpen_pyOpen_Deviation_top_BG_color   , xloc=xloc.bar_time, extend=extend.none, style=inp_ln_style2, width=line_width) : na
line.delete(yOpen_pyOpen_Deviation_top_price_line[1])
yOpen_pyOpen_Deviation_top_price_label     = show_one_to_one and yOpen_pyOpen_Deviation_top and true and true ? label.new(time + (100000*Shift2),yOpen_pyOpen_Deviation_top ,str.tostring(year-1) +  ' - '+ str.tostring(year ) +' 1 to 1'+yOpen_pyOpen_Deviation_top_price_label_rep, xloc=xloc.bar_time ,  style=label.style_label_left,color=color.new(color.white,100), textcolor=yOpen_pyOpen_Deviation_top_TX_color2  , size=TextSize_Labels):na
label.delete(yOpen_pyOpen_Deviation_top_price_label[1])

Alert_level_01 = ta.cross(close,yearlyEQ)
Alert_level_02 = ta.cross(close,pyearlyEQ)
Alert_level_03 = ta.cross(close,yOpen)
Alert_level_04 = ta.cross(close,pyOpen)
Alert_level_05 = ta.cross(close,ppyOpen)
Alert_level_06 = ta.cross(close,pppyOpen)
Alert_level_07 = ta.cross(close,ppppyOpen)
Alert_level_08 = ta.cross(close,pyOpen_to_yOpen_mean_price)
Alert_level_09 = ta.cross(close,yOpen_to_ppyOpen_mean_price)
Alert_level_10 = ta.cross(close,ppyOpen_to_pppyOpen_mean_price)
Alert_level_11 = ta.cross(close,ppyOpen_to_pyOpen_mean_price)
Alert_level_12 = ta.cross(close,yOpen_pyOpen_Deviation)
Alert_level_13 = ta.cross(close,yOpen_pyOpen_Deviation_top)

alertcondition(Alert_level_01 or Alert_level_02 or Alert_level_03 or Alert_level_04 or Alert_level_05 or Alert_level_06 or Alert_level_07 or Alert_level_08 or Alert_level_09 or Alert_level_10 or Alert_level_11 or Alert_level_12 or Alert_level_13, title='Alert Yearly Level', message='Yearly Level')