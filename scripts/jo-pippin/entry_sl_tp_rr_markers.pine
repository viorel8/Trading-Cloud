//Jo
//@version=5
indicator("Entry", overlay=true, max_bars_back = 500)


Show_labels     = input.bool(true, 'Show labels', group = "Settings")
Show_RR         = input.bool(true, 'Show RR', group = "Settings")

ler             = input.int(defval=80, title='Line extend right', group = "Settings")
textSizeIp      = input.string('Tiny', 'Price label size', ['Small', 'Tiny', 'Normal'], group = "Settings")
price           = textSizeIp =='Small'? size.small : textSizeIp =='Tiny'? size.tiny : size.normal 
textSizerr      = input.string('Large', 'RR label size', ['Small', 'Tiny', 'Normal', 'Large'], group = "Settings")
rr_size         = textSizerr =='Small'? size.small : textSizerr =='Tiny'? size.tiny : textSizerr =='Normal'? size.normal : textSizerr =='Large'? size.large :na

dec             = input.int(2, title = "Decimal Points"   , minval=1, maxval =3)

textCol         = input.color(#080808, 'Text Color', group = "Color")
line_c          = input.color(#080808, 'Line Color', group = "Color")

Show_stop       = input.bool(true, 'Stop',  confirm=true , group = "Trade")
Show_entry      = input.bool(true, 'Entry', confirm=true , group = "Trade")
Show_TP1        = input.bool(true, 'Tp1',   confirm=true , group = "Trade")
Show_TP2        = input.bool(true, 'Tp2',   confirm=true , group = "Trade")

Stop_price      = input.price(0, 'Stop'   ,      confirm=true, group = "SL/EN/TP")
Entry_price     = input.price(0, 'Entry'   ,     confirm=true, group = "SL/EN/TP")
TP1_price       = input.price(0, 'Take Profit',  confirm=true, group = "SL/EN/TP")
TP2_price       = input.price(0, 'Take Profit ', confirm=true, group = "TP2")

date1           = input.time(0,title ='Input Candle Date',confirm=true,group='Elements')
bartime         = int(ta.change(time))
bars            = (math.floor((timenow - date1) / bartime))-1

//Decimals
d =  dec  == 1 ? "#.#"   : 
     dec  == 2 ? "#.##"  : 
     dec  == 3 ? "#.###" : na

Risk                 = (Entry_price - Stop_price) / Entry_price
Reward               = ((TP1_price - Entry_price) / Entry_price)
RR_Ratio             = math.round(Reward / Risk, 2)

Stop_loss_label = Show_labels and Show_stop  ? label.new(bar_index[bars+1]+ler,Stop_price,"- SL | " + str.tostring(Stop_price,d),textcolor=textCol, color=color.new(color.black,100),  style=label.style_label_left, size=price) :na
label.delete(Stop_loss_label[1])

Entry_label = Show_labels and Show_entry  ? label.new(bar_index[bars+1]+ler,Entry_price, "- EN | " + str.tostring(Entry_price, d),textcolor=textCol, color=color.new(color.black,100),  style=label.style_label_left, size=price) :na
label.delete(Entry_label[1])

tp1_TP          = Show_TP2 == false ? "- TP | " : "- T1 | " 
TP1_label = Show_labels and Show_TP1  ? label.new(bar_index[bars+1]+ler,TP1_price,tp1_TP + str.tostring(TP1_price, d),textcolor=textCol, color=color.new(color.black,100),  style=label.style_label_left, size=price) :na
label.delete(TP1_label[1])

TP2_label = Show_labels and Show_TP2  ? label.new(bar_index[bars+1]+ler,TP2_price,"- T2 | " + str.tostring(TP2_price, d),textcolor=textCol, color=color.new(color.black,100),  style=label.style_label_left, size=price) :na
label.delete(TP2_label[1])


RR_label = Show_RR  ? label.new(bar_index[bars+1]+ler-2,TP1_price,'1:' + str.tostring(RR_Ratio, d),textcolor=textCol, color=color.new(color.black,100),  style=label.style_label_upper_left, size=rr_size) :na
label.delete(RR_label[1])