// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Jo

//@version=5
indicator("Multi-Source Max %change", shorttitle = "Multi-Source Max %change", overlay = true, max_lines_count = 500, max_boxes_count = 500, max_bars_back = 5000)


inp_ticker           = input.string("BTC OI", options = ["ETH OI", "BTC OI", "BNB OI", "ETC OI","DOGE OI","XRP OI","LTC OI","LINK OI", "AGGR BTC and ETH OI", "AGGR BTC and BNB OI",
                       "AGGR ETH and BNB OI", "AGGR ALL OI", "USDT %Change", "DAI %Change", "USDC %Change", "AGGR STABLECOIN %Change", "BTC DOMINANCE %Change", "AGGR BTC.D and BTC OI", 
                       "AGGR BTC.D and STABLECOINS","AGGR BTC OI and STABLECOINS","SPX","Nasdaq","DOW JONES 30 INDUSTRIAL","GOLD","EURUSD","EURGBP","USDJPY","AGGR FOREX"], 
                       title = "Input", group = "Element On/Off")

ticker_input         = inp_ticker == "BTC OI" ? "BTCUSDTPERP_OI + BTCPERP_OI" :
                       inp_ticker == "ETH OI" ? "ETHUSDTPERP_OI + ETHPERP_OI" : 
                       inp_ticker == "BNB OI" ? "BNBUSDTPERP_OI + BNBPERP_OI" : 
                       inp_ticker == "ETC OI" ? "ETCUSDTPERP_OI + ETCPERP_OI" : 
                       inp_ticker == "DOGE OI" ? "DOGEUSDTPERP_OI + DOGEPERP_OI" : 
                       inp_ticker == "XRP OI" ? "XRPUSDTPERP_OI + XRPPERP_OI" :
                       inp_ticker == "LTC OI" ? "LTCUSDTPERP_OI + LTCPERP_OI" : 
                       inp_ticker == "LINK OI" ? "LINKUSDTPERP_OI + LINKPERP_OI" :
                       inp_ticker == "AGGR BTC and BNB OI" ? "ETHUSDTPERP_OI + ETHPERP_OI + BNBUSDTPERP_OI + BNBPERP_OI" :
                       inp_ticker == "AGGR BTC and BNB OI" ? "BTCUSDTPERP_OI + BTCPERP_OI + BNBUSDTPERP_OI + BNBPERP_OI" :
                       inp_ticker == "AGGR BTC and ETH OI" ? "BTCUSDTPERP_OI + BTCPERP_OI + ETHUSDTPERP_OI + ETHPERP_OI" :
                       inp_ticker == "AGGR ALL OI" ? "BTCUSDTPERP_OI + BTCPERP_OI + ETHUSDTPERP_OI + ETHPERP_OI + BNBUSDTPERP_OI + BNBPERP_OI + ETCUSDTPERP_OI + ETCPERP_OI + DOGEUSDTPERP_OI + DOGEPERP_OI" :
                       inp_ticker == "USDT %Change" ? "USDT.D" :
                       inp_ticker == "DAI %Change" ? "DAI.D" :
                       inp_ticker == "USDC %Change" ? "USDC.D" :
                       inp_ticker == "AGGR STABLECOIN %Change" ? "USDC.D+USDT.D+DAI.D" :
                       inp_ticker == "BTC DOMINANCE %Change" ? "BTC.D" :
                       inp_ticker == "AGGR BTC.D and BTC OI" ? "BTC.D + BTCUSDTPERP_OI + BTCPERP_OI" :
                       inp_ticker == "AGGR BTC.D and STABLECOINS" ? "BTC.D + USDT.D" :
                       inp_ticker == "AGGR BTC OI and STABLECOINS" ? "BTCUSDTPERP_OI + BTCPERP_OI + USDT.D" :
                       inp_ticker == "SPX" ? "SP:SPX" :
                       inp_ticker == "Nasdaq" ? "NDX" :
                       inp_ticker == "DOW JONES 30 INDUSTRIAL" ? "DJIA" :
                       inp_ticker == "GOLD" ? "XAU" :
                       inp_ticker == "EURUSD" ? "EURUSD" :
                       inp_ticker == "EURGBP" ? "EURGBP" :
                       inp_ticker == "USDJPY" ? "USDJPY" :
                       inp_ticker == "USDJPY" ? "USDJPY+EURGBP+EURUSD" :na

show_info         = input.bool(true, "Show Info text", group = "Element On/Off")                        
show_largest_rise = input.bool(true, "Show Rise", group = "Element On/Off")                      
show_largest_fall = input.bool(true, "Show Fall", group = "Element On/Off")   
show_lables       = input.bool(true, "Show Labels", group = "Element On/Off")     

[oiO, oiH, oiL, oiC] = request.security(ticker_input,timeframe.period, expression=[open, high, low, close])
Instance             = input.int(0,  'This will sort from largest to smallest. 0 being the largest %change and 19 being the 19th largest %change.',  minval=0, maxval=19, group = "Element On/Off")
Bars_back            = input.int(4900,  'Bars Back',  minval=0, maxval=4990, group = "Element On/Off")
Zone_ext            = input.int(500,  'Bars Back',  minval=0, maxval=500, group = "Element On/Off")
inp_text_size        = input.string("Tiny", options = ["Tiny", "Small"], title = "Text Size", group = "Element On/Off")
TextSize             = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : na

border_c             = input.color(color.new(#fdfdfd, 80),'Zone Border Color', group = "Element On/Off")
Line_c               = input.color(color.new(#fcfcfc, 30),'Midline Color', group = "Element On/Off")
Text_c               = input.color(color.new(#c2c2c2, 17),'Text Color', group = "Element On/Off")
Rise_c               = input.color(color.new(#404867, 85),'Rise Zone Color', group = "Element On/Off")
Fall_c               = input.color(color.new(#404867, 85),'Fall Zone Color', group = "Element On/Off")

large_to_mid_text    = Instance == 0 ? "Instance 01 "  : 
                       Instance == 1 ? "Instance 02 "  : 
                       Instance == 2 ? "Instance 03 "  : 
                       Instance == 3 ? "Instance 04 "  : 
                       Instance == 4 ? "Instance 05 "  : 
                       Instance == 5 ? "Instance 06 "  : 
                       Instance == 6 ? "Instance 07 "  : 
                       Instance == 7 ? "Instance 08 "  : 
                       Instance == 8 ? "Instance 09 "  : 
                       Instance == 9 ? "Instance 10 "  : 
                       Instance == 10 ? "Instance 11 " : 
                       Instance == 11 ? "Instance 12 " : 
                       Instance == 12 ? "Instance 13 " : 
                       Instance == 13 ? "Instance 14 " : 
                       Instance == 14 ? "Instance 15 " : 
                       Instance == 15 ? "Instance 16 " : 
                       Instance == 16 ? "Instance 17 " : 
                       Instance == 17 ? "Instance 18 " : 
                       Instance == 18 ? "Instance 19 " : 
                       Instance == 19 ? "Instance 20 " : na

				   
arr = array.new_float(0)
for i = 1 to Bars_back by 1
	
	array.push(arr, (oiO[i]-oiC[i]))

first_Highest = array.max(arr, Instance)
First_Lowest = array.min(arr, Instance)

first_Highest_index = array.lastindexof(arr, first_Highest)
first_Lowest_index = array.lastindexof(arr, First_Lowest)

show_l = show_lables ? "▲ " + str.tostring(first_Highest_index)  :na
show_l2 = show_lables ? "▼ " + str.tostring(first_Lowest_index)  :na

High_box = show_largest_rise ?  box.new(bar_index[first_Highest_index+1], high[first_Highest_index+1], bar_index+Zone_ext, low[first_Highest_index+1], border_color=border_c, border_width=1,text_valign=text.align_top, bgcolor=Rise_c, text= show_l, text_size=TextSize,text_halign=text.align_right,text_color=Text_c) :na
box.delete(High_box[1])

Low_box = show_largest_fall ? box.new(bar_index[first_Lowest_index+1], high[first_Lowest_index+1], bar_index+Zone_ext, low[first_Lowest_index+1], border_color=border_c, border_width=1,text_valign=text.align_bottom, bgcolor=Fall_c, text=show_l2, text_size=TextSize,text_halign=text.align_right,text_color=Text_c):na
box.delete(Low_box[1])

vol_line =  show_largest_rise ? line.new(bar_index[first_Highest_index+1], hl2[first_Highest_index+1], bar_index+Zone_ext , hl2[first_Highest_index+1], color=Line_c, width=1,style=line.style_dotted):na
line.delete(vol_line[1])

vol_line_lowest = show_largest_fall ? line.new(bar_index[first_Lowest_index+1], hl2[first_Lowest_index+1], bar_index+Zone_ext , hl2[first_Lowest_index+1], color=Line_c, width=1,style=line.style_dotted):na
line.delete(vol_line_lowest[1])

i_align_1 = 'left'
i_align_2 = 'right'
var PercentBlock = table.new(position=position.top_center, columns=1, rows=3, border_width=1)

if barstate.islast and show_info
    table.cell(table_id=PercentBlock, column=0, row=1, text=large_to_mid_text + " | M" +  str.tostring(timeframe.period) + " | " + str.tostring(inp_ticker) + " largest candle fall/rise for the past " + str.tostring(Bars_back) + " bars" , text_color=Text_c, text_size=TextSize, bgcolor=color.new(color.black,100),text_halign=i_align_1)