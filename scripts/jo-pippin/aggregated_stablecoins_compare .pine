//@version=5
indicator('Log Stablecoins', overlay=true, max_bars_back=4000)

body_                = input.color(color.new(#080808, 100),   title = 'Candle body Color', group = "Color")
border_              = input.color(color.new(#1b255e, 1),    title = 'Candle border Color', group = "Color")
wick_                = input.color(color.new(#1b255e, 70),   title = 'Candle wick Color' , group = "Color")
rcol                 = input(color.rgb(9, 76, 131, 31), 'Bull Color', group = "Color")
scol                 = input(color.rgb(9, 76, 131, 31), 'Bear Color', group = "Color")
mcol                 = input(color.rgb(178, 181, 190, 100), 'Mid Line Color', group = "Color")
plot_stab            = input(title='Show Stablecoins', defval=false)
i_xw                 = input.float(600,    minval=0.1, maxval=2620, step=0.1,  title='Intensity BTC', group = "Settings")
i_xws                = input.float(1,    minval=0, maxval=2620, step=0.1,  title='Intensity Stablecoins', group = "Settings")
[o_,h_,l_,c_]        = request.security("BTCUSD", timeframe.period, [open,high,low,close])
[os_,hs_,ls_,cs_]    = request.security("USDT.D+USDC.D+DAI.D", timeframe.period, [open,high,low,close])

plotcandle(plot_stab ? os_:na/i_xws, hs_/i_xws, ls_/i_xws, cs_/i_xws,title='PlotCandle',color=body_ ,wickcolor=wick_ ,bordercolor=border_)
plotcandle(o_/i_xw, h_/i_xw, l_/i_xw, c_/i_xw,title='PlotCandle',color=body_ ,wickcolor=wick_ ,bordercolor=border_)

getBarIndexForTime(t) =>

    var int barindex_t = na
    if time[1] <= t and time >= t and na(barindex_t)
        barindex_t := bar_index
    barindex_t

int    startTimeInput = timestamp("2018-12-21")

srcinput = input(title='Source', defval=hlc3)
use1Dev = input.float(1.4, title = "Deviation Multiple 1", minval = 0.1)
use2Dev = input.float(2, title = "Deviation Multiple 2", minval = 0.1)

lstyle = input.string('Solid', title = 'Line Style', options = ['Solid', 'Dashed', 'Dotted'])
wid = input(defval=1, title='Line Width')
extendLines = input(title='Extend Lines', defval=false)

filldev = input(true, title = 'Fill Deviations')
fillin = input(false, title = 'Fill Inner Channel')
tr = input(89, title = 'Fill Transparency')

linestyle = lstyle == 'Solid'? line.style_solid : lstyle == 'Dashed'? line.style_dashed : line.style_dotted 

int    startTime = startTimeInput
int    len       = last_bar_index - getBarIndexForTime(startTime)
if len < 1
    runtime.error("There must be minimum one bar between two points.")

src = request.security(syminfo.tickerid, timeframe.period, math.log(srcinput))
extend = extendLines ? extend.right : extend.none
calcSlope(src, len) =>
    max_bars_back(src, 300)
    if not barstate.islast or len <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0
        for i = 0 to len - 1 by 1
            val = src[i]
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
            sumXY
        slope = (len * sumXY - sumX * sumY) / (len * sumXSqr - sumX * sumX)
        average = sumY / len
        intercept = average - slope * sumX / len + slope
        [slope, average, intercept]
[s, a, i] = calcSlope(src, len)
startPrice = i + s * (len - 1)
endPrice = i
var line baseLine = na
if na(baseLine) and not na(startPrice)
    baseLine := line.new(bar_index - len + 1, math.exp(startPrice), bar_index, math.exp(endPrice), width=wid, extend=extend, color=mcol, style = linestyle)
    baseLine
else
    line.set_xy1(baseLine, bar_index - len + 1, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)
    na
calcDev(src, len, slope, average, intercept) =>
    upDev = 0.0
    dnDev = 0.0
    stdDevAcc = 0.0
    dsxx = 0.0
    dsyy = 0.0
    dsxy = 0.0
    periods = len - 1
    daY = intercept + slope * periods / 2
    val = intercept
    for i = 0 to periods by 1
        price = high[i] - val
        if price > upDev
            upDev := price
            upDev
        price := val - low[i]
        if price > dnDev
            dnDev := price
            dnDev
        price := src[i]
        dxt = price - average
        dyt = val - daY
        price -= val
        stdDevAcc += price * price
        dsxx += dxt * dxt
        dsyy += dyt * dyt
        dsxy += dxt * dyt
        val += slope
        val
    stdDev = math.sqrt(stdDevAcc / (periods == 0 ? 1 : periods))
    pearsonR = dsxx == 0 or dsyy == 0 ? 0 : dsxy / math.sqrt(dsxx * dsyy)
    [stdDev, pearsonR, upDev, dnDev]



[stdDev, pearsonR, upDev, dnDev] = calcDev(src, len, s, a, i)
upperStartPrice1 = startPrice + (use1Dev*stdDev)
upperStartPrice2 = startPrice + (use2Dev * stdDev)
upperEndPrice1 = endPrice + (use1Dev * stdDev)
upperEndPrice2 = endPrice + (use2Dev * stdDev)

var line upper1 = na
var line upper2 = na

lowerStartPrice1 = startPrice + (use1Dev* -stdDev)
lowerStartPrice2 = startPrice + (use2Dev * -stdDev)
lowerEndPrice1 = endPrice + (use1Dev* -stdDev)
lowerEndPrice2 = endPrice + (use2Dev* -stdDev)
var line lower1 = na
var line lower2 = na

if na(upper2) and not na(upperStartPrice2)
    upper1 := line.new(bar_index - len + 1, math.exp(upperStartPrice1), bar_index, math.exp(upperEndPrice1), width=wid, extend=extend, color=color.new(color.black,100), style=linestyle)
    upper2 := line.new(bar_index - len + 1, math.exp(upperStartPrice2), bar_index, math.exp(upperEndPrice2), width=wid, extend=extend, color=color.new(color.black,100), style=linestyle)
    upper2
else
    line.set_xy1(upper1, bar_index - len + 1, upperStartPrice1)
    line.set_xy2(upper1, bar_index, upperEndPrice1)
    line.set_xy1(upper2, bar_index - len + 1, upperStartPrice2)
    line.set_xy2(upper2, bar_index, upperEndPrice2)
    
    na
if na(lower2) and not na(lowerStartPrice2)
    lower1 := line.new(bar_index - len + 1, math.exp(lowerStartPrice1), bar_index, math.exp(lowerEndPrice1), width=wid, extend=extend, color=color.new(color.black,100), style=linestyle)
    lower2 := line.new(bar_index - len + 1, math.exp(lowerStartPrice2), bar_index, math.exp(lowerEndPrice2), width=wid, extend=extend, color=color.new(color.black,100), style=linestyle)
    lower2
else
    line.set_xy1(lower1, bar_index - len + 1, lowerStartPrice1)
    line.set_xy2(lower1, bar_index, lowerEndPrice1)
    line.set_xy1(lower2, bar_index - len + 1, lowerStartPrice2)
    line.set_xy2(lower2, bar_index, lowerEndPrice2)
    na

if filldev
    linefill.new(upper1, upper2, color.new(rcol,tr))
    linefill.new(lower1, lower2, color.new(scol,tr))
else
    na
    
if fillin
    linefill.new(upper1, lower1, color.new(mcol,tr))
else
    na