// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Jo-Pippin

//@version=5
indicator("Drop and dragg Poc", overlay = true, max_bars_back = 500)

Alert_zone_spacing   = input.int(11,  'Alert Zone width',  minval=1, maxval=130, group = "Element On/Off")
show_mpoc            = input.bool(true, 'Show First POC (POC of the First Highest Volume Candle)', group = "Element On/Off")
show_labels          = input.bool(true, 'Show labels', group = "Element On/Off")
alert_line_col       = input.color(color.new(#eceff1, 100) ,'Alert zone line color', group = "Color")
alert_zone_bg        = input.color(color.new(#070707, 96) ,'Alert zone BG color', group = "Color")

hide_tl_top          = input.bool(false, 'Show top Trendline', group = "Element On/Off")
hide_tl_bot          = input.bool(false, 'Show bottom Trendline', group = "Element On/Off")
show_breaker         = input.bool(true, 'Show OB', group = "Element On/Off")
show_breakermd       = input.bool(true, 'Show OB 50% Line', group = "Element On/Off")

inp_line_style_poc   = input.string("Solid", options = ["Dotted", "Solid", "Dashed"], title = "Poc Line Style", group = "Element On/Off")
Line_st_poc          = inp_line_style_poc == "Solid" ? line.style_solid : inp_line_style_poc == "Dotted" ? line.style_dotted : inp_line_style_poc == "Dashed" ? line.style_dashed : na
inp_line_style_TR    = input.string("Dotted", options = ["Dotted", "Solid", "Dashed"], title = "Poc Line Style", group = "Element On/Off")
Line_st_TR           = inp_line_style_TR  == "Solid" ? line.style_solid : inp_line_style_TR  == "Dotted" ? line.style_dotted : inp_line_style_TR  == "Dashed" ? line.style_dashed : na
inp_line_style_OB    = input.string("Dotted", options = ["Dotted", "Solid", "Dashed"], title = "Poc Line Style", group = "Element On/Off")
Line_st_OB           = inp_line_style_OB == "Solid" ? line.style_solid : inp_line_style_OB == "Dotted" ? line.style_dotted : inp_line_style_OB == "Dashed" ? line.style_dashed : na
inp_text_size        = input.string("Tiny", options = ["Tiny", "Small"], title = "Label Text Size", group = "Element On/Off")
TextSize             = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : na

trendline_width      = input.int (1,   'Trendline Width',  minval=1, maxval=130, group = "Element On/Off")
breaker_back         = input.int (12,   'OB/Breaker Candles back to include',  minval=1, maxval=130, group = "Element On/Off")
date1                = input.time(0,title ='Input Candle Date',confirm=true,group='Elements')
candle_c             = input.color(color.new(#1c569c, 0)  ,'Candle Color', group = "Color")
mainpoc_c            = input.color(color.new(#404867, 0) ,'Poc Line Color', group = "Color")
Text_c               = input.color(color.new(#404867, 0) ,'Text Color', group = "Color")
Ref_c                = input.color(color.new(#afcff7, 50) ,'Refferance Line Color', group = "Color")
trendln_c            = input.color(color.new(#0c0c0c, 90) ,'Trendline Color', group = "Color")
breaker_c            = input.color(color.new(#eceef1, 100) ,'Breaker/OB Border Color', group = "Color")
ob_mid_c             = input.color(color.new(#404867, 0) ,'Breaker/OB Midline Color', group = "Color")
breaker_BG_c         = input.color(color.new(#0163f5, 85) ,'breaker BG Color', group = "Color")

//Current timeframe in minutes
currentTimeframe = timeframe.in_seconds(timeframe.period) / 60

//Dynamic timeframe
dynTf = currentTimeframe <= 30 ? "1" : currentTimeframe > 30 and currentTimeframe <= 180 ? "5" :
 currentTimeframe > 180 and currentTimeframe <= 480 ? "15" : currentTimeframe > 480 and currentTimeframe <= 1440 ? "60" :
  currentTimeframe > 1440 and currentTimeframe <= 4320 ? "120" : currentTimeframe > 4320 ? "240" : na


ltfStats() =>

    vol = na(volume) == false ? volume : 0

    [close, vol]

[ltfSrc, ltfVolume]
 = request.security_lower_tf(syminfo.tickerid, dynTf, ltfStats())

tpoArrSize = array.size(ltfSrc)
maxVolume = array.max(ltfVolume,0)
indexOfMaxVolume = array.indexof(ltfVolume, maxVolume)
maxVol = array.size(ltfSrc) > 0 ? array.get(ltfSrc, indexOfMaxVolume) : na

second_maxVolume = array.max(ltfVolume,1)
second_indexOfMaxVolume = array.indexof(ltfVolume, second_maxVolume)
second_maxVol = array.size(ltfSrc) > 0 ? array.get(ltfSrc, second_indexOfMaxVolume) : na


bartime = int(ta.change(time))

bars = (math.floor((timenow - date1) / bartime))-1

Poc_line  =  line.new(bar_index, maxVol[bars+1], bar_index+1+breaker_back-8, maxVol[bars+1], color=mainpoc_c , width=1,style=line.style_solid)
line.delete(Poc_line[1])

Poc_label =  label.new(bar_index+1+breaker_back-8, maxVol[bars+1], text="$" + str.tostring(maxVol[bars+1]), color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=size.tiny)
label.delete(Poc_label[1])

alert_zone_top = show_mpoc  ? line.new(bar_index[bars+1], maxVol[bars+1]+Alert_zone_spacing, bar_index+20, maxVol[bars+1]+Alert_zone_spacing, color=alert_line_col, width=1,style=Line_st_poc):na
line.delete(alert_zone_top[1])
alert_zone_bottom = show_mpoc  ? line.new(bar_index[bars+1], maxVol[bars+1]-Alert_zone_spacing, bar_index+20, maxVol[bars+1]-Alert_zone_spacing, color=alert_line_col, width=1,style=Line_st_poc):na
line.delete(alert_zone_bottom[1])
linefill_alert_zone = linefill.new(alert_zone_top, alert_zone_bottom, color=alert_zone_bg)

top_anchored_trend_line = show_mpoc  and hide_tl_top and open[bars+1] < close[bars+1] ? line.new(bar_index[bars+1], high[bars+1], bar_index, high , color=trendln_c, width=trendline_width,style=Line_st_TR):na
line.delete(top_anchored_trend_line[1])
bot_anchored_trend_line = show_mpoc  and hide_tl_bot and open[bars+1] > close[bars+1] ? line.new(bar_index[bars+1], low[bars+1], bar_index, low, color=trendln_c, width=trendline_width,style=Line_st_TR):na
line.delete(bot_anchored_trend_line[1])

Breaker_high    = ta.highest(high, breaker_back)[bars+2]
Breaker_low     = ta.lowest(low, breaker_back)[bars+2]

ob_midline = show_breaker  and show_breakermd ? line.new(bar_index[bars+1+breaker_back],(Breaker_high + Breaker_low)/2,bar_index[bars+1],(Breaker_high + Breaker_low)/2,color=ob_mid_c, style=Line_st_OB):na
line.delete(ob_midline[1])
ob_box = show_breaker  ? box.new(bar_index[bars+1+breaker_back], Breaker_high, bar_index[bars+1], Breaker_low, border_color=breaker_c, border_width=1, bgcolor=breaker_BG_c):na
box.delete(ob_box[1])


label_ob_or_breaker = open[bars+1] > close[bars+1] and close > Breaker_high ? 'BREAKER' :  open[bars+1] > close[bars+1] and close < Breaker_low ? 'OB' : na
label_ob_or_breaker2 = open[bars+1] < close[bars+1] and close < Breaker_low ? 'BREAKER' :  open[bars+1] < close[bars+1] and close > Breaker_low ? 'OB' : na

ob_breaker_label = show_breaker  ? label.new(bar_index[bars+1+(breaker_back/2)], Breaker_high, text=label_ob_or_breaker, color=color.new(color.black,100), style=label.style_label_down, textcolor=Text_c, size=TextSize):na
label.delete(ob_breaker_label[1])
ob_breaker_label2 = show_breaker  ? label.new(bar_index[bars+1+(breaker_back/2)], Breaker_low, text=label_ob_or_breaker2, color=color.new(color.black,100), style=label.style_label_up, textcolor=Text_c, size=TextSize):na
label.delete(ob_breaker_label2[1])



//First Volume Candle
High_vol_candle_body = line.new(bar_index[bars+1], open[bars+1], bar_index[bars+1], close[bars+1], color=candle_c, width=5)
line.delete(High_vol_candle_body[1])
High_vol_candle_wick = line.new(bar_index[bars+1], high[bars+1], bar_index[bars+1], low[bars+1], color=candle_c, width=1)
line.delete(High_vol_candle_wick[1])