// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Jo

//@version=5
indicator("BINANCE PERP AND SPOT VOLUME", shorttitle = "BINANCE PERP AND SPOT VOLUME", overlay = true, max_lines_count = 500, max_boxes_count = 500, max_bars_back = 5000)

ticker_input_1            = input.symbol(title="Ticker 01 Vol",  defval="BTCUSDT", group = "Element On/Off")
ticker_input_2            = input.symbol(title="Ticker 02 Vol",  defval="BTCUSDTPERP", group = "Element On/Off")

[volume_01]               = request.security(ticker_input_1, timeframe.period, expression=[volume])
[volume_02]               = request.security(ticker_input_2, timeframe.period, expression=[volume])

Bars_back                 = input.int(3000,  'Search for highest volume for (x) Bars Back',  minval=0, maxval=4980, group = "Element On/Off")
inp_text_size             = input.string("Tiny", options = ["Tiny", "Small"], title = "Label Text Size", group = "Element On/Off")
TextSize                  = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : na

inp_line_style_poc        = input.string("Dashed", options = ["Dotted", "Solid", "Dashed"], title = "Poc Line Style", group = "Element On/Off")
Line_st_poc               = inp_line_style_poc == "Solid" ? line.style_solid : inp_line_style_poc == "Dotted" ? line.style_dotted : inp_line_style_poc == "Dashed" ? line.style_dashed : na

wick_width                = input.int(1,  'Volume Candle Wick thickness',  minval=1, maxval=30, group = "Element On/Off")
body_width                = input.int(4,  'Volume Candle Body thickness',  minval=1, maxval=30, group = "Element On/Off")

Show_vol_pair01_poc       = input.bool(true, 'Show Pair 01 Poc', group = "Element On/Off")
Show_vol_pair02_poc       = input.bool(true, 'Show Pair 02 Poc', group = "Element On/Off")
show_labels               = input.bool(true, 'Show labels',      group = "Element On/Off")
Show_vol_pair01_candle    = input.bool(true, 'Show pair_01_vol candle', group = "Element On/Off")
Show_vol_pair02_candle    = input.bool(true, 'Show pair_02_vol candle', group = "Element On/Off")

Text_c                    = input.color(color.new(#afcff7, 50) ,'Label Text Color',     group = "Color")
vol_pair01_candle_color   = input.color(color.new(#afcff7, 0)  ,'Pair 01 Candle Color', group = "Color")
vol_pair02_candle_color   = input.color(color.new(#afcff7, 0)  ,'Pair 01 Candle Color', group = "Color")
mainpoc_c                 = input.color(color.new(#afcff7, 70) ,'Poc Line Color',       group = "Color")

//Current timeframe in minutes
currentTimeframe          = timeframe.in_seconds(timeframe.period) / 60

//Dynamic timeframe
dynTf = currentTimeframe <= 30 ? "1" : currentTimeframe > 30 and currentTimeframe <= 180 ? "5" :
 currentTimeframe > 180 and currentTimeframe <= 480 ? "15" : currentTimeframe > 480 and currentTimeframe <= 1440 ? "60" :
  currentTimeframe > 1440 and currentTimeframe <= 4320 ? "120" : currentTimeframe > 4320 ? "240" : na

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Pair 01 LTF Vol
ltfStats1() =>
    pair_01_vol = na(volume_01) == false ? volume_01 : 0
    [close, pair_01_vol]
[pair_01_ltf_vol_source, pair_01_ltf_vol_s]
 = request.security_lower_tf(ticker_input_1, dynTf, ltfStats1())

pair_01_tpo_size                  = array.size(pair_01_ltf_vol_source)
vol_pair01_LTF_max_vol            = array.max(pair_01_ltf_vol_s,0)
vol_pair01_LTF_max_vol_index      = array.indexof(pair_01_ltf_vol_s, vol_pair01_LTF_max_vol)
vol_pair01_LTF_max_vo_a           = array.size(pair_01_ltf_vol_source) > 0 ? array.get(pair_01_ltf_vol_source, vol_pair01_LTF_max_vol_index) : na

//Pair 02 LTF Vol
ltfStats2() =>
    pair_02_vol = na(volume_02) == false ? volume_02 : 0
    [close, pair_02_vol]
[pair_02_ltf_vol_source, pair_02_ltf_vol_s]
 = request.security_lower_tf(ticker_input_2, dynTf, ltfStats2())

pair_02_tpo_size                  = array.size(pair_02_ltf_vol_source)
vol_pair02_LTF_max_vol            = array.max(pair_02_ltf_vol_s,0)
vol_pair02_LTF_max_vol_index      = array.indexof(pair_02_ltf_vol_s, vol_pair02_LTF_max_vol)
vol_pair02_LTF_max_vo_a           = array.size(pair_02_ltf_vol_source) > 0 ? array.get(pair_02_ltf_vol_source, vol_pair02_LTF_max_vol_index) : na

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Pair 01 HTF Vol				   
vol_pair01_HTF_Vol_Array = array.new_float(0)
for i = 1 to Bars_back by 1

	array.push(vol_pair01_HTF_Vol_Array, (volume_01[i]))

vol_pair01_HTF_max_vol         = array.max(vol_pair01_HTF_Vol_Array, 0)
vol_pair01_HTF_max_vol_index   = array.lastindexof(vol_pair01_HTF_Vol_Array, vol_pair01_HTF_max_vol)

//Pair 02 HTF Vol				   
vol_pair02_HTF_Vol_Array = array.new_float(0)
for i = 1 to Bars_back by 1

	array.push(vol_pair02_HTF_Vol_Array, (volume_02[i]))

vol_pair02_HTF_max_vol         = array.max(vol_pair02_HTF_Vol_Array, 0)
vol_pair02_HTF_max_vol_index   = array.lastindexof(vol_pair02_HTF_Vol_Array, vol_pair02_HTF_max_vol)

////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Pair 01 Volume Candle
Pair_01_candle_body = Show_vol_pair01_candle ? line.new(bar_index[vol_pair01_HTF_max_vol_index+1], open[vol_pair01_HTF_max_vol_index+1], bar_index[vol_pair01_HTF_max_vol_index+1], close[vol_pair01_HTF_max_vol_index+1], color=vol_pair01_candle_color, width=body_width):na
line.delete(Pair_01_candle_body[1])
Pair_01_candle_wick = Show_vol_pair01_candle ?  line.new(bar_index[vol_pair01_HTF_max_vol_index+1], high[vol_pair01_HTF_max_vol_index+1], bar_index[vol_pair01_HTF_max_vol_index+1], low[vol_pair01_HTF_max_vol_index+1], color=vol_pair01_candle_color, width=wick_width):na
line.delete(Pair_01_candle_wick[1])

//Pair 02 Volume Candle
Pair_02_candle_body = Show_vol_pair02_candle ? line.new(bar_index[vol_pair02_HTF_max_vol_index+1], open[vol_pair02_HTF_max_vol_index+1], bar_index[vol_pair02_HTF_max_vol_index+1], close[vol_pair02_HTF_max_vol_index+1], color=vol_pair02_candle_color, width=body_width):na
line.delete(Pair_02_candle_body[1])
Pair_02_candle_wick = Show_vol_pair02_candle ? line.new(bar_index[vol_pair02_HTF_max_vol_index+1], high[vol_pair02_HTF_max_vol_index+1], bar_index[vol_pair02_HTF_max_vol_index+1], low[vol_pair02_HTF_max_vol_index+1], color=vol_pair02_candle_color, width=wick_width):na
line.delete(Pair_02_candle_wick[1])

//Pair 01 Poc
Pair_01_Poc_line  = Show_vol_pair01_poc ? line.new(bar_index[vol_pair01_HTF_max_vol_index+1], vol_pair01_LTF_max_vo_a[vol_pair01_HTF_max_vol_index+1], bar_index+20, vol_pair01_LTF_max_vo_a[vol_pair01_HTF_max_vol_index+1], color=mainpoc_c , width=1,style=Line_st_poc):na
line.delete(Pair_01_Poc_line[1])
Pair_01_Poc_label = show_labels and Show_vol_pair01_poc ? label.new(bar_index+23, vol_pair01_LTF_max_vo_a[vol_pair01_HTF_max_vol_index+1], text="LTF Poc  |  $" + str.tostring(vol_pair01_LTF_max_vo_a[vol_pair01_HTF_max_vol_index+1]) + "  |  " + str.tostring(vol_pair01_HTF_max_vol_index) + " bar of "+ str.tostring(Bars_back) + "  |  " + str.tostring(ticker_input_1) + " VOL", color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
label.delete(Pair_01_Poc_label[1])

//Pair 02 Poc
Pair_02_Poc_line  = Show_vol_pair02_poc ? line.new(bar_index[vol_pair02_HTF_max_vol_index+1], vol_pair02_LTF_max_vo_a[vol_pair02_HTF_max_vol_index+1], bar_index+20, vol_pair02_LTF_max_vo_a[vol_pair02_HTF_max_vol_index+1], color=mainpoc_c , width=1,style=Line_st_poc):na
line.delete(Pair_02_Poc_line[1])
Pair_02_Poc_label = show_labels and Show_vol_pair02_poc ? label.new(bar_index+23, vol_pair02_LTF_max_vo_a[vol_pair02_HTF_max_vol_index+1], text="LTF Poc  |  $" + str.tostring(vol_pair02_LTF_max_vo_a[vol_pair02_HTF_max_vol_index+1]) + "  |  " + str.tostring(vol_pair02_HTF_max_vol_index) + " bar of "+ str.tostring(Bars_back) + "  |  " + str.tostring(ticker_input_2) + " VOL", color=color.new(color.black,100), style=label.style_label_left, textcolor=Text_c, size=TextSize):na
label.delete(Pair_02_Poc_label[1])