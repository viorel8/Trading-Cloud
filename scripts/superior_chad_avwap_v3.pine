//Jo

//@version=5
indicator("Multi-Exchange vwap V3", overlay=true, max_bars_back = 500)

startCalculationDate = input.time(timestamp("20 Jan 2023"), "Start Calculation High", confirm=true)
endCalculationDate   = input.time(timestamp("20 Jan 2023"), "End Calculation High", confirm=true)

Show_labels          = input.bool(false, 'Show Labels', group = "Settings")
Show_t1              = input.bool(false, 'Show Ticker 01 Vwap', group = "Settings")
Show_t2              = input.bool(false, 'Show Ticker 02 Vwap', group = "Settings")
Show_t3              = input.bool(false, 'Show Ticker 03 Vwap', group = "Settings")
Show_t4              = input.bool(false, 'Show Ticker 04 Vwap', group = "Settings")
Show_t5              = input.bool(false, 'Show Ticker 05 Vwap', group = "Settings")
Show_t6              = input.bool(false, 'Show Ticker 06 Vwap', group = "Settings")
Show_max             = input.bool(true, 'Show Max Vwap', group = "Settings")
Show_min             = input.bool(true, 'Show Min Vwap', group = "Settings")
Show_avr             = input.bool(true, 'Show Avr Vwap', group = "Settings")

Show_avwap_TB_price  = input.bool(false, 'Show AVWAP TOP BOT price labels', group = "Settings")
Show_avwap_price_mid = input.bool(false, 'Show AVWAP middle label price', group = "Settings")
inp_line_style       = input.string("Step", options = ["Step", "Line"], title = "Cross Line Style", group = "Settings")
Line_st              = inp_line_style == "Step" ? plot.style_stepline : inp_line_style == "Line" ? plot.style_line : na
inp_text_size          = input.string("Tiny", options = ["Tiny", "Small","Normal"], title = "Text Sizs", group = "Settings")
TextSize               = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : inp_text_size == "Normal" ? size.normal : na

Show_weekly          = input.bool(true,  title='Show W Open Dots',        group = "Settings")
Show_monthly         = input.bool(true,  title='Show M Open Dots',        group = "Settings")
Show_yearly          = input.bool(true,  title='Show Y Open Dots',        group = "Settings")
dot_w_c              = input.color(color.new(#f2f3f8, 0),  title = 'Weekly Dot Color' ,   group = "Color Settings")
dot_m_c              = input.color(color.new(#0c54f0, 0),  title = 'Monthly Dot Color' ,   group = "Color Settings")
dot_y_c              = input.color(color.new(#f2f3f8, 0),  title = 'Yearly Dot Color' ,   group = "Color Settings")

tx_c                 = input.color(color.new(#f6fafa, 22), 'Text color',   group = "Color Settings")
max_min_col          = input.color(color.new(#e6ecec, 10), 'Vwap Max Min color',   group = "Color Settings")
avr_col              = input.color(color.new(#edf1f1, 10), 'Vwap Avr color',   group = "Color Settings")

hide_r               = input.string("Hide Right", options = ["Hide Right", "Extend Right"], title = "Cross Line Style", group = "Settings")
Hide_ex              = hide_r == "Hide Right" ? color.new(#080808, 100) : hide_r == "Extend Right" ? max_min_col : na
Hide_ex2             = hide_r == "Hide Right" ? color.new(#080808, 100) : hide_r == "Extend Right" ? avr_col : na


t1                   = input.symbol(title="Ticker 01",  defval = "BINANCE:BTCUSDT")
t2                   = input.symbol(title="Ticker 02",  defval = "BINANCE:BTCUSDTPERP")
t3                   = input.symbol(title="Ticker 03",  defval = "BINANCE:BTCPERP")
t4                   = input.symbol(title="Ticker 04",  defval = "BITSTAMP:BTCUSD")
t5                   = input.symbol(title="Ticker 05",  defval = "BYBIT:BTCUSDT")
t6                   = input.symbol(title="Ticker 06",  defval = "BYBIT:BTCUSD")

[t1_volume_]         = request.security(t1, timeframe.period, expression=[volume])
[t2_volume_]         = request.security(t2, timeframe.period, expression=[volume])
[t3_volume_]         = request.security(t3, timeframe.period, expression=[volume])
[t4_volume_]         = request.security(t4, timeframe.period, expression=[volume])
[t5_volume_]         = request.security(t5, timeframe.period, expression=[volume])
[t6_volume_]         = request.security(t6, timeframe.period, expression=[volume])

[wo1,wc1,wl1,wh1,wc1a]    = request.security(syminfo.tickerid, 'W', expression  = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
[mo1,mc11,ml1,mh1,mc1a]    = request.security(syminfo.tickerid, 'M', expression  = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
[yo1,yc11,yl1,yh1,yc1a]    = request.security(syminfo.tickerid, '12M', expression= [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)

new_week        = wc1[1]  != wc1
new_month       = mc11[1]  != mc11
new_year        = yc11[1]  != yc11

plotchar(new_week  and Show_weekly  ? wo1 : na, title='Close', char='•', location=location.absolute, color=dot_w_c, offset=0, size=size.tiny)
plotchar(new_month and Show_monthly ? mo1 : na, title='Close', char='•', location=location.absolute, color=dot_m_c, offset=0, size=size.tiny)
plotchar(new_year  and Show_yearly  ? yo1 : na, title='Close', char='◎', location=location.absolute, color=dot_y_c, offset=0, size=size.tiny)

vwap_t1() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t1_volume_)
        array.push(volArray, t1_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt1 = vwap_t1()

vwap_t2() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t2_volume_)
        array.push(volArray, t2_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt2 = vwap_t2()

vwap_t3() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t3_volume_)
        array.push(volArray, t3_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt3 = vwap_t3()

vwap_t4() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t4_volume_)
        array.push(volArray, t4_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt4 = vwap_t4()

vwap_t5() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t5_volume_)
        array.push(volArray, t5_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt5 = vwap_t5()

vwap_t6() =>
    var srcVolArray = array.new_float(na)
    var volArray = array.new_float(na)
    if startCalculationDate <= time
        array.push(srcVolArray, ohlc4*t6_volume_)
        array.push(volArray, t6_volume_)
    else
        array.clear(srcVolArray), array.clear(volArray)
    array.sum(srcVolArray)/array.sum(volArray)
vt6 = vwap_t6()

max = math.max(vt1,vt2,vt3,vt4,vt5,vt6)
min = math.min(vt1,vt2,vt3,vt4,vt5,vt6)
avr = math.avg(max,min)

a = high <  max and high > min and close < min
b = low <  max and low > min and close > max

bartime             = int(ta.change(time))
index               = (math.floor((timenow - startCalculationDate) / bartime))-1
bars                = nz(index,1) 
index2              = (math.floor((timenow - endCalculationDate) / bartime))-1
bars_end            = nz(index2,1)

Hide_right        = time > endCalculationDate and time > startCalculationDate ? Hide_ex  : max_min_col
Hide_right_avr    = time > endCalculationDate and time > startCalculationDate ? Hide_ex2  : avr_col

plot(Show_max ? max :na, "max", linewidth=1, color=Hide_right, style=Line_st)
plot(Show_avr ? avr :na, "avr", linewidth=1, color=Hide_right_avr, style=Line_st)
plot(Show_min ? min :na, "min", linewidth=1, color=Hide_right, style=Line_st)

plot(Show_t1 ? vt1 :na, "t1",  linewidth=1, color=Hide_right)
plot(Show_t2 ? vt2 :na, "t2",  linewidth=1, color=Hide_right)
plot(Show_t3 ? vt3 :na, "t3",  linewidth=1, color=Hide_right)
plot(Show_t4 ? vt4 :na, "t4",  linewidth=1, color=Hide_right)
plot(Show_t5 ? vt5 :na, "t5",  linewidth=1, color=Hide_right)
plot(Show_t6 ? vt6 :na, "t6",  linewidth=1, color=Hide_right)

lab1a = Show_labels and Show_t1 ? label.new(bar_index+3,vt1,text=str.tostring(t1)+ "  |  " + str.tostring(vt1,format.mintick) ,style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = tx_c):na
label.delete(lab1a[1])

lab2a = Show_labels and Show_t2 ? label.new(bar_index+3,vt2,text=str.tostring(t2)+ "  |  " + str.tostring(vt2,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = tx_c):na
label.delete(lab2a[1])

lab3a = Show_labels and Show_t3 ? label.new(bar_index+3,vt3,text=str.tostring(t3)+ "  |  " + str.tostring(vt3,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = tx_c):na
label.delete(lab3a[1])

lab4a = Show_labels and Show_t4 ? label.new(bar_index+3,vt4,text=str.tostring(t4)+ "  |  " + str.tostring(vt4,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = tx_c):na
label.delete(lab4a[1])

lab5a = Show_labels and Show_t5 ? label.new(bar_index+3,vt5,text=str.tostring(t5)+ "  |  " + str.tostring(vt5,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = tx_c):na
label.delete(lab5a[1])

lab6a = Show_labels and Show_t6 ? label.new(bar_index+3,vt6,text=str.tostring(t6)+ "  |  " + str.tostring(vt6,format.mintick),style=label.style_label_left,size=TextSize,color=color.new(color.white,100), textcolor = tx_c):na
label.delete(lab6a[1])