//@version=5
indicator('Compare', overlay=true, max_bars_back=4000)

t1                   = input.symbol(title="Ticker",  defval = "BNBUSDT", group = "Global")
[o_,h_,l_,c_,t_]        = request.security(t1, timeframe.period, [open,high,low,close,time])
t2                   = input.symbol(title="Ticker",  defval = "ETHUSDT", group = "Global")
[o2_,h2_,l2_,c2_]    = request.security(t2, timeframe.period, [open,high,low,close])
t3                   = input.symbol(title="Ticker",  defval = "TOTAL", group = "Global")
[o3_,h3_,l3_,c3_]    = request.security(t3, timeframe.period, [open,high,low,close])
inp_text_size        = input.string("Small", options = ["Tiny", "Small","Normal"], title = "Label Text Size", group = "Global")
i_xw                 = input.float(66,    minval=-60000, maxval=2620, step=0.1,  title='Ticker 1 Shift Mult', group = "Global")
i_xw2                = input.float(330,    minval=-60000, maxval=2620, step=0.1,  title='Ticker 2 Shift Mult', group = "Global")
i_xw3                = input.float(5180973750000,    minval=-60000, maxval=9980973750000, step=0.1,  title='Ticker 3 Shift Mult', group = "Global")
TextSize             = inp_text_size == "Tiny" ? size.tiny : inp_text_size == "Small" ? size.small : inp_text_size == "Normal" ? size.normal : na
Show_n_below         = input.bool(true,  title='Show HL or Monday on input chart', group = "Global")

ib_duration          = input.string("5M", options = ["5M", "10M", "30M"], title = "IB Duration", group = "Monday Settings")
ib_time              = ib_duration == "5 Min" ? '0000-0005:2' : ib_duration == "10M" ? '0000-0010:2' : ib_duration == "30M" ? '0000-0030:2' : '0000-0005:2'
show_openingR        = input.string("Entire Week", options = ["Only on Monday", "Entire Week", "None","Tue-Sun"], title = "Show Monday IB on", group = "Monday Settings")
Show_mday_OR         = show_openingR == "Tue-Sun" ? dayofweek == dayofweek.tuesday or dayofweek == dayofweek.wednesday or dayofweek == dayofweek.thursday or dayofweek == dayofweek.friday or dayofweek == dayofweek.saturday or dayofweek == dayofweek.sunday : show_openingR == "Only on Monday" ? dayofweek == dayofweek.monday : show_openingR == "Entire Week" ? dayofweek == dayofweek.monday or dayofweek == dayofweek.tuesday or dayofweek == dayofweek.wednesday or dayofweek == dayofweek.thursday or dayofweek == dayofweek.friday or dayofweek == dayofweek.saturday or dayofweek == dayofweek.sunday: na
dont_show_or         = show_openingR == "None"    ? false :true

md_lines_above_hide  = input.int(20,    minval=1, maxval=100, step=1,     title='Hide Monday Outlines on timeframe above', group = "TF Hide")
md_openR_above_hide  = input.int(20,    minval=1, maxval=100, step=1,     title='Hide Monday IB on timeframe above',       group = "TF Hide")
hl_lines_above_hide  = input.int(20,    minval=1, maxval=100000, step=1,  title='Hide HL lines on timeframe above',        group = "TF Hide")
weekly_hide          = input.int(20,    minval=1, maxval=100000, step=1,  title='Hide Weekly Dots on timeframe above',     group = "TF Hide")
monthly_hide         = input.int(60,    minval=1, maxval=100000, step=1,  title='Hide Monthly Dots on timeframe above',    group = "TF Hide")
yearly_hide          = input.int(10100, minval=1, maxval=100000, step=1,  title='Hide yearly Dots on timeframe above',     group = "TF Hide")
inp_ticker_hide      = input.int(10100, minval=1, maxval=100000, step=1,  title='Hide Input ticker candles on timeframe above', group = "TF Hide")

show_high            = input(title='Show high line Base', defval=false, group ='Pivot Lines')
show_Low             = input(title='Show Low line Base',  defval=false, group ='Pivot Lines')
show_high_inp        = input(title='Show high line ',     defval=false, group ='Pivot Lines')
show_low_inp         = input(title='Show Low line',       defval=false, group ='Pivot Lines')

Show_lab_base        = input.bool(false, title='Show Baser Ticker Label', group = "Settings")
Show_lab_inpt        = input.bool(false, title='Show Input Ticker Label', group = "Settings")
Show_weekly          = input.bool(true,  title='Show W Open Dots',        group = "Settings")
Show_monthly         = input.bool(true,  title='Show M Open Dots',        group = "Settings")
Show_yearly          = input.bool(true,  title='Show Y Open Dots',        group = "Settings")
show_Line_B          = input.bool(true,  title='Show Anchored Magic Line',        group = "Settings")

monday_outline_c     = input.color(color.new(#f4f6f8, 85), title ='Monday Outline Color', group = "Color")
ib_c                 = input.color(color.new(#343946, 60), title ='Monday Opening Range color', group = "Color")
body_c               = input.color(color.new(#fdfafa, 100),title = 'Candle body Color', group = "Color")
border_up_c          = input.color(color.new(#787b86, 10), title = 'Candle border Up Color', group = "Color")
border_down_c        = input.color(color.new(#787b86, 10), title = 'Candle border Down Color', group = "Color")
wick_c               = input.color(color.new(#f2f3f8, 80), title = 'Candle wick Color' , group = "Color")
text_c               = input.color(color.new(#787b86, 10), title = 'Text Color' , group = "Color")
dot_w_c              = input.color(color.new(#f2f3f8, 0),  title = 'Weekly Dot Color' , group = "Color")
dot_m_c              = input.color(color.new(#0c54f0, 0),  title = 'Monthly Dot Color' , group = "Color")
dot_y_c              = input.color(color.new(#f2f3f8, 0),  title = 'Yearly Dot Color' , group = "Color")
top_line_c           = input.color(color.new(#f4f6f8, 85), title = 'Top/Bot Line Color', group = "Color")
line_col_theme       = input.color(color.new(#f4f6f8, 50), title = 'Magic Line Color', group = "Color")

priceA               = input.price(100, inline="Tickor Anchor", confirm=true, group ='Elements')
timeA                = input.time(timestamp("2022-02-20"), inline="Tickor Anchor", confirm=true, group ='Elements')
priceB               = input.price(100, inline="Tickor 2 Anchor", confirm=true, group ='Elements')
timeB                = input.time(timestamp("2022-02-20"), inline="Tickor 2 Anchor", confirm=true, group ='Elements')
priceC               = input.price(100, inline="Tickor 3 Anchor", confirm=true, group ='Elements')
timeC                = input.time(timestamp("2022-02-20"), inline="Tickor 3 Anchor", confirm=true, group ='Elements')
date_top             = input.time(0,title ='Top Line Left Anchor',   confirm = true, group ='Elements')
date_bot             = input.time(0,title ='Bottom Line Left Anchor',confirm = true, group ='Elements')

shift_multip         = priceA/i_xw/5
shift_multip2        = priceB/i_xw2/5
shift_multip3        = priceC/i_xw3*5
trans_p              = color.new(color.orange, 100)

[wo,wc1,wl,wh,wc]          = request.security(t1, 'W',   expression = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
[mo,mc1,ml,mh,mc]          = request.security(t1, 'M',   expression = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
[yo,yc1,yl,yh,yc]          = request.security(t1, '12M', expression = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)

// [wo,wc1,wl,wh,wc]          = request.security(t3, 'W',   expression = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
// [mo,mc1,ml,mh,mc]          = request.security(t3, 'M',   expression = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
// [yo,yc1,yl,yh,yc]          = request.security(t3, '12M', expression = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)

[wo1,wc11,wl1,wh1,wc1a]    = request.security(syminfo.tickerid, 'W', expression  = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
[mo1,mc11,ml1,mh1,mc1a]    = request.security(syminfo.tickerid, 'M', expression  = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
[yo1,yc11,yl1,yh1,yc1a]    = request.security(syminfo.tickerid, '12M', expression= [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)

new_week        = wc1[1]  != wc1
new_month       = mc1[1]  != mc1
new_year        = yc1[1]  != yc1

new_week_inp    = wc1a[1] != wc1a
new_month_inp   = mc1a[1] != mc1a
new_year_inp    = yc1a[1] != yc1a

hide_right      = time < timeA  ? dot_w_c : trans_p
hide_right2     = time < timeA  ? dot_m_c : trans_p
hide_right3     = time < timeA  ? dot_y_c : trans_p

leftborder_top  = timenow - time < timenow - date_top
leftborder_bot  = timenow - time < timenow - date_bot 
rightborder     = barstate.islast

max = float(na)
max := not leftborder_top ? na : na(max[1]) ? high : max[1]
barsSinceLastHigh = int(na)
barsSinceLastHigh := not leftborder_top ? na : na(barsSinceLastHigh[1]) ? 0 : barsSinceLastHigh + 1

min = float(na)
min := not leftborder_bot ? na : na(min[1]) ? low : min[1]
barsSinceLastLow = int(na)
barsSinceLastLow := not leftborder_bot ? na : na(barsSinceLastLow[1]) ? 0 : barsSinceLastLow + 1

if high > max
    max := high
    barsSinceLastHigh := 0
    barsSinceLastHigh

if low < min
    min := low
    barsSinceLastLow := 0
    barsSinceLastLow

lastHigh = rightborder ? max[1] : na
lastLow = rightborder  ? min[1] : na

max_inp = float(na)
max_inp := not leftborder_top ? na : na(max_inp[1]) ? (h_*shift_multip) : max_inp[1]
barsSinceLastHigh2 = int(na)
barsSinceLastHigh2 := not leftborder_top ? na : na(barsSinceLastHigh2[1]) ? 0 : barsSinceLastHigh2 + 1

min_inp = float(na)
min_inp := not leftborder_bot ? na : na(min_inp[1]) ? (l_*shift_multip) : min_inp[1]
barsSinceLastLow2 = int(na)
barsSinceLastLow2 := not leftborder_bot ? na : na(barsSinceLastLow2[1]) ? 0 : barsSinceLastLow2 + 1

if (h_*shift_multip) > max_inp
    max_inp:= (h_*shift_multip)
    barsSinceLastHigh2 := 0
    barsSinceLastHigh2

if (l_*shift_multip) < min_inp
    min_inp := (l_*shift_multip)
    barsSinceLastLow2 := 0
    barsSinceLastLow2

lastHigh2 = rightborder ? max_inp[1] : na
lastLow2 = rightborder  ? min_inp[1] : na

//Monday Outlines
var datePrev = 0
var H = 0.0
var L = 0.0
var H1 = 0.0
var L1 = 0.0

date = time('D')
newDay1   = date != datePrev
datePrev := date

dow    = dayofweek(date) + 1
bcolor = dow == dayofweek.tuesday ? monday_outline_c : trans_p

H  := newDay1 or high > H ? high[0] : H
L  := newDay1 or low  < L ? low[0]  : L
H1 := newDay1 or h_*shift_multip > H1 ? h_*shift_multip[0] : H1
L1 := newDay1 or l_*shift_multip < L1 ? l_*shift_multip[0] : L1

//Monday IB
getIB(session_times) =>
    in_session = time(timeframe.period, session_times)
    var ib_high = 0.0
    var ib_low = 10e10
    var ib_high1 = 0.0
    var ib_low1 = 10e10
    if in_session
        if not in_session[1]
            ib_high := high
            ib_low := low
            ib_low
            ib_high1 := h_*shift_multip
            ib_low1 := l_*shift_multip
            ib_low1
        else
            ib_high := math.max(high, ib_high)
            ib_low := math.min(low, ib_low)
            ib_low
            ib_high1 := math.max(h_*shift_multip, ib_high1)
            ib_low1 := math.min(l_*shift_multip, ib_low1)
            ib_low1
    [in_session, ib_high, ib_low,ib_high1, ib_low1]
[in_day_session, ib_high, ib_low,ib_high1, ib_low1] = getIB(ib_time)

//IB Plot
fill_c = dow == Show_mday_OR ? trans_p : ib_c
day_ib_start   = plot(timeframe.multiplier <= md_openR_above_hide and Show_mday_OR ? ib_high  : na, title='IB High Line', color=trans_p, linewidth=1, style=plot.style_stepline)
day_ib_end     = plot(timeframe.multiplier <= md_openR_above_hide and Show_mday_OR ? ib_low   : na, title='IB Low Line' , color=trans_p, linewidth=1, style=plot.style_stepline)
fill(day_ib_start, day_ib_end, color=fill_c, title='IB Background')

day_ib_start1  = plot(timeframe.multiplier <= md_openR_above_hide and Show_mday_OR and Show_n_below ? ib_high1 : na, title='IB High Line', color=trans_p, linewidth=1, style=plot.style_stepline)
day_ib_end1    = plot(timeframe.multiplier <= md_openR_above_hide and Show_mday_OR and Show_n_below ? ib_low1  : na, title='IB Low Line' , color=trans_p, linewidth=1, style=plot.style_stepline)
fill(day_ib_start1, day_ib_end1, color=fill_c, title='IB Background')

pH  = plot(timeframe.multiplier <= md_lines_above_hide ? H:na,  title='High', style=plot.style_stepline, linewidth=1, color=bcolor)
pL  = plot(timeframe.multiplier <= md_lines_above_hide ? L:na,  title='Low',  style=plot.style_stepline, linewidth=1, color=bcolor)
pH1 = plot(timeframe.multiplier <= md_lines_above_hide and Show_n_below ? H1:na, title='High', style=plot.style_stepline, linewidth=1, color=bcolor)
pL1 = plot(timeframe.multiplier <= md_lines_above_hide and Show_n_below ? L1:na, title='Low',  style=plot.style_stepline, linewidth=1, color=bcolor)

plot(show_high     and timeframe.multiplier <= hl_lines_above_hide  ? max     : na, color=top_line_c, style=plot.style_stepline,  title='High', linewidth = 1)
plot(show_Low      and timeframe.multiplier <= hl_lines_above_hide  ? min     : na, color= top_line_c, style=plot.style_stepline,   title='Low',  linewidth = 1)
plot(show_high_inp and timeframe.multiplier <= hl_lines_above_hide and Show_n_below  ? max_inp : na, color=top_line_c, style=plot.style_stepline,  title='High', linewidth = 1)
plot(show_low_inp  and timeframe.multiplier <= hl_lines_above_hide and Show_n_below  ? min_inp : na, color= top_line_c, style=plot.style_stepline, title='Low' , linewidth = 1)

//Dots Plot
plotchar(timeframe.multiplier <= weekly_hide  and new_week      and Show_weekly  ? wo*shift_multip : na, title='Close', char='•', location=location.absolute, color=dot_w_c, offset=0, size=size.tiny)
plotchar(timeframe.multiplier <= monthly_hide and new_month     and Show_monthly ? mo*shift_multip : na, title='Close', char='•', location=location.absolute, color=dot_m_c, offset=0, size=size.tiny)
plotchar(timeframe.multiplier <= yearly_hide  and new_year      and Show_yearly  ? yo*shift_multip : na, title='Close', char='◎', location=location.absolute, color=dot_y_c, offset=0, size=size.tiny)
plotchar(timeframe.multiplier <= weekly_hide  and new_week_inp  and Show_weekly  ? wo1 : na, title='Close', char='•', location=location.absolute, color=hide_right, offset=0, size=size.tiny)
plotchar(timeframe.multiplier <= monthly_hide and new_month_inp and Show_monthly ? mo1 : na, title='Close', char='•', location=location.absolute, color=hide_right2, offset=0, size=size.tiny)
plotchar(timeframe.multiplier <= yearly_hide  and new_year_inp  and Show_yearly  ? yo1 : na, title='Close', char='◎', location=location.absolute, color=hide_right3, offset=0, size=size.tiny)

//Ticker Labels
Percent = ((close - open) / (open)) *100
Percent2 = (((c_*shift_multip) - (o_*shift_multip)) / ((o_*shift_multip))) *100
Percent3 = (((c2_*shift_multip2) - (o2_*shift_multip2)) / ((o2_*shift_multip2))) *100
Percent4 = (((c3_*shift_multip3) - (o3_*shift_multip3)) / ((o3_*shift_multip3))) *100

Ticker_label_base = Show_lab_base ? label.new(bar_index+8,close,text=str.tostring(syminfo.prefix + ':' + syminfo.ticker) +  " |  " + str.tostring(Percent,format.percent),style=label.style_label_left,color=trans_p,textcolor = text_c,size=TextSize ):na
label.delete(Ticker_label_base[1])
Ticker_label = Show_lab_inpt ? label.new(bar_index+8,c_*shift_multip,text=str.tostring(t1)+  " |  " + str.tostring(Percent2,format.percent),style=label.style_label_left,color=trans_p,textcolor = text_c,size=TextSize ):na
label.delete(Ticker_label[1])
// Ticker_label2 = Show_lab_inpt ? label.new(bar_index+8,c2_*shift_multip2,text=str.tostring(t2)+  " |  " + str.tostring(Percent3,format.percent),style=label.style_label_left,color=trans_p,textcolor = text_c,size=TextSize ):na
// label.delete(Ticker_label2[1])
// Ticker_label3 = Show_lab_inpt ? label.new(bar_index+8,c3_*shift_multip3,text=str.tostring(t3)+  " |  " + str.tostring(Percent4,format.percent),style=label.style_label_left,color=trans_p,textcolor = text_c,size=TextSize ):na
// label.delete(Ticker_label3[1])




//Ticker Plot
lcol =  open < close ? border_up_c : border_down_c 
// plotcandle(inp_ticker_hide ? o_*shift_multip:na, h_*shift_multip, l_*shift_multip, c_*shift_multip,title='PlotCandle',color=body_c ,wickcolor=wick_c ,bordercolor=lcol)
// plotcandle(inp_ticker_hide ? o2_*shift_multip2:na, h2_*shift_multip2, l2_*shift_multip2, c2_*shift_multip2,title='PlotCandle',color=body_c ,wickcolor=wick_c ,bordercolor=lcol)
// plotcandle(inp_ticker_hide ? o3_*shift_multip3:na, h3_*shift_multip3, l3_*shift_multip3, c3_*shift_multip3,title='PlotCandle',color=body_c ,wickcolor=wick_c ,bordercolor=lcol)

plotbar(inp_ticker_hide ? o_*shift_multip:na, h_*shift_multip, l_*shift_multip, c_*shift_multip,title='PlotCandle',color=lcol)
// plotbar(inp_ticker_hide ? o2_*shift_multip2:na, h2_*shift_multip2, l2_*shift_multip2, c2_*shift_multip2,title='Plotbar',color=lcol)
// plotbar(inp_ticker_hide ? o3_*shift_multip3:na, h3_*shift_multip3, l3_*shift_multip3, c3_*shift_multip3,title='Plotbar',color=lcol)





//Monday Anchored
new_period(p) => p and na(p[1])
sm = time(timeframe.period, "0000-0000:2")
var float c = close[1]
var float cb = c_[1]


if new_period(sm)
    c := close
    cb := c_   

if sm
    c := close
    cb := c_


new_period2(p2) => p2 and na(p2[1])
sm2 = time(timeframe.period, "0000-0000:1")
var float c2 = close
var float c2b = c_


if new_period2(sm2)
    c2 := time  
    c2b := t_

if sm2
    c2 := close
    c2b := c_
    

mon_open_bar = ta.barssince(sm2)
mon_end_bar  = ta.barssince(sm)    



line_n = show_Line_B ? line.new(bar_index[mon_open_bar],c2,bar_index[mon_end_bar],c,color=line_col_theme,width = 1, extend = extend.right, style = line.style_dotted):na
line.delete(line_n[1])

// kkk = line.get_price(line_n,bar_index[1])

// line_n1 = show_Line_B ? line.new(bar_index[mon_end_bar],c,bar_index[1],kkk,color=line_col_theme,width = 1, style = line.style_dotted):na
// line.delete(line_n1[1])

line_nb = show_Line_B ? line.new(bar_index[mon_open_bar],c2b*shift_multip,bar_index[mon_end_bar],cb*shift_multip,color=line_col_theme,width = 1, extend = extend.right, style = line.style_dotted):na
line.delete(line_nb[1])