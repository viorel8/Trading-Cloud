//Jo - I Jo-Pippin declare that some of this code were copied from open source code available on the Tradingview Server. Thanks to those who made their code available. 
//@version=5
indicator("Position Beta V3", overlay = true)

//Acc Inputs 
float  equity                = input.float(defval = 1000.00, title ="Equity ($)",                                                group = "Acc Inputs",confirm=true)
float  Maker_comission_fee   = input.float(0.01,             title = "% Maker fee per trade (Limit Order Entry and Exit)",       group = "Acc Inputs",confirm=true)
float  Taker_comission_fee   = input.float(0.05,             title = "% Taker fee per trade (Market Order Stop Loss) ",          group = "Acc Inputs",confirm=true)
float  Slipage_fee           = input.float(0.00,             title = "% Slipage on Market orders",                               group = "Acc Inputs",confirm=true)
float  risk_percentage       = input.float(defval = 2,       title = "% Equity to be risked per trade", options = [0.3,0.4,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8],  group="Acc Inputs",confirm=true)
bool   TP_with_market_ordrer = input.bool(false,              title = "TP by Market Order (default Limit Order)",                 group = "Acc Inputs",confirm=true)

string Entry_point_str       = "Entry Point"
string Take_p_point_str      = "Take Profit"
string Stop_s_point_str      = "Stop Loss"
string Switch_point_str      = "Show/Hide Table Switch. Place switch on the Left Side Of the Position Box. Switch Lever above entry price will show Table.  Switch Lever below entry price will hide Table"

//Element Inputs
string i_timeZone            = input.string('UTC+2', title = "Input Timezone",                                                                   group = "Elements")
bool   Space_table_text      = input.bool(true,      title = "Space Table Text Vertical",                                                        group = "Elements")
bool   space_table_hor       = input.bool(true,      title = "Space Table Text Horizontal",                                                      group = "Elements")
bool   Show_general_info     = input.bool(true,      title = "Show General Info",                                                                group = "Elements")
bool   show_fees             = input.bool(true,      title = "Show Fees",                                                                        group = "Elements")
bool   show_margin           = input.bool(true,      title = "Show Margin info",                                                                 group = "Elements")
bool   show_pips             = input.bool(true,      title = "Show Pips",                                                                        group = "Elements")
bool   show_ROI              = input.bool(true,      title = "Show potential ROI",                                                               group = "Elements")
int    dec                   = input.int(2,          title = "Decimal Points"   , minval=1, maxval =3                                      ,     group = "Elements")
int    multiply_bars_edge    = input.int(8,          title = "Expand Box to the Right", minval=0, maxval =40,                                    group = "Elements")
string textSize_price_labels = input.string("Tiny",  title = "Price Label Text Size", options = ["Auto","Tiny","Small","Normal","Large","Huge"], group = "Elements")
string textSize_pair_labels  = input.string("Small", title = "Pair Label Text Size" , options = ["Auto","Tiny","Small","Normal","Large","Huge"], group = "Elements")
string textSize_time_labels  = input.string("Small", title = "Time Label Text Size" , options = ["Auto","Tiny","Small","Normal","Large","Huge"], group = "Elements")
string textSize_RR_labels    = input.string("Large", title = "RR Label Text Size"   , options = ["Auto","Tiny","Small","Normal","Large","Huge"], group = "Elements")
string textSize_Table        = input.string("Normal",title = "Table Headings Size"  , options = ["Auto","Tiny","Small","Normal"],                group = "Elements")
string textSize_Table_nor    = input.string("Small", title = "Table Text Size"      , options = ["Auto","Tiny","Small","Normal"],                group = "Elements")

//Dynamic Inputs
float  Entry_price           = input.price(0,"Entry Point",   confirm = true,                             inline = "21",                         group ="Dynamic Inputs")
int    entryTime             = input.time (0,"Entry Point",   confirm = true, tooltip = Entry_point_str,  inline = "21",                         group ="Dynamic Inputs")
float  Take_profit_price     = input.price(0,"TakeP Price",   confirm = true, tooltip = Take_p_point_str, inline = "22",                         group ="Dynamic Inputs")
float  Stop_loss_price       = input.price(0,"StopL Price",   confirm = true, tooltip = Stop_s_point_str, inline = "23",                         group ="Dynamic Inputs")
float  switch_price          = input.price(0,"Switch Levr",   confirm = true,                             inline = "24",                         group ="Dynamic Inputs")
int    switch_time           = input.time (0,"Switch Levr",   confirm = true, tooltip = Switch_point_str, inline = "24",                         group ="Dynamic Inputs")

int    right_edge_bars       = multiply_bars_edge * 1000000

//color
color  textCol               = input.color(color.new(#b2b5be,50),  title = "Trading Pair Text Color",                                          group = "color")
color  textCol_RR_date_perc  = input.color(color.new(#b2b5be,36),  title = "RR, Perc and Time Color",                                          group = "color")
color  entryColorInput       = input.color(color.new(#ffffff,85),  title = "In trade Dashed Line"   ,                                          group = "color")
color  txtColorInput         = input.color(color.new(#b2b5be,20),  title = "Price Label Color"      ,                                          group = "color")
color  Table_text_color      = input.color(color.new(#d8d6d8, 15), title = "Table Headings Color"   ,                                          group = "color")
color  Table_text_color_nor  = input.color(color.new(#9598a1, 0),  title = "Table Text Color"       ,                                          group = "color")
color  tpcolor               = input.color(#5b9cf6, title = "Tp color"            ,                                                            group = "color")
color  slcolor               = input.color(#afcff7, title = "Sl color"            ,                                                            group = "color")
int    tpopacity             = input.int  (90,        title = "Tp Opacity"          ,                                                            group = "color")
int    tp_in_trade_opac      = input.int  (95,        title = "Tp In Trade Opacity" ,                                                            group = "color")
int    slopacity             = input.int  (84,        title = "Sl Opacity"          ,                                                            group = "color")
int    sl_in_trade_opac      = input.int  (97,        title = "Sl In Trade Opacity" ,                                                            group = "color")
color  tpColorInput          = color.new(tpcolor,tpopacity)
color  slColorInput          = color.new(slcolor,slopacity)
color  tp_orderzone_col      = color.new(tpcolor,tp_in_trade_opac)
color  sl_orderzone_col      = color.new(slcolor,sl_in_trade_opac)
color  opaque                = color.new(color.black,100)

//Decimals
d =  dec  == 1 ? "#.#"   : 
     dec  == 2 ? "#.##"  : 
     dec  == 3 ? "#.###" : na

//Text Sizing
Price_Label_tx_size = textSize_price_labels == "Auto" ? size.auto :
     textSize_price_labels == "Tiny" ? size.tiny :
     textSize_price_labels == "Small" ? size.small :
     textSize_price_labels == "Normal" ? size.normal :
     textSize_price_labels == "Large" ? size.large :
     textSize_price_labels == "Huge" ? size.huge : na   

Pair_Label_tx_size = textSize_pair_labels == "Auto" ? size.auto :
     textSize_pair_labels == "Tiny" ? size.tiny :
     textSize_pair_labels == "Small" ? size.small :
     textSize_pair_labels == "Normal" ? size.normal :
     textSize_pair_labels == "Large" ? size.large :
     textSize_pair_labels == "Huge" ? size.huge : na      

Time_Label_tx_size = textSize_time_labels == "Auto" ? size.auto :
     textSize_time_labels == "Tiny" ? size.tiny :
     textSize_time_labels == "Small" ? size.small :
     textSize_time_labels == "Normal" ? size.normal :
     textSize_time_labels == "Large" ? size.large :
     textSize_time_labels == "Huge" ? size.huge : na      

RR_Label_tx_size = textSize_RR_labels == "Auto" ? size.auto :
     textSize_RR_labels == "Tiny" ? size.tiny :
     textSize_RR_labels == "Small" ? size.small :
     textSize_RR_labels == "Normal" ? size.normal :
     textSize_RR_labels == "Large" ? size.large :
     textSize_RR_labels == "Huge" ? size.huge : na 

Table_tx_size = textSize_Table == "Auto" ? size.auto :
     textSize_Table == "Tiny" ? size.tiny :
     textSize_Table == "Small" ? size.small :
     textSize_Table == "Normal" ? size.normal :na

Table_tx_size_nor = textSize_Table_nor == "Auto" ? size.auto :
     textSize_Table_nor == "Tiny" ? size.tiny :
     textSize_Table_nor == "Small" ? size.small :
     textSize_Table_nor == "Normal" ? size.normal :na     
    
/// CALCULATIONS
Curent_price          = math.round_to_mintick(close) 
comission1_maker      = Maker_comission_fee/100
comission2_taker      = Taker_comission_fee/100
risk                  = risk_percentage/100

Pips_to_be_gained     = Take_profit_price - Entry_price
Pips_to_be_lost       = Entry_price  - Stop_loss_price
Pips_gained_already   = Curent_price - Entry_price
Pips_lost_already     = Curent_price - Stop_loss_price

Stop_to_entry_percentage                = math.abs((Stop_loss_price-Entry_price)*100/Entry_price) + (Maker_comission_fee + Taker_comission_fee)
Take_profit_to_entry_percentage         = math.abs((Take_profit_price-Entry_price)*100/Entry_price) + (Maker_comission_fee + Maker_comission_fee)
Stop_to_current_price_percentage        = math.abs((Stop_loss_price-Curent_price)*100/Curent_price)
Take_profit_to_current_price_percentage = math.abs((Take_profit_price-Curent_price)*100/Curent_price)

Risk                 = (Entry_price - Stop_loss_price) / Entry_price
Reward               = ((Take_profit_price - Entry_price) / Entry_price)
Reward_current       = ((Curent_price - Entry_price) / Entry_price)
RR_Ratio             = math.round(Reward / Risk, 2)
RR_Ratio_current     = math.round(Reward_current / Risk, 2)

Risk_in_USD          = risk_percentage/100 * equity


Slippage_fee_to_USD  = Slipage_fee/100* Risk_in_USD
Slippage_fee_to_Asst = (Slippage_fee_to_USD/Entry_price*1000)/1000

Maker_fee_to_USD     = Maker_comission_fee/100* Risk_in_USD
Maker_fee_to_Asset   = (Maker_fee_to_USD/Entry_price*1000)/1000
Taker_fee_to_USD     = Taker_comission_fee/100* Risk_in_USD
Taker_fee_to_Asset   = (Taker_fee_to_USD/Entry_price*1000)/1000

USD_risked_to_asset  = (Risk_in_USD/Entry_price*1000)/1000
profit_usd           = (Risk_in_USD * RR_Ratio)  
current_profit_usd   = (Risk_in_USD * RR_Ratio_current) 

if_tp_with_market_or = TP_with_market_ordrer ? Taker_fee_to_USD : Maker_fee_to_USD
tp_with_market_or_Qu = TP_with_market_ordrer ? Taker_fee_to_Asset : Maker_fee_to_Asset
tp_with_market_or_Sl = TP_with_market_ordrer ? Slippage_fee_to_USD : 0
tp_with_market_or_SlA= TP_with_market_ordrer ? Slippage_fee_to_Asst : 0

ratio                = risk / Stop_to_current_price_percentage
positionsize         = equity * ratio
Leverage             = (positionsize-Taker_fee_to_USD-Maker_fee_to_USD-Slippage_fee_to_USD)/equity
Initial_margin       = (Leverage/100) * (Risk_in_USD-Maker_fee_to_USD-Slippage_fee_to_USD-if_tp_with_market_or)

direction            = Take_profit_price>Stop_loss_price? Entry_price>Take_profit_price  ? "SETUP ERROR":Entry_price<Stop_loss_price?"SETUP ERROR": "LONG" : Entry_price<Take_profit_price?"SETUP ERROR":Entry_price>Stop_loss_price?"SETUP ERROR": "SHORT"
Show_hide_table      = switch_price < Entry_price and direction == "SHORT"  ? true :switch_price > Entry_price and direction == "LONG" ? true :false
Show_hide_Prices     = switch_price > Stop_loss_price    and direction == "SHORT"  ? false : switch_price < Stop_loss_price and direction == "LONG" ? false : true

box_txt_b_t_inv      = Take_profit_price>Stop_loss_price ? Entry_price>Take_profit_price ? na : Entry_price<Stop_loss_price ? na : text.align_bottom : Entry_price<Take_profit_price ? na : Entry_price>Stop_loss_price ? na: text.align_top
box_txt_b_t          = Take_profit_price>Stop_loss_price ? Entry_price>Take_profit_price ? na : Entry_price<Stop_loss_price ? na : text.align_top : Entry_price<Take_profit_price ? na : Entry_price>Stop_loss_price ? na: text.align_bottom
box_txt_b_t_sel      = Take_profit_price>Stop_loss_price ? Entry_price>Take_profit_price ? na : Entry_price<Stop_loss_price ? na : tp_orderzone_col : Entry_price<Take_profit_price ? na : Entry_price>Stop_loss_price ? na: sl_orderzone_col
box_txt_date_pos     = Take_profit_price>Stop_loss_price ? Entry_price>Take_profit_price ? na : Entry_price<Stop_loss_price ? na : ("\n\n\n  " +str.tostring(hour(timenow, i_timeZone), '00:') + str.tostring(minute(timenow, i_timeZone), '00:') + str.tostring(second(timenow, i_timeZone), '00')+ "\n  " +str.tostring(Take_profit_to_entry_percentage,d)+ "%"+ "\n\n\n\n"  ) : Entry_price<Take_profit_price ? na : Entry_price>Stop_loss_price ? na: ("\n\n\n  " +str.tostring(Take_profit_to_entry_percentage,d)+ "%"+ "\n "+str.tostring(hour(timenow, i_timeZone), '00:') + str.tostring(minute(timenow, i_timeZone), '00:') + str.tostring(second(timenow, i_timeZone), '00') + "\n\n\n\n"  )
tp_with              = TP_with_market_ordrer ? "MARKET ORDER" : "LIMIT ORDER"

float entryPrice     = math.round_to_mintick(Entry_price)
float tpPrice        = math.round_to_mintick(Take_profit_price)
float slPrice        = math.round_to_mintick(Stop_loss_price)

var bool isOrderClosedByBracket = na
var int  realEntryTime          = na
string   extend                 = extend.none

var line entryPriceLine         = line.new(entryTime, entryPrice, na, na, xloc = xloc.bar_time, color = entryColorInput, extend = extend)
var line pointerOrderPriceLine  = line.new(entryTime, entryPrice, na, na, xloc = xloc.bar_time, color = entryColorInput, style  = line.style_dashed)

var box tpZone     = box.new(entryTime, tpPrice, na, entryPrice, xloc = xloc.bar_time, extend = extend, bgcolor = tpColorInput, border_width = 0)
var box tpZone2    = box.new(entryTime, tpPrice, na, entryPrice, xloc = xloc.bar_time, extend = extend, bgcolor = tpColorInput, border_width = 0)
var box slZone     = box.new(entryTime, slPrice, na, entryPrice, xloc = xloc.bar_time, extend = extend, bgcolor = slColorInput, border_width = 0)
var box orderZone  = box.new(na,        na,      na, entryPrice, xloc = xloc.bar_time,                  bgcolor = na,           border_width = 0)

var label profit   = Show_hide_Prices ? label.new(na, tpPrice,    "", style = label.style_label_left, color = color.green, textcolor = txtColorInput, xloc = xloc.bar_time,size = Price_Label_tx_size):na
var label loss     = Show_hide_Prices ? label.new(na, slPrice,    "", style = label.style_label_left, color = color.purple, textcolor = txtColorInput, xloc = xloc.bar_time,size = Price_Label_tx_size):na
var label mainInfo = Show_hide_Prices ? label.new(na, entryPrice, "", style = label.style_label_left, color = na,                textcolor = txtColorInput, xloc = xloc.bar_time,size = Price_Label_tx_size):na

defineCurrency() =>
    string currency = "Default" == "Default" ? "" : "Default"

convertCurrency(series float price, simple string currency) =>
    float convertedClose = request.security(syminfo.tickerid, timeframe.period, close, currency = currency)
    float ratio1  = convertedClose / close
    float result = price * ratio1

calcPL(series float price, series float entryPrice, series float qty, series bool isLongPosition) =>
    float pl = math.round_to_mintick((price - entryPrice) * qty) 
    float result = isLongPosition ? pl : pl * -1

calcQty(series float size, series float lossSize) =>
    float currecyValueRiskAmount = "%" == "%" ? size * risk_percentage * 0.01 : risk_percentage
    float qty = currecyValueRiskAmount / math.abs(lossSize)
    float qtyPerLot = qty / 1
    bool symbolHasFloatContract = syminfo.type == "crypto" or syminfo.type == "futures"
    qty := symbolHasFloatContract ? qty : math.floor(qty)
    qtyPerLot := symbolHasFloatContract ? qtyPerLot : math.floor(qtyPerLot)
    [qty, qtyPerLot]

calcProfitLossSize(series float price, series float entryPrice) =>
    float result = price - entryPrice

calcOrderProfitLossParam(series float price, series float entryPrice) =>
    float orderProfitLossSize    = calcProfitLossSize(price, entryPrice)
    float orderProfitLossPercent = math.round(orderProfitLossSize / entryPrice * 100, 2)
    [orderProfitLossSize, orderProfitLossPercent]

calcBaseUnit() =>
    bool  isForexSymbol = syminfo.type         == "forex"
    bool  isYenQuote    = syminfo.currency     == "JPY"
    bool  isYenBase     = syminfo.basecurrency == "JPY"
    float result = isForexSymbol ? isYenQuote ? 0.01 : isYenBase ? 0.00001 : 0.0001 : syminfo.mintick
    
calcOrderPipsOrTicks(series float orderSize, simple float unit) =>
    int result = math.abs(math.round(orderSize / unit))

calcProfitLossRiskSize(series float qty, series float orderProfitLossSize) =>
    float result = qty * orderProfitLossSize * syminfo.pointvalue

calcOrderProfitLossAmount(series float size, series float riskSize) =>
    float result = size + riskSize

calcRiskRewardRatio(series float profitSize, series float lossSize) =>
    float result = math.round(profitSize / lossSize, 2)

calcProfitlossPerPipOrTick(series float riskSize, series float units) =>
    float result  = riskSize / units

getColorByPositionReturn(series float price) =>
    color result = price >= 0 ? color.green : color.purple

getExitParams(series bool isLongPosition, series float tp, series float sl) =>
    float takeProfit = tp
    float stopLoss   = sl
    if not isLongPosition
        takeProfit  := sl
        stopLoss    := tp
    float exitPrice     = high >= takeProfit ? takeProfit : low <= stopLoss ? stopLoss : close
    color exitZoneColor = isLongPosition and exitPrice > entryPrice or 
                      not isLongPosition and exitPrice < entryPrice ?  tpColorInput : slColorInput
    [exitPrice, exitZoneColor]

labelSetInfo(label labelId, series int x, series string txt, series color col) =>
    if txt == ""
        label.delete(labelId)
    else
        label.set_x(labelId, x)
        label.set_text(labelId, txt)
        label.set_color(labelId, col)
  
getLevelInfo(series float price, series float size, series float percent, series int ticks, series float amount, simple string currency, series bool isTarget) =>
    string resultInfo = ""
    string level = isTarget ? "Target: " : "Stop: "
    string unit = syminfo.type == "forex" ? "Pip" : "Tick"
    string cur = true ? " " + currency : ""
    string targetStopPriceString   = true  ? str.format("@{0,number},", price) : ""
    string targetStopString        = true  ? str.format(" {0,number,###,###,###.######}{1}", size, cur) : ""
    string targetStopPercentString = true  ? str.format(" ({0,number,#.###}%)", percent) : ""
    string targetStopTicksString   = true  ? str.format(" {0,number,#} {1}s", ticks, unit) : ""
    string targetStopAmountString  = true  ? str.format("\nAmount: {0,number,###,###,###.##}{1}", amount, cur) : ""
    resultInfo := targetStopPriceString + targetStopString + targetStopPercentString + targetStopTicksString + targetStopAmountString
    resultInfo := resultInfo != "" and (true or true or true) ? level + resultInfo : resultInfo

getOrderInfo(series float price, series float pl, series float qty, series float perPipOrTick, series float riskReward, series float cagr, series bool isOrderOpen, series bool isOrderClosedByBracket, simple string currency) =>
    string orderPosition = switch
        isOrderClosedByBracket => "Closed"
        isOrderOpen            => "Open"
        =>                        "Position isn't open yet"
    string cur = true ? str.format(" {0}", currency) : ""
    string unit = syminfo.type == "forex" ? "Pip" : "Tick"
    bool hasPositionStatus  = orderPosition != "Position isn't open yet"
    string priceString      = true ? str.format("@{0,number}, ", price) : ""
    string plString         = true and hasPositionStatus ? str.format(" P&L: {0,number,###,###,###.##}{1}", pl, cur) : ""
    string qtyString        = true                       ? str.format(", Qty: {0,number}", qty) : ""
    string riskRewardString = true                       ? str.format("\nRR: {0,number,#.##}:1", riskReward) : ""
    string cagrString       = true and not na(cagr)      ? str.format("\nCAGR: {0,number,###,###.#}%", cagr) : ""
    string perPipString     = true                       ? str.format(", Per {0}: {1,number}{2}", unit, math.round_to_mintick(perPipOrTick), cur) : ""
    string result           = priceString + orderPosition + plString + qtyString + riskRewardString + perPipString + cagrString

drawOrderInfo(series string lblProfitText, series color profitColor, series string lblLossText, series color lossColor, series string lblOrderInfo, series color plColor) =>
    int drawingCenter = math.round(time+right_edge_bars )
    labelSetInfo(profit,   drawingCenter, str.tostring(Take_profit_price,d), opaque)
    labelSetInfo(loss,     drawingCenter, str.tostring(Stop_loss_price,d),   opaque)
    labelSetInfo(mainInfo, drawingCenter, str.tostring(Entry_price,d),  opaque)

redrawOrderZone(series float exitPrice, series float realEntryPrice, series int realEntryTime, series color orderZoneColor) =>
    line.set_xy1(pointerOrderPriceLine, realEntryTime, realEntryPrice)
    line.set_xy2(pointerOrderPriceLine, time+right_edge_bars, exitPrice)
    box.set_lefttop(orderZone, realEntryTime, exitPrice)
    box.set_right(orderZone, time+right_edge_bars)
    box.set_bgcolor(orderZone, box_txt_b_t_sel)

if (slPrice > entryPrice and tpPrice > entryPrice) or (slPrice < entryPrice and tpPrice < entryPrice)
    runtime.error("The 'Target' and 'Stop' levels are misplaced. One must be set above the 'Entry Price', the other below.")

string currency             = defineCurrency()
float  exitPrice            = close
float  convertedPrice       = convertCurrency(exitPrice,  currency)
float  convertedEntryPrice  = convertCurrency(entryPrice, currency)
float  convertedTpPrice     = convertCurrency(tpPrice,    currency)
float  convertedSlPrice     = convertCurrency(slPrice,    currency)
float  convertedAccountSize = convertCurrency(equity,  currency)

import TradingView/ta/2 as ta

[p, l] = if time >= entryTime and not isOrderClosedByBracket 
    var color exitZoneColor = entryColorInput
    bool isLongPosition = tpPrice > slPrice
    realEntryTime := na(realEntryTime[1]) and (low <= entryPrice and high >= entryPrice) ? time : realEntryTime[1]
    box.set_right(tpZone, time+right_edge_bars)
    box.set_right(slZone, time+right_edge_bars)
    box.set_text(slZone," " + str.tostring(syminfo.root))
    box.set_text_halign(slZone,text.align_left)
    box.set_text_valign(slZone,  box_txt_b_t_inv)
    box.set_text_size(slZone,Pair_Label_tx_size)
    box.set_text_color(slZone,textCol)

    box.set_text(tpZone,box_txt_date_pos)
    box.set_text_halign(tpZone,text.align_left)
    box.set_text_valign(tpZone,  box_txt_b_t)
    box.set_text_size(tpZone,Time_Label_tx_size)
    box.set_text_color(tpZone,textCol_RR_date_perc)

    box.set_right(tpZone2, time+right_edge_bars)
    box.set_text(tpZone2,"" +str.tostring(RR_Ratio,d) + ":1" )
    box.set_text_halign(tpZone2,text.align_left)
    box.set_text_valign(tpZone2,  box_txt_b_t)
    box.set_text_size(tpZone2,RR_Label_tx_size)
    box.set_text_color(tpZone2,textCol_RR_date_perc)
    box.set_bgcolor(tpZone2,opaque)

    isOrderOpen = not na(realEntryTime)
    if isOrderOpen
        [currentExitPrice, currentExitZoneColor] = getExitParams(isLongPosition, tpPrice, slPrice)
        exitZoneColor := currentExitZoneColor

        isOrderClosedByBracket := currentExitPrice != exitPrice
        if isOrderClosedByBracket
            convertedPrice := convertCurrency(currentExitPrice, currency)
        redrawOrderZone(currentExitPrice, entryPrice, realEntryTime, exitZoneColor)
        
        var float fixedEntryPrice = convertedEntryPrice
        convertedEntryPrice := fixedEntryPrice
        
        // Allert
        if not isOrderOpen[1]
            alert(str.format("The position was entered at the price {0, number}", entryPrice), alert.freq_once_per_bar)
        if isOrderClosedByBracket
            if currentExitPrice == tpPrice
                alert(str.format("The position was closed by Take Profit at the price {0, number}", currentExitPrice), alert.freq_once_per_bar)
            if currentExitPrice == slPrice
                alert(str.format("The position was closed by Stop Loss at the price {0, number}", currentExitPrice), alert.freq_once_per_bar)
    

    [profitSize, profitPercent] = calcOrderProfitLossParam(convertedTpPrice, convertedEntryPrice)
    [lossSize, lossPercent]     = calcOrderProfitLossParam(convertedSlPrice, convertedEntryPrice)
    [qty, qtyPerLot]            = calcQty(equity, calcProfitLossSize(slPrice, entryPrice))
    
    float PL                    = calcPL(convertedPrice, convertedEntryPrice, qty, isLongPosition)
    var float unit              = calcBaseUnit()
    var int   profitPipsOrTicks = calcOrderPipsOrTicks(calcProfitLossSize(tpPrice, entryPrice), unit)
    var int   lossPipsOrTicks   = calcOrderPipsOrTicks(calcProfitLossSize(slPrice, entryPrice), unit)
    float profitRiskSize        = calcProfitLossRiskSize(qtyPerLot * 1, profitSize)
    float lossRiskSize          = calcProfitLossRiskSize(qtyPerLot * 1, lossSize)
    float profitAmount          = calcOrderProfitLossAmount(convertedAccountSize, profitRiskSize) 
    float lossAmount            = calcOrderProfitLossAmount(convertedAccountSize, lossRiskSize)
    float profitPerPipOrTick    = calcProfitlossPerPipOrTick(profitRiskSize, profitPipsOrTicks)
    float lossPerPipOrTick      = calcProfitlossPerPipOrTick(lossRiskSize,   lossPipsOrTicks)
    float riskRewardRatio       = calcRiskRewardRatio(profitSize, lossSize)
    float cagr                  = ta.cagr(realEntryTime, convertedEntryPrice, time, convertedPrice)
    string currencyDisplayName  = currency == "" ? syminfo.currency : currency
    string lblProfitText        = getLevelInfo(tpPrice, profitSize, profitPercent, profitPipsOrTicks, profitAmount, currencyDisplayName, true)
    string lblLossText          = getLevelInfo(slPrice, lossSize,   lossPercent,   lossPipsOrTicks,   lossAmount,   currencyDisplayName, false)
    string lblOrderInfo         = getOrderInfo(entryPrice, PL, qtyPerLot, profitPerPipOrTick, riskRewardRatio, cagr, isOrderOpen, isOrderClosedByBracket, currencyDisplayName)
    color profitColor           = getColorByPositionReturn(profitSize)
    color lossColor             = getColorByPositionReturn(lossSize)
    color plColor               = getColorByPositionReturn(PL)
    drawOrderInfo(lblProfitText, profitColor, lblLossText, lossColor, lblOrderInfo, plColor)

    if isOrderClosedByBracket 
        box.set_extend(tpZone, extend.none)
        box.set_extend(slZone, extend.none)
        line.set_extend(entryPriceLine, extend.none)
    [profitSize, lossSize]

syminfo = syminfo.type == "crypto" ? "CRYPTO" : syminfo.type

var table_detail = table.new(position.top_right,columns=4, rows=50,bgcolor=opaque,frame_color=opaque,frame_width=1)

if barstate.islastconfirmedhistory and Show_hide_table and Show_general_info
    table.merge_cells(table_detail, start_column=0, start_row=0, end_column=1, end_row=0)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=0, text="G E N E R A L",text_color=Table_text_color,text_size=Table_tx_size)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=0, text="",text_color=Table_text_color,text_size=Table_tx_size)

if barstate.islastconfirmedhistory and Show_hide_table and Show_general_info and Space_table_text
    table.cell(table_detail,text_halign=text.align_left, column=0, row=1, text="",text_size=Table_tx_size_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=1, text="",text_size=Table_tx_size_nor)

if barstate.islastconfirmedhistory and Show_hide_table and Show_general_info
    table.cell(table_detail,text_halign=text.align_left, column=0, row=2, text="Timeframe:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=2, text= str.tostring(timeframe.period),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=3, text="Trading Pair:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=3, text= str.tostring(syminfo.root),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=4, text="Market:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=4, text= str.tostring(syminfo),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=5, text="Exchange:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=5, text= str.tostring(syminfo.prefix),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

if barstate.islastconfirmedhistory and Show_hide_table and Show_general_info and Space_table_text
    table.cell(table_detail,text_halign=text.align_left, column=0, row=6, text="",text_size=Table_tx_size_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=6, text="",text_size=Table_tx_size_nor)
    
if barstate.islastconfirmedhistory and Show_hide_table
    table.cell(table_detail,text_halign=text.align_left, column=0, row=7, text="T R A D E",text_color=Table_text_color,text_size=Table_tx_size)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=7, text="",text_color=Table_text_color,text_size=Table_tx_size)

if barstate.islastconfirmedhistory and Show_hide_table and Show_general_info and Space_table_text
    table.cell(table_detail,text_halign=text.align_left, column=0, row=8, text="",text_size=Table_tx_size_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=8, text="",text_size=Table_tx_size_nor)

if barstate.islastconfirmedhistory and Show_hide_table
    table.cell(table_detail,text_halign=text.align_left, column=0, row=9,  text="Direction:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=9,  text= str.tostring(direction),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=10, text="Entry Price:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=10, text="$"+str.tostring(Entry_price,d),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=11, text="Take Profit:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=11, text="$"+str.tostring(Take_profit_price,d),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=12, text="Stop Loss:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=12, text="$"+str.tostring(Stop_loss_price,d),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=13, text="Risk/Reward:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=13, text= str.tostring(RR_Ratio,d)+ ":1",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=14, text="Percent Gain:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=14, text= str.tostring(Take_profit_to_entry_percentage,d)+ "%",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=15, text="Percent Loss:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=15, text= str.tostring(Stop_to_entry_percentage,d)+ "%",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=16, text="Tick Gain:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=16, text= str.tostring(Pips_to_be_gained*10,d)+ " Ticks",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=17, text="Tick Loss:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=17, text= str.tostring(Pips_to_be_lost*10,d)+ " Ticks",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

if barstate.islastconfirmedhistory and Show_hide_table and show_pips
    table.cell(table_detail,text_halign=text.align_left, column=0, row=18, text="Pip Gain:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=18, text= str.tostring(Pips_to_be_gained,d)+ " Pips",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=19, text="Pip Loss:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=19, text= str.tostring(Pips_to_be_lost,d)+ " Pips",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

if barstate.islastconfirmedhistory and Show_hide_table and Space_table_text
    table.cell(table_detail,text_halign=text.align_left, column=0, row=20, text="",text_size=Table_tx_size_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=20, text="",text_size=Table_tx_size_nor)

if barstate.islastconfirmedhistory and Show_hide_table
    table.cell(table_detail,text_halign=text.align_left, column=0, row=21, text="A C C O U N T",text_color=Table_text_color,text_size=Table_tx_size)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=21, text="",text_color=Table_text_color,text_size=Table_tx_size)

if barstate.islastconfirmedhistory and Show_hide_table and Show_general_info and Space_table_text
    table.cell(table_detail,text_halign=text.align_left, column=0, row=22, text="",text_size=Table_tx_size_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=22, text="",text_size=Table_tx_size_nor)

if barstate.islastconfirmedhistory and Show_hide_table
    table.cell(table_detail,text_halign=text.align_left, column=0, row=23, text="Equity:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=23, text="$"+str.tostring(equity,d),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=24, text="Acc Risk pt:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=24, text=str.tostring(risk_percentage,d)+"%",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=25, text="Acc Risk $:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=25, text="$" +str.tostring(Risk_in_USD, d),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=26, text="TP with:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=26, text=str.tostring(tp_with),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=27, text="Leverage:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=27, text=str.tostring(Leverage,d)+"X",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=28, text="Quantity:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=28, text=str.tostring(USD_risked_to_asset - tp_with_market_or_Qu - Maker_fee_to_Asset - tp_with_market_or_SlA,"#.#####") + " " + str.tostring(syminfo.basecurrency),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=29, text="Potential Profit:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=29, text="$"+str.tostring(profit_usd - if_tp_with_market_or - Maker_fee_to_USD - tp_with_market_or_Sl, d),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=30, text="Potential Loss:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=30, text="$"+str.tostring(Risk_in_USD, d),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

if barstate.islast and Show_hide_table
    table.cell(table_detail,text_halign=text.align_left, column=0, row=31, text="Current Profit/Loss:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=31, text="$"+str.tostring(current_profit_usd - if_tp_with_market_or - Maker_fee_to_USD - tp_with_market_or_Sl, d),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

if barstate.islastconfirmedhistory and Show_hide_table and show_margin
    table.cell(table_detail,text_halign=text.align_left, column=0, row=32, text="Initial Margin $:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=32, text="$" + str.tostring(Initial_margin, d),text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 



if barstate.islastconfirmedhistory and Show_hide_table and show_fees and Space_table_text
    table.cell(table_detail,text_halign=text.align_left, column=0, row=33, text="",text_size=Table_tx_size_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=20, text="",text_size=Table_tx_size_nor)

if barstate.islastconfirmedhistory and Show_hide_table and show_fees
    table.cell(table_detail,text_halign=text.align_left, column=0, row=34, text="F E E S",text_color=Table_text_color,text_size=Table_tx_size)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=34, text="",text_color=Table_text_color,text_size=Table_tx_size)

if barstate.islastconfirmedhistory and Show_hide_table and Space_table_text and show_fees
    table.cell(table_detail,text_halign=text.align_left, column=0, row=35, text="",text_size=Table_tx_size_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=35, text="",text_size=Table_tx_size_nor)

if barstate.islastconfirmedhistory and Show_hide_table and show_fees
    table.cell(table_detail,text_halign=text.align_left, column=0, row=36, text="Slippage Fee %:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=36, text=str.tostring(Slipage_fee, d)+"%",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=37, text="Maker Fee %:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=37, text=str.tostring(Maker_comission_fee, d)+"%",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=38, text="Taker Fee %:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=38, text=str.tostring(Taker_comission_fee, d)+"%",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=39, text="Maker Fee in $:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=39, text="$" +str.tostring(Maker_fee_to_USD, "#.######"),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=40, text="Taker Fee in $:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=40, text="$" +str.tostring(Taker_fee_to_USD, "#.######"),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=41, text="Slippage Fee in $:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=41, text="$" +str.tostring(Slippage_fee_to_USD, "#.######"),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=42, text="Maker Fee in " + str.tostring(syminfo.basecurrency),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=42, text="$" +str.tostring(Maker_fee_to_Asset, "#.#######")+" " + str.tostring(syminfo.basecurrency),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=43, text="Taker Fee in " + str.tostring(syminfo.basecurrency),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=43, text="$" +str.tostring(Taker_fee_to_Asset, "#.#######") +" " + str.tostring(syminfo.basecurrency),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

    table.cell(table_detail,text_halign=text.align_left, column=0, row=44, text="Slippage Fee in " + str.tostring(syminfo.basecurrency),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=3, row=44, text="$" +str.tostring(Slippage_fee_to_Asst, "#.#######") +" " + str.tostring(syminfo.basecurrency),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

if barstate.islastconfirmedhistory and Show_hide_table and show_pips
    table.cell(table_detail,text_halign=text.align_left, column=0, row=45, text="Pips Already Gained:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=45, text= str.tostring(Pips_gained_already,d)+ " Pips",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=46, text="Pips Already Lost:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=46, text= str.tostring(Pips_lost_already,d)+ " Pips",text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

if barstate.islastconfirmedhistory and Show_hide_table and show_ROI
    table.cell(table_detail,text_halign=text.align_left, column=0, row=47, text="Account Gain:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=47, text= "$" + str.tostring(equity + profit_usd - if_tp_with_market_or - Maker_fee_to_USD - tp_with_market_or_Sl,d),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)
    table.cell(table_detail,text_halign=text.align_left, column=0, row=48, text="Account Loss:",text_size=Table_tx_size_nor, text_color=Table_text_color_nor) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=48, text= "$" + str.tostring(equity-Risk_in_USD,d),text_size=Table_tx_size_nor, text_color=Table_text_color_nor)

if barstate.islastconfirmedhistory and Show_hide_table and space_table_hor
    table.cell(table_detail,text_halign=text.align_left, column=0, row=49, text="..................................",text_size=Table_tx_size_nor, text_color=opaque) 
    table.cell(table_detail,text_halign=text.align_left, column=3, row=49, text="",text_size=Table_tx_size_nor, text_color=opaque)