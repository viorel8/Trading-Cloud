//@version=5

indicator("Meeehee Y|M|W AVWAP", overlay = true)

src                  = input(ohlc4, "Source", group = "Settings")
inp_line_style       = input.string("Step", options = ["Step", "Line"], title = "Cross Line Style", group = "Settings")
Line_st              = inp_line_style == "Step" ? plot.style_stepline : inp_line_style == "Line" ? plot.style_line : na

plot_vW              = input(true, "Weekly VWAP", group = "Settings")
plot_vM              = input(true, "Monthly VWAP", group = "Settings")
plot_vY              = input(true, "Yearly VWAP", group = "Settings")

width_aggr           = input.int (1,    'Aggr Vwap line width', minval=1, maxval=30, group = "Integer inputs")

Show_agrw            = input.bool(true, 'Show Aggr Weekly Vwap', group = "Settings")
Show_agrm            = input.bool(true, 'Show Aggr Monthly Vwap', group = "Settings")
Show_agry            = input.bool(true, 'Show Aggr Yearly Vwap', group = "Settings")
Show_t1              = input.bool(true, 'Show Ticker 01 Vwap', group = "Settings")
Show_t2              = input.bool(true, 'Show Ticker 02 Vwap', group = "Settings")
Show_t3              = input.bool(true, 'Show Ticker 03 Vwap', group = "Settings")
Show_t4              = input.bool(true, 'Show Ticker 04 Vwap', group = "Settings")
Show_t5              = input.bool(true, 'Show Ticker 05 Vwap', group = "Settings")
Show_t6              = input.bool(true, 'Show Ticker 06 Vwap', group = "Settings")
Show_max             = input.bool(false, 'Show Max Vwap',      group = "Settings")
Show_min             = input.bool(false, 'Show Min Vwap',      group = "Settings")
Show_labels          = input.bool(true, 'Show Labels',         group = "Settings")

// Show_weekly          = input.bool(true,  title='Show W Open Dots', group = "Settings")
// Show_monthly         = input.bool(true,  title='Show M Open Dots', group = "Settings")
// Show_yearly          = input.bool(true,  title='Show Y Open Dots', group = "Settings")

// dot_w_c              = input.color(color.new(#f2f3f8, 0),  title = 'Weekly Dot Color' ,   group = "Color Settings")
// dot_m_c              = input.color(color.new(#0c54f0, 0),  title = 'Monthly Dot Color' ,  group = "Color Settings")
// dot_y_c              = input.color(color.new(#f80707, 0),  title = 'Yearly Dot Color' ,   group = "Color Settings")
aggr_c               = input.color(color.new(#4afc04, 0), 'Aggr Avwap Color',   group = "Color Settings")
max_min_col          = input.color(color.new(#e6ecec, 85), 'Vwap Max Min color',   group = "Color Settings")
all_col              = input.color(color.new(#f23645, 85), 'Vwap Weekly color',   group = "Color Settings")
all_col_fill         = input.color(color.new(#3260f5, 95), 'Vwap Weekly Fill color',   group = "Color Settings")
all_colm             = input.color(color.new(#b2ebf2, 85), 'Vwap Monthly color',   group = "Color Settings")
all_col_fillm        = input.color(color.new(#078af5, 95), 'Vwap Monthly Fill color',   group = "Color Settings")
all_coly             = input.color(color.new(#ffcc80, 85), 'Vwap Yearly color',   group = "Color Settings")
all_col_filly        = input.color(color.new(#f1a440, 95), 'Vwap Yearly Fill color',   group = "Color Settings")
lab_c                = input.color(color.new(#fafafa, 20), 'Label color',   group = "Color Settings")

t1                   = input.symbol(title="Ticker 01",  defval = "BINANCE:BTCUSDT")
t2                   = input.symbol(title="Ticker 02",  defval = "BINANCE:BTCUSDTPERP")
t3                   = input.symbol(title="Ticker 03",  defval = "BINANCE:BTCPERP")
t4                   = input.symbol(title="Ticker 04",  defval = "BITSTAMP:BTCUSD")
t5                   = input.symbol(title="Ticker 05",  defval = "BYBIT:BTCUSDT")
t6                   = input.symbol(title="Ticker 06",  defval = "BYBIT:BTCUSD")

[t1_volume_]         = request.security(t1, timeframe.period, expression=[volume])
[t2_volume_]         = request.security(t2, timeframe.period, expression=[volume])
[t3_volume_]         = request.security(t3, timeframe.period, expression=[volume])
[t4_volume_]         = request.security(t4, timeframe.period, expression=[volume])
[t5_volume_]         = request.security(t5, timeframe.period, expression=[volume])
[t6_volume_]         = request.security(t6, timeframe.period, expression=[volume])

aggr = t1_volume_ + t2_volume_ + t3_volume_+ t4_volume_+ t5_volume_+ t6_volume_

[wo1,wc1,wl1,wh1,wc1a]     = request.security(syminfo.tickerid, 'W', expression  = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
[mo1,mc11,ml1,mh1,mc1a]    = request.security(syminfo.tickerid, 'M', expression  = [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)
[yo1,yc11,yl1,yh1,yc1a]    = request.security(syminfo.tickerid, '12M', expression= [open, close[1],low,high,close], lookahead=barmerge.lookahead_on)

eq = (yl1 + yh1) /2


new_week        = wc1[1]   != wc1
new_month       = mc11[1]  != mc11
new_year        = yc11[1]  != yc11

// plotchar(new_week  and Show_weekly  ? wo1 : na, title='Close', char='•', location=location.absolute, color=dot_w_c, offset=0, size=size.tiny)
// plotchar(new_month and Show_monthly ? mo1 : na, title='Close', char='•', location=location.absolute, color=dot_m_c, offset=0, size=size.tiny)
// plotchar(new_year  and Show_yearly  ? yo1 : na, title='Close', char='◎', location=location.absolute, color=dot_y_c, offset=0, size=size.tiny)

computeVWAP1(src, isNewPeriod) =>
	var float sumSrcVol = na
	var float sumVol = na
    var float sumSrcSrcVol = na

	sumSrcVol := isNewPeriod ? src * t1_volume_ : src * t1_volume_ + sumSrcVol[1]
	sumVol := isNewPeriod ? t1_volume_ : t1_volume_ + sumVol[1]
	sumSrcSrcVol := isNewPeriod ? t1_volume_ * math.pow(src, 2) : t1_volume_ * math.pow(src, 2) + sumSrcSrcVol[1]

	_vwap = sumSrcVol / sumVol
	variance = sumSrcSrcVol / sumVol - math.pow(_vwap, 2)
	variance := variance < 0 ? 0 : variance
	stDev = math.sqrt(variance)
	[_vwap]

computeVWAP2(src, isNewPeriod) =>
	var float sumSrcVol = na
	var float sumVol = na
    var float sumSrcSrcVol = na

	sumSrcVol := isNewPeriod ? src * t2_volume_ : src * t2_volume_ + sumSrcVol[1]
	sumVol := isNewPeriod ? t2_volume_ : t2_volume_ + sumVol[1]
	sumSrcSrcVol := isNewPeriod ? t2_volume_ * math.pow(src, 2) : t2_volume_ * math.pow(src, 2) + sumSrcSrcVol[1]

	_vwap = sumSrcVol / sumVol
	variance = sumSrcSrcVol / sumVol - math.pow(_vwap, 2)
	variance := variance < 0 ? 0 : variance
	stDev = math.sqrt(variance)
	[_vwap]	

computeVWAP3(src, isNewPeriod) =>
	var float sumSrcVol = na
	var float sumVol = na
    var float sumSrcSrcVol = na

	sumSrcVol := isNewPeriod ? src * t3_volume_ : src * t3_volume_ + sumSrcVol[1]
	sumVol := isNewPeriod ? t3_volume_ : t3_volume_ + sumVol[1]
	sumSrcSrcVol := isNewPeriod ? t3_volume_ * math.pow(src, 2) : t3_volume_ * math.pow(src, 2) + sumSrcSrcVol[1]

	_vwap = sumSrcVol / sumVol
	variance = sumSrcSrcVol / sumVol - math.pow(_vwap, 2)
	variance := variance < 0 ? 0 : variance
	stDev = math.sqrt(variance)
	[_vwap]		

computeVWAP4(src, isNewPeriod) =>
	var float sumSrcVol = na
	var float sumVol = na
    var float sumSrcSrcVol = na

	sumSrcVol := isNewPeriod ? src * t4_volume_ : src * t4_volume_ + sumSrcVol[1]
	sumVol := isNewPeriod ? t4_volume_ : t4_volume_ + sumVol[1]
	sumSrcSrcVol := isNewPeriod ? t4_volume_ * math.pow(src, 2) : t4_volume_ * math.pow(src, 2) + sumSrcSrcVol[1]

	_vwap = sumSrcVol / sumVol
	variance = sumSrcSrcVol / sumVol - math.pow(_vwap, 2)
	variance := variance < 0 ? 0 : variance
	stDev = math.sqrt(variance)
	[_vwap]		

computeVWAP5(src, isNewPeriod) =>
	var float sumSrcVol = na
	var float sumVol = na
    var float sumSrcSrcVol = na

	sumSrcVol := isNewPeriod ? src * t5_volume_ : src * t5_volume_ + sumSrcVol[1]
	sumVol := isNewPeriod ? t5_volume_ : t5_volume_ + sumVol[1]
	sumSrcSrcVol := isNewPeriod ? t5_volume_ * math.pow(src, 2) : t5_volume_ * math.pow(src, 2) + sumSrcSrcVol[1]

	_vwap = sumSrcVol / sumVol
	variance = sumSrcSrcVol / sumVol - math.pow(_vwap, 2)
	variance := variance < 0 ? 0 : variance
	stDev = math.sqrt(variance)
	[_vwap]				

computeVWAP6(src, isNewPeriod) =>
	var float sumSrcVol = na
	var float sumVol = na
    var float sumSrcSrcVol = na

	sumSrcVol := isNewPeriod ? src * t6_volume_ : src * t6_volume_ + sumSrcVol[1]
	sumVol := isNewPeriod ? t6_volume_ : t6_volume_ + sumVol[1]
	sumSrcSrcVol := isNewPeriod ? t6_volume_ * math.pow(src, 2) : t6_volume_ * math.pow(src, 2) + sumSrcSrcVol[1]

	_vwap = sumSrcVol / sumVol
	variance = sumSrcSrcVol / sumVol - math.pow(_vwap, 2)
	variance := variance < 0 ? 0 : variance
	stDev = math.sqrt(variance)
	[_vwap]				

computeVWAPagr(src, isNewPeriod) =>
	var float sumSrcVol = na
	var float sumVol = na
    var float sumSrcSrcVol = na

	sumSrcVol := isNewPeriod ? src * aggr : src * aggr + sumSrcVol[1]
	sumVol := isNewPeriod ? aggr : aggr + sumVol[1]
	sumSrcSrcVol := isNewPeriod ? aggr * math.pow(src, 2) : aggr * math.pow(src, 2) + sumSrcSrcVol[1]

	_vwap = sumSrcVol / sumVol
	variance = sumSrcSrcVol / sumVol - math.pow(_vwap, 2)
	variance := variance < 0 ? 0 : variance
	stDev = math.sqrt(variance)
	[_vwap]					

timeChange(period) =>
	ta.change(time(period))

newSessionW = timeChange("W")
newSessionM = timeChange("M")
newSessionY = timeChange("12M")

[vt1w] = computeVWAP1(src, newSessionW)
[vt1m] = computeVWAP1(src, newSessionM)
[vt1y] = computeVWAP1(src, newSessionY)

[vt2w] = computeVWAP2(src, newSessionW)
[vt2m] = computeVWAP2(src, newSessionM)
[vt2y] = computeVWAP2(src, newSessionY)

[vt3w] = computeVWAP3(src, newSessionW)
[vt3m] = computeVWAP3(src, newSessionM)
[vt3y] = computeVWAP3(src, newSessionY)

[vt4w] = computeVWAP4(src, newSessionW)
[vt4m] = computeVWAP4(src, newSessionM)
[vt4y] = computeVWAP4(src, newSessionY)

[vt5w] = computeVWAP5(src, newSessionW)
[vt5m] = computeVWAP5(src, newSessionM)
[vt5y] = computeVWAP5(src, newSessionY)

[vt6w] = computeVWAP6(src, newSessionW)
[vt6m] = computeVWAP6(src, newSessionM)
[vt6y] = computeVWAP6(src, newSessionY)

[vtagrw] = computeVWAPagr(src, newSessionW)
[vtagrm] = computeVWAPagr(src, newSessionM)
[vtagry] = computeVWAPagr(src, newSessionY)

max_weekly  = math.max(vt1w,vt2w,vt3w,vt4w,vt5w,vt6w)
max_monthly = math.max(vt1m,vt2m,vt3m,vt4m,vt5m,vt6m)
max_yearly  = math.max(vt1y,vt2y,vt3y,vt4y,vt5y,vt6y)

min_weekly  = math.min(vt1w,vt2w,vt3w,vt4w,vt5w,vt6w)
min_monthly = math.min(vt1m,vt2m,vt3m,vt4m,vt5m,vt6m)
min_yearly  = math.min(vt1y,vt2y,vt3y,vt4y,vt5y,vt6y)


plot(Show_agrw and plot_vW ? vtagrw :na, "Aggr weekly",  linewidth=width_aggr, color=aggr_c , style=Line_st)

plot(Show_t1 and plot_vW ? vt1w :na, "t1",  linewidth=1, color=all_col, style=Line_st)
plot(Show_t2 and plot_vW ? vt2w :na, "t2",  linewidth=1, color=all_col, style=Line_st)
plot(Show_t3 and plot_vW ? vt3w :na, "t3",  linewidth=1, color=all_col, style=Line_st)
plot(Show_t4 and plot_vW ? vt4w :na, "t4",  linewidth=1, color=all_col, style=Line_st)
plot(Show_t5 and plot_vW ? vt5w :na, "t5",  linewidth=1, color=all_col, style=Line_st)
plot(Show_t6 and plot_vW ? vt6w :na, "t6",  linewidth=1, color=all_col, style=Line_st)

plot(Show_agrm and plot_vW ? vtagrm :na, "Aggr monthly",  linewidth=width_aggr, color=aggr_c , style=Line_st) 

plot(Show_t1 and plot_vM ? vt1m :na, "t1",  linewidth=1, color=all_colm, style=Line_st)
plot(Show_t2 and plot_vM ? vt2m :na, "t2",  linewidth=1, color=all_colm, style=Line_st)
plot(Show_t3 and plot_vM ? vt3m :na, "t3",  linewidth=1, color=all_colm, style=Line_st)
plot(Show_t4 and plot_vM ? vt4m :na, "t4",  linewidth=1, color=all_colm, style=Line_st)
plot(Show_t5 and plot_vM ? vt5m :na, "t5",  linewidth=1, color=all_colm, style=Line_st)
plot(Show_t6 and plot_vM ? vt6m :na, "t6",  linewidth=1, color=all_colm, style=Line_st)

plot(Show_agry and plot_vW ? vtagry :na, "Aggr yearly",  linewidth=width_aggr, color=aggr_c , style=Line_st)

plot(Show_t1 and plot_vY ? vt1y :na, "t1",  linewidth=1, color=all_coly, style=Line_st)
plot(Show_t2 and plot_vY ? vt2y :na, "t2",  linewidth=1, color=all_coly, style=Line_st)
plot(Show_t3 and plot_vY ? vt3y :na, "t3",  linewidth=1, color=all_coly, style=Line_st)
plot(Show_t4 and plot_vY ? vt4y :na, "t4",  linewidth=1, color=all_coly, style=Line_st)
plot(Show_t5 and plot_vY ? vt5y :na, "t5",  linewidth=1, color=all_coly, style=Line_st)
plot(Show_t6 and plot_vY ? vt6y :na, "t6",  linewidth=1, color=all_coly, style=Line_st)

w_max = plot(Show_max and plot_vW ? max_weekly :na, "max", linewidth=1, color=max_min_col, style=Line_st)
w_min = plot(Show_min and plot_vW ? min_weekly :na, "min", linewidth=1, color=max_min_col, style=Line_st)
w_max1 = plot(plot_vW ? max_weekly :na, "max", linewidth=1, color=color.new(color.black,100), style=Line_st)
w_min1 = plot(plot_vW ? min_weekly :na, "min", linewidth=1, color=color.new(color.black,100), style=Line_st)
fill(w_max1, w_min1, color=all_col_fill)

m_max = plot(Show_max and plot_vM ? max_monthly :na, "max", linewidth=1, color=max_min_col, style=Line_st)
m_min = plot(Show_min and plot_vM ? min_monthly :na, "min", linewidth=1, color=max_min_col, style=Line_st)
m_max1 = plot(plot_vM ? max_monthly :na, "max", linewidth=1, color=color.new(color.black,100), style=Line_st)
m_min1 = plot(plot_vM ? min_monthly :na, "min", linewidth=1, color=color.new(color.black,100), style=Line_st)
fill(m_max1, m_min1, color=all_col_fillm)

y_max = plot(Show_max and plot_vY ? max_yearly :na, "max", linewidth=1, color=max_min_col, style=Line_st)
y_min = plot(Show_min and plot_vY ? min_yearly :na, "min", linewidth=1, color=max_min_col, style=Line_st)
y_max1 = plot(plot_vY ? max_yearly :na, "max", linewidth=1, color=color.new(color.black,100), style=Line_st)
y_min1 = plot(plot_vY ? min_yearly :na, "min", linewidth=1, color=color.new(color.black,100), style=Line_st)
fill(y_max1, y_min1, color=all_col_filly)

avrw = math.avg(max_weekly,min_weekly)
labw = Show_labels ? label.new(bar_index+3,avrw,text="W" ,style=label.style_label_left,size=size.tiny,color=color.new(color.white,100), textcolor = lab_c):na
label.delete(labw[1])

avrm = math.avg(max_monthly,min_monthly)
labm = Show_labels ? label.new(bar_index+3,avrm,text="M" ,style=label.style_label_left,size=size.tiny,color=color.new(color.white,100), textcolor = lab_c):na
label.delete(labm[1])

avry = math.avg(max_yearly,min_yearly)
laby = Show_labels ? label.new(bar_index+3,avry,text="Y" ,style=label.style_label_left,size=size.tiny,color=color.new(color.white,100), textcolor = lab_c):na
label.delete(laby[1])

labeq = Show_labels ? label.new(bar_index+3,eq,text="EQ" ,style=label.style_label_left,size=size.tiny,color=color.new(color.white,100), textcolor = lab_c):na
label.delete(labeq[1])